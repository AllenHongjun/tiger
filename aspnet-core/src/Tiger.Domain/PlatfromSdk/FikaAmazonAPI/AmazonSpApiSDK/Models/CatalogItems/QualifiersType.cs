/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems
{
    /// <summary>
    /// QualifiersType
    /// </summary>
    [DataContract]
    public partial class QualifiersType : IEquatable<QualifiersType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QualifiersType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public QualifiersType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QualifiersType" /> class.
        /// </summary>
        /// <param name="ItemCondition">The condition of the item. Possible values: New, Used, Collectible, Refurbished, or Club. (required).</param>
        /// <param name="ItemSubcondition">The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other. (required).</param>
        /// <param name="FulfillmentChannel">The fulfillment channel for the item. Possible values:  * Amazon - Fulfilled by Amazon. * Merchant - Fulfilled by the seller. (required).</param>
        /// <param name="ShipsDomestically">Indicates whether the marketplace specified in the request and the location that the item ships from are in the same country. Possible values: True, False, or Unknown. (required).</param>
        /// <param name="ShippingTime">(0-2 days, 3-7 days, 8-13 days, or 14 or more days) – Indicates the maximum time within which the item will likely be shipped once an order has been placed. (required).</param>
        /// <param name="SellerPositiveFeedbackRating">(98-100%, 95-97%, 90-94%, 80-89%, 70-79%, Less than 70%, or Just launched ) – Indicates the percentage of feedback ratings that were positive over the past 12 months. (required).</param>
        public QualifiersType(string ItemCondition = default(string), string ItemSubcondition = default(string), string FulfillmentChannel = default(string), string ShipsDomestically = default(string), ShippingTimeType ShippingTime = default(ShippingTimeType), string SellerPositiveFeedbackRating = default(string))
        {
            // to ensure "ItemCondition" is required (not null)
            if (ItemCondition == null)
            {
                throw new InvalidDataException("ItemCondition is a required property for QualifiersType and cannot be null");
            }
            else
            {
                this.ItemCondition = ItemCondition;
            }
            // to ensure "ItemSubcondition" is required (not null)
            if (ItemSubcondition == null)
            {
                throw new InvalidDataException("ItemSubcondition is a required property for QualifiersType and cannot be null");
            }
            else
            {
                this.ItemSubcondition = ItemSubcondition;
            }
            // to ensure "FulfillmentChannel" is required (not null)
            if (FulfillmentChannel == null)
            {
                throw new InvalidDataException("FulfillmentChannel is a required property for QualifiersType and cannot be null");
            }
            else
            {
                this.FulfillmentChannel = FulfillmentChannel;
            }
            // to ensure "ShipsDomestically" is required (not null)
            if (ShipsDomestically == null)
            {
                throw new InvalidDataException("ShipsDomestically is a required property for QualifiersType and cannot be null");
            }
            else
            {
                this.ShipsDomestically = ShipsDomestically;
            }
            // to ensure "ShippingTime" is required (not null)
            if (ShippingTime == null)
            {
                throw new InvalidDataException("ShippingTime is a required property for QualifiersType and cannot be null");
            }
            else
            {
                this.ShippingTime = ShippingTime;
            }
            // to ensure "SellerPositiveFeedbackRating" is required (not null)
            if (SellerPositiveFeedbackRating == null)
            {
                throw new InvalidDataException("SellerPositiveFeedbackRating is a required property for QualifiersType and cannot be null");
            }
            else
            {
                this.SellerPositiveFeedbackRating = SellerPositiveFeedbackRating;
            }
        }

        /// <summary>
        /// The condition of the item. Possible values: New, Used, Collectible, Refurbished, or Club.
        /// </summary>
        /// <value>The condition of the item. Possible values: New, Used, Collectible, Refurbished, or Club.</value>
        [DataMember(Name = "ItemCondition", EmitDefaultValue = false)]
        public string ItemCondition { get; set; }

        /// <summary>
        /// The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
        /// </summary>
        /// <value>The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.</value>
        [DataMember(Name = "ItemSubcondition", EmitDefaultValue = false)]
        public string ItemSubcondition { get; set; }

        /// <summary>
        /// The fulfillment channel for the item. Possible values:  * Amazon - Fulfilled by Amazon. * Merchant - Fulfilled by the seller.
        /// </summary>
        /// <value>The fulfillment channel for the item. Possible values:  * Amazon - Fulfilled by Amazon. * Merchant - Fulfilled by the seller.</value>
        [DataMember(Name = "FulfillmentChannel", EmitDefaultValue = false)]
        public string FulfillmentChannel { get; set; }

        /// <summary>
        /// Indicates whether the marketplace specified in the request and the location that the item ships from are in the same country. Possible values: True, False, or Unknown.
        /// </summary>
        /// <value>Indicates whether the marketplace specified in the request and the location that the item ships from are in the same country. Possible values: True, False, or Unknown.</value>
        [DataMember(Name = "ShipsDomestically", EmitDefaultValue = false)]
        public string ShipsDomestically { get; set; }

        /// <summary>
        /// (0-2 days, 3-7 days, 8-13 days, or 14 or more days) – Indicates the maximum time within which the item will likely be shipped once an order has been placed.
        /// </summary>
        /// <value>(0-2 days, 3-7 days, 8-13 days, or 14 or more days) – Indicates the maximum time within which the item will likely be shipped once an order has been placed.</value>
        [DataMember(Name = "ShippingTime", EmitDefaultValue = false)]
        public ShippingTimeType ShippingTime { get; set; }

        /// <summary>
        /// (98-100%, 95-97%, 90-94%, 80-89%, 70-79%, Less than 70%, or Just launched ) – Indicates the percentage of feedback ratings that were positive over the past 12 months.
        /// </summary>
        /// <value>(98-100%, 95-97%, 90-94%, 80-89%, 70-79%, Less than 70%, or Just launched ) – Indicates the percentage of feedback ratings that were positive over the past 12 months.</value>
        [DataMember(Name = "SellerPositiveFeedbackRating", EmitDefaultValue = false)]
        public string SellerPositiveFeedbackRating { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QualifiersType {\n");
            sb.Append("  ItemCondition: ").Append(ItemCondition).Append("\n");
            sb.Append("  ItemSubcondition: ").Append(ItemSubcondition).Append("\n");
            sb.Append("  FulfillmentChannel: ").Append(FulfillmentChannel).Append("\n");
            sb.Append("  ShipsDomestically: ").Append(ShipsDomestically).Append("\n");
            sb.Append("  ShippingTime: ").Append(ShippingTime).Append("\n");
            sb.Append("  SellerPositiveFeedbackRating: ").Append(SellerPositiveFeedbackRating).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QualifiersType);
        }

        /// <summary>
        /// Returns true if QualifiersType instances are equal
        /// </summary>
        /// <param name="input">Instance of QualifiersType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QualifiersType input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ItemCondition == input.ItemCondition ||
                    (this.ItemCondition != null &&
                    this.ItemCondition.Equals(input.ItemCondition))
                ) &&
                (
                    this.ItemSubcondition == input.ItemSubcondition ||
                    (this.ItemSubcondition != null &&
                    this.ItemSubcondition.Equals(input.ItemSubcondition))
                ) &&
                (
                    this.FulfillmentChannel == input.FulfillmentChannel ||
                    (this.FulfillmentChannel != null &&
                    this.FulfillmentChannel.Equals(input.FulfillmentChannel))
                ) &&
                (
                    this.ShipsDomestically == input.ShipsDomestically ||
                    (this.ShipsDomestically != null &&
                    this.ShipsDomestically.Equals(input.ShipsDomestically))
                ) &&
                (
                    this.ShippingTime == input.ShippingTime ||
                    (this.ShippingTime != null &&
                    this.ShippingTime.Equals(input.ShippingTime))
                ) &&
                (
                    this.SellerPositiveFeedbackRating == input.SellerPositiveFeedbackRating ||
                    (this.SellerPositiveFeedbackRating != null &&
                    this.SellerPositiveFeedbackRating.Equals(input.SellerPositiveFeedbackRating))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemCondition != null)
                    hashCode = hashCode * 59 + this.ItemCondition.GetHashCode();
                if (this.ItemSubcondition != null)
                    hashCode = hashCode * 59 + this.ItemSubcondition.GetHashCode();
                if (this.FulfillmentChannel != null)
                    hashCode = hashCode * 59 + this.FulfillmentChannel.GetHashCode();
                if (this.ShipsDomestically != null)
                    hashCode = hashCode * 59 + this.ShipsDomestically.GetHashCode();
                if (this.ShippingTime != null)
                    hashCode = hashCode * 59 + this.ShippingTime.GetHashCode();
                if (this.SellerPositiveFeedbackRating != null)
                    hashCode = hashCode * 59 + this.SellerPositiveFeedbackRating.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
