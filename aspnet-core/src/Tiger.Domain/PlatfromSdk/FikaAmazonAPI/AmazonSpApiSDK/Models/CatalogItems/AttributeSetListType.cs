/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems
{
    /// <summary>
    /// The attributes of the item.
    /// </summary>
    [DataContract]
    public partial class AttributeSetListType : IEquatable<AttributeSetListType>, IValidatableObject
    {
        public AttributeSetListType()
        {

        }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttributeSetListType" /> class.
        /// </summary>
        /// <param name="Actor">The actor attributes of the item..</param>
        /// <param name="Artist">The artist attributes of the item..</param>
        /// <param name="AspectRatio">The aspect ratio attribute of the item..</param>
        /// <param name="AudienceRating">The audience rating attribute of the item..</param>
        /// <param name="Author">The author attributes of the item..</param>
        /// <param name="BackFinding">The back finding attribute of the item..</param>
        /// <param name="BandMaterialType">The band material type attribute of the item..</param>
        /// <param name="Binding">The binding attribute of the item..</param>
        /// <param name="BlurayRegion">The Bluray region attribute of the item..</param>
        /// <param name="Brand">The brand attribute of the item..</param>
        /// <param name="CeroAgeRating">The CERO age rating attribute of the item..</param>
        /// <param name="ChainType">The chain type attribute of the item..</param>
        /// <param name="ClaspType">The clasp type attribute of the item..</param>
        /// <param name="Color">The color attribute of the item..</param>
        /// <param name="CpuManufacturer">The CPU manufacturer attribute of the item..</param>
        /// <param name="CpuSpeed">The CPU speed attribute of the item..</param>
        /// <param name="CpuType">The CPU type attribute of the item..</param>
        /// <param name="Creator">The creator attributes of the item..</param>
        /// <param name="Department">The department attribute of the item..</param>
        /// <param name="Director">The director attributes of the item..</param>
        /// <param name="DisplaySize">The display size attribute of the item..</param>
        /// <param name="Edition">The edition attribute of the item..</param>
        /// <param name="EpisodeSequence">The episode sequence attribute of the item..</param>
        /// <param name="EsrbAgeRating">The ESRB age rating attribute of the item..</param>
        /// <param name="Feature">The feature attributes of the item.</param>
        /// <param name="Flavor">The flavor attribute of the item..</param>
        /// <param name="Format">The format attributes of the item..</param>
        /// <param name="GemType">The gem type attributes of the item..</param>
        /// <param name="Genre">The genre attribute of the item..</param>
        /// <param name="GolfClubFlex">The golf club flex attribute of the item..</param>
        /// <param name="GolfClubLoft">The golf club loft attribute of the item..</param>
        /// <param name="HandOrientation">The hand orientation attribute of the item..</param>
        /// <param name="HardDiskInterface">The hard disk interface attribute of the item..</param>
        /// <param name="HardDiskSize">The hard disk size attribute of the item..</param>
        /// <param name="HardwarePlatform">The hardware platform attribute of the item..</param>
        /// <param name="HazardousMaterialType">The hazardous material type attribute of the item..</param>
        /// <param name="ItemDimensions">The item dimensions attribute of the item..</param>
        /// <param name="IsAdultProduct">The adult product attribute of the item..</param>
        /// <param name="IsAutographed">The autographed attribute of the item..</param>
        /// <param name="IsEligibleForTradeIn">The is eligible for trade in attribute of the item..</param>
        /// <param name="IsMemorabilia">The is memorabilia attribute of the item..</param>
        /// <param name="IssuesPerYear">The issues per year attribute of the item..</param>
        /// <param name="ItemPartNumber">The item part number attribute of the item..</param>
        /// <param name="Label">The label attribute of the item..</param>
        /// <param name="Languages">The languages attribute of the item..</param>
        /// <param name="LegalDisclaimer">The legal disclaimer attribute of the item..</param>
        /// <param name="ListPrice">The list price attribute of the item..</param>
        /// <param name="Manufacturer">The manufacturer attribute of the item..</param>
        /// <param name="ManufacturerMaximumAge">The manufacturer maximum age attribute of the item..</param>
        /// <param name="ManufacturerMinimumAge">The manufacturer minimum age attribute of the item..</param>
        /// <param name="ManufacturerPartsWarrantyDescription">The manufacturer parts warranty description attribute of the item..</param>
        /// <param name="MaterialType">The material type attributes of the item..</param>
        /// <param name="MaximumResolution">The maximum resolution attribute of the item..</param>
        /// <param name="MediaType">The media type attributes of the item..</param>
        /// <param name="MetalStamp">The metal stamp attribute of the item..</param>
        /// <param name="MetalType">The metal type attribute of the item..</param>
        /// <param name="Model">The model attribute of the item..</param>
        /// <param name="NumberOfDiscs">The number of discs attribute of the item..</param>
        /// <param name="NumberOfIssues">The number of issues attribute of the item..</param>
        /// <param name="NumberOfItems">The number of items attribute of the item..</param>
        /// <param name="NumberOfPages">The number of pages attribute of the item..</param>
        /// <param name="NumberOfTracks">The number of tracks attribute of the item..</param>
        /// <param name="OperatingSystem">The operating system attributes of the item..</param>
        /// <param name="OpticalZoom">The optical zoom attribute of the item..</param>
        /// <param name="PackageDimensions">The package dimensions attribute of the item..</param>
        /// <param name="PackageQuantity">The package quantity attribute of the item..</param>
        /// <param name="PartNumber">The part number attribute of the item..</param>
        /// <param name="PegiRating">The PEGI rating attribute of the item..</param>
        /// <param name="Platform">The platform attributes of the item..</param>
        /// <param name="ProcessorCount">The processor count attribute of the item..</param>
        /// <param name="ProductGroup">The product group attribute of the item..</param>
        /// <param name="ProductTypeName">The product type name attribute of the item..</param>
        /// <param name="ProductTypeSubcategory">The product type subcategory attribute of the item..</param>
        /// <param name="PublicationDate">The publication date attribute of the item..</param>
        /// <param name="Publisher">The publisher attribute of the item..</param>
        /// <param name="RegionCode">The region code attribute of the item..</param>
        /// <param name="ReleaseDate">The release date attribute of the item..</param>
        /// <param name="RingSize">The ring size attribute of the item..</param>
        /// <param name="RunningTime">The running time attribute of the item..</param>
        /// <param name="ShaftMaterial">The shaft material attribute of the item..</param>
        /// <param name="Scent">The scent attribute of the item..</param>
        /// <param name="SeasonSequence">The season sequence attribute of the item..</param>
        /// <param name="SeikodoProductCode">The Seikodo product code attribute of the item..</param>
        /// <param name="Size">The size attribute of the item..</param>
        /// <param name="SizePerPearl">The size per pearl attribute of the item..</param>
        /// <param name="SmallImage">The small image attribute of the item..</param>
        /// <param name="Studio">The studio attribute of the item..</param>
        /// <param name="SubscriptionLength">The subscription length attribute of the item..</param>
        /// <param name="SystemMemorySize">The system memory size attribute of the item..</param>
        /// <param name="SystemMemoryType">The system memory type attribute of the item..</param>
        /// <param name="TheatricalReleaseDate">The theatrical release date attribute of the item..</param>
        /// <param name="Title">The title attribute of the item..</param>
        /// <param name="TotalDiamondWeight">The total diamond weight attribute of the item..</param>
        /// <param name="TotalGemWeight">The total gem weight attribute of the item..</param>
        /// <param name="Warranty">The warranty attribute of the item..</param>
        /// <param name="WeeeTaxValue">The WEEE tax value attribute of the item..</param>
        public AttributeSetListType(List<string> Actor = default(List<string>), List<string> Artist = default(List<string>), string AspectRatio = default(string), string AudienceRating = default(string), List<string> Author = default(List<string>), string BackFinding = default(string), string BandMaterialType = default(string), string Binding = default(string), string BlurayRegion = default(string), string Brand = default(string), string CeroAgeRating = default(string), string ChainType = default(string), string ClaspType = default(string), string Color = default(string), string CpuManufacturer = default(string), DecimalWithUnits CpuSpeed = default(DecimalWithUnits), string CpuType = default(string), List<CreatorType> Creator = default(List<CreatorType>), string Department = default(string), List<string> Director = default(List<string>), DecimalWithUnits DisplaySize = default(DecimalWithUnits), string Edition = default(string), string EpisodeSequence = default(string), string EsrbAgeRating = default(string), List<string> Feature = default(List<string>), string Flavor = default(string), List<string> Format = default(List<string>), List<string> GemType = default(List<string>), string Genre = default(string), string GolfClubFlex = default(string), DecimalWithUnits GolfClubLoft = default(DecimalWithUnits), string HandOrientation = default(string), string HardDiskInterface = default(string), DecimalWithUnits HardDiskSize = default(DecimalWithUnits), string HardwarePlatform = default(string), string HazardousMaterialType = default(string), DimensionType ItemDimensions = default(DimensionType), bool? IsAdultProduct = default(bool?), bool? IsAutographed = default(bool?), bool? IsEligibleForTradeIn = default(bool?), bool? IsMemorabilia = default(bool?), string IssuesPerYear = default(string), string ItemPartNumber = default(string), string Label = default(string), List<LanguageType> Languages = default(List<LanguageType>), string LegalDisclaimer = default(string), Price ListPrice = default(Price), string Manufacturer = default(string), DecimalWithUnits ManufacturerMaximumAge = default(DecimalWithUnits), DecimalWithUnits ManufacturerMinimumAge = default(DecimalWithUnits), string ManufacturerPartsWarrantyDescription = default(string), List<string> MaterialType = default(List<string>), DecimalWithUnits MaximumResolution = default(DecimalWithUnits), List<string> MediaType = default(List<string>), string MetalStamp = default(string), string MetalType = default(string), string Model = default(string), int? NumberOfDiscs = default(int?), int? NumberOfIssues = default(int?), int? NumberOfItems = default(int?), int? NumberOfPages = default(int?), int? NumberOfTracks = default(int?), List<string> OperatingSystem = default(List<string>), DecimalWithUnits OpticalZoom = default(DecimalWithUnits), DimensionType PackageDimensions = default(DimensionType), int? PackageQuantity = default(int?), string PartNumber = default(string), string PegiRating = default(string), List<string> Platform = default(List<string>), int? ProcessorCount = default(int?), string ProductGroup = default(string), string ProductTypeName = default(string), string ProductTypeSubcategory = default(string), string PublicationDate = default(string), string Publisher = default(string), string RegionCode = default(string), string ReleaseDate = default(string), string RingSize = default(string), DecimalWithUnits RunningTime = default(DecimalWithUnits), string ShaftMaterial = default(string), string Scent = default(string), string SeasonSequence = default(string), string SeikodoProductCode = default(string), string Size = default(string), string SizePerPearl = default(string), Image SmallImage = default(Image), string Studio = default(string), DecimalWithUnits SubscriptionLength = default(DecimalWithUnits), DecimalWithUnits SystemMemorySize = default(DecimalWithUnits), string SystemMemoryType = default(string), string TheatricalReleaseDate = default(string), string Title = default(string), DecimalWithUnits TotalDiamondWeight = default(DecimalWithUnits), DecimalWithUnits TotalGemWeight = default(DecimalWithUnits), string Warranty = default(string), Price WeeeTaxValue = default(Price))
        {
            this.Actor = Actor;
            this.Artist = Artist;
            this.AspectRatio = AspectRatio;
            this.AudienceRating = AudienceRating;
            this.Author = Author;
            this.BackFinding = BackFinding;
            this.BandMaterialType = BandMaterialType;
            this.Binding = Binding;
            this.BlurayRegion = BlurayRegion;
            this.Brand = Brand;
            this.CeroAgeRating = CeroAgeRating;
            this.ChainType = ChainType;
            this.ClaspType = ClaspType;
            this.Color = Color;
            this.CpuManufacturer = CpuManufacturer;
            this.CpuSpeed = CpuSpeed;
            this.CpuType = CpuType;
            this.Creator = Creator;
            this.Department = Department;
            this.Director = Director;
            this.DisplaySize = DisplaySize;
            this.Edition = Edition;
            this.EpisodeSequence = EpisodeSequence;
            this.EsrbAgeRating = EsrbAgeRating;
            this.Feature = Feature;
            this.Flavor = Flavor;
            this.Format = Format;
            this.GemType = GemType;
            this.Genre = Genre;
            this.GolfClubFlex = GolfClubFlex;
            this.GolfClubLoft = GolfClubLoft;
            this.HandOrientation = HandOrientation;
            this.HardDiskInterface = HardDiskInterface;
            this.HardDiskSize = HardDiskSize;
            this.HardwarePlatform = HardwarePlatform;
            this.HazardousMaterialType = HazardousMaterialType;
            this.ItemDimensions = ItemDimensions;
            this.IsAdultProduct = IsAdultProduct;
            this.IsAutographed = IsAutographed;
            this.IsEligibleForTradeIn = IsEligibleForTradeIn;
            this.IsMemorabilia = IsMemorabilia;
            this.IssuesPerYear = IssuesPerYear;
            this.ItemPartNumber = ItemPartNumber;
            this.Label = Label;
            this.Languages = Languages;
            this.LegalDisclaimer = LegalDisclaimer;
            this.ListPrice = ListPrice;
            this.Manufacturer = Manufacturer;
            this.ManufacturerMaximumAge = ManufacturerMaximumAge;
            this.ManufacturerMinimumAge = ManufacturerMinimumAge;
            this.ManufacturerPartsWarrantyDescription = ManufacturerPartsWarrantyDescription;
            this.MaterialType = MaterialType;
            this.MaximumResolution = MaximumResolution;
            this.MediaType = MediaType;
            this.MetalStamp = MetalStamp;
            this.MetalType = MetalType;
            this.Model = Model;
            this.NumberOfDiscs = NumberOfDiscs;
            this.NumberOfIssues = NumberOfIssues;
            this.NumberOfItems = NumberOfItems;
            this.NumberOfPages = NumberOfPages;
            this.NumberOfTracks = NumberOfTracks;
            this.OperatingSystem = OperatingSystem;
            this.OpticalZoom = OpticalZoom;
            this.PackageDimensions = PackageDimensions;
            this.PackageQuantity = PackageQuantity;
            this.PartNumber = PartNumber;
            this.PegiRating = PegiRating;
            this.Platform = Platform;
            this.ProcessorCount = ProcessorCount;
            this.ProductGroup = ProductGroup;
            this.ProductTypeName = ProductTypeName;
            this.ProductTypeSubcategory = ProductTypeSubcategory;
            this.PublicationDate = PublicationDate;
            this.Publisher = Publisher;
            this.RegionCode = RegionCode;
            this.ReleaseDate = ReleaseDate;
            this.RingSize = RingSize;
            this.RunningTime = RunningTime;
            this.ShaftMaterial = ShaftMaterial;
            this.Scent = Scent;
            this.SeasonSequence = SeasonSequence;
            this.SeikodoProductCode = SeikodoProductCode;
            this.Size = Size;
            this.SizePerPearl = SizePerPearl;
            this.SmallImage = SmallImage;
            this.Studio = Studio;
            this.SubscriptionLength = SubscriptionLength;
            this.SystemMemorySize = SystemMemorySize;
            this.SystemMemoryType = SystemMemoryType;
            this.TheatricalReleaseDate = TheatricalReleaseDate;
            this.Title = Title;
            this.TotalDiamondWeight = TotalDiamondWeight;
            this.TotalGemWeight = TotalGemWeight;
            this.Warranty = Warranty;
            this.WeeeTaxValue = WeeeTaxValue;
        }

        /// <summary>
        /// The actor attributes of the item.
        /// </summary>
        /// <value>The actor attributes of the item.</value>
        [DataMember(Name = "Actor", EmitDefaultValue = false)]
        public List<string> Actor { get; set; }

        /// <summary>
        /// The artist attributes of the item.
        /// </summary>
        /// <value>The artist attributes of the item.</value>
        [DataMember(Name = "Artist", EmitDefaultValue = false)]
        public List<string> Artist { get; set; }

        /// <summary>
        /// The aspect ratio attribute of the item.
        /// </summary>
        /// <value>The aspect ratio attribute of the item.</value>
        [DataMember(Name = "AspectRatio", EmitDefaultValue = false)]
        public string AspectRatio { get; set; }

        /// <summary>
        /// The audience rating attribute of the item.
        /// </summary>
        /// <value>The audience rating attribute of the item.</value>
        [DataMember(Name = "AudienceRating", EmitDefaultValue = false)]
        public string AudienceRating { get; set; }

        /// <summary>
        /// The author attributes of the item.
        /// </summary>
        /// <value>The author attributes of the item.</value>
        [DataMember(Name = "Author", EmitDefaultValue = false)]
        public List<string> Author { get; set; }

        /// <summary>
        /// The back finding attribute of the item.
        /// </summary>
        /// <value>The back finding attribute of the item.</value>
        [DataMember(Name = "BackFinding", EmitDefaultValue = false)]
        public string BackFinding { get; set; }

        /// <summary>
        /// The band material type attribute of the item.
        /// </summary>
        /// <value>The band material type attribute of the item.</value>
        [DataMember(Name = "BandMaterialType", EmitDefaultValue = false)]
        public string BandMaterialType { get; set; }

        /// <summary>
        /// The binding attribute of the item.
        /// </summary>
        /// <value>The binding attribute of the item.</value>
        [DataMember(Name = "Binding", EmitDefaultValue = false)]
        public string Binding { get; set; }

        /// <summary>
        /// The Bluray region attribute of the item.
        /// </summary>
        /// <value>The Bluray region attribute of the item.</value>
        [DataMember(Name = "BlurayRegion", EmitDefaultValue = false)]
        public string BlurayRegion { get; set; }

        /// <summary>
        /// The brand attribute of the item.
        /// </summary>
        /// <value>The brand attribute of the item.</value>
        [DataMember(Name = "Brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        /// The CERO age rating attribute of the item.
        /// </summary>
        /// <value>The CERO age rating attribute of the item.</value>
        [DataMember(Name = "CeroAgeRating", EmitDefaultValue = false)]
        public string CeroAgeRating { get; set; }

        /// <summary>
        /// The chain type attribute of the item.
        /// </summary>
        /// <value>The chain type attribute of the item.</value>
        [DataMember(Name = "ChainType", EmitDefaultValue = false)]
        public string ChainType { get; set; }

        /// <summary>
        /// The clasp type attribute of the item.
        /// </summary>
        /// <value>The clasp type attribute of the item.</value>
        [DataMember(Name = "ClaspType", EmitDefaultValue = false)]
        public string ClaspType { get; set; }

        /// <summary>
        /// The color attribute of the item.
        /// </summary>
        /// <value>The color attribute of the item.</value>
        [DataMember(Name = "Color", EmitDefaultValue = false)]
        public string Color { get; set; }

        /// <summary>
        /// The CPU manufacturer attribute of the item.
        /// </summary>
        /// <value>The CPU manufacturer attribute of the item.</value>
        [DataMember(Name = "CpuManufacturer", EmitDefaultValue = false)]
        public string CpuManufacturer { get; set; }

        /// <summary>
        /// The CPU speed attribute of the item.
        /// </summary>
        /// <value>The CPU speed attribute of the item.</value>
        [DataMember(Name = "CpuSpeed", EmitDefaultValue = false)]
        public DecimalWithUnits CpuSpeed { get; set; }

        /// <summary>
        /// The CPU type attribute of the item.
        /// </summary>
        /// <value>The CPU type attribute of the item.</value>
        [DataMember(Name = "CpuType", EmitDefaultValue = false)]
        public string CpuType { get; set; }

        /// <summary>
        /// The creator attributes of the item.
        /// </summary>
        /// <value>The creator attributes of the item.</value>
        [DataMember(Name = "Creator", EmitDefaultValue = false)]
        public List<CreatorType> Creator { get; set; }

        /// <summary>
        /// The department attribute of the item.
        /// </summary>
        /// <value>The department attribute of the item.</value>
        [DataMember(Name = "Department", EmitDefaultValue = false)]
        public string Department { get; set; }

        /// <summary>
        /// The director attributes of the item.
        /// </summary>
        /// <value>The director attributes of the item.</value>
        [DataMember(Name = "Director", EmitDefaultValue = false)]
        public List<string> Director { get; set; }

        /// <summary>
        /// The display size attribute of the item.
        /// </summary>
        /// <value>The display size attribute of the item.</value>
        [DataMember(Name = "DisplaySize", EmitDefaultValue = false)]
        public DecimalWithUnits DisplaySize { get; set; }

        /// <summary>
        /// The edition attribute of the item.
        /// </summary>
        /// <value>The edition attribute of the item.</value>
        [DataMember(Name = "Edition", EmitDefaultValue = false)]
        public string Edition { get; set; }

        /// <summary>
        /// The episode sequence attribute of the item.
        /// </summary>
        /// <value>The episode sequence attribute of the item.</value>
        [DataMember(Name = "EpisodeSequence", EmitDefaultValue = false)]
        public string EpisodeSequence { get; set; }

        /// <summary>
        /// The ESRB age rating attribute of the item.
        /// </summary>
        /// <value>The ESRB age rating attribute of the item.</value>
        [DataMember(Name = "EsrbAgeRating", EmitDefaultValue = false)]
        public string EsrbAgeRating { get; set; }

        /// <summary>
        /// The feature attributes of the item
        /// </summary>
        /// <value>The feature attributes of the item</value>
        [DataMember(Name = "Feature", EmitDefaultValue = false)]
        public List<string> Feature { get; set; }

        /// <summary>
        /// The flavor attribute of the item.
        /// </summary>
        /// <value>The flavor attribute of the item.</value>
        [DataMember(Name = "Flavor", EmitDefaultValue = false)]
        public string Flavor { get; set; }

        /// <summary>
        /// The format attributes of the item.
        /// </summary>
        /// <value>The format attributes of the item.</value>
        [DataMember(Name = "Format", EmitDefaultValue = false)]
        public List<string> Format { get; set; }

        /// <summary>
        /// The gem type attributes of the item.
        /// </summary>
        /// <value>The gem type attributes of the item.</value>
        [DataMember(Name = "GemType", EmitDefaultValue = false)]
        public List<string> GemType { get; set; }

        /// <summary>
        /// The genre attribute of the item.
        /// </summary>
        /// <value>The genre attribute of the item.</value>
        [DataMember(Name = "Genre", EmitDefaultValue = false)]
        public string Genre { get; set; }

        /// <summary>
        /// The golf club flex attribute of the item.
        /// </summary>
        /// <value>The golf club flex attribute of the item.</value>
        [DataMember(Name = "GolfClubFlex", EmitDefaultValue = false)]
        public string GolfClubFlex { get; set; }

        /// <summary>
        /// The golf club loft attribute of the item.
        /// </summary>
        /// <value>The golf club loft attribute of the item.</value>
        [DataMember(Name = "GolfClubLoft", EmitDefaultValue = false)]
        public DecimalWithUnits GolfClubLoft { get; set; }

        /// <summary>
        /// The hand orientation attribute of the item.
        /// </summary>
        /// <value>The hand orientation attribute of the item.</value>
        [DataMember(Name = "HandOrientation", EmitDefaultValue = false)]
        public string HandOrientation { get; set; }

        /// <summary>
        /// The hard disk interface attribute of the item.
        /// </summary>
        /// <value>The hard disk interface attribute of the item.</value>
        [DataMember(Name = "HardDiskInterface", EmitDefaultValue = false)]
        public string HardDiskInterface { get; set; }

        /// <summary>
        /// The hard disk size attribute of the item.
        /// </summary>
        /// <value>The hard disk size attribute of the item.</value>
        [DataMember(Name = "HardDiskSize", EmitDefaultValue = false)]
        public DecimalWithUnits HardDiskSize { get; set; }

        /// <summary>
        /// The hardware platform attribute of the item.
        /// </summary>
        /// <value>The hardware platform attribute of the item.</value>
        [DataMember(Name = "HardwarePlatform", EmitDefaultValue = false)]
        public string HardwarePlatform { get; set; }

        /// <summary>
        /// The hazardous material type attribute of the item.
        /// </summary>
        /// <value>The hazardous material type attribute of the item.</value>
        [DataMember(Name = "HazardousMaterialType", EmitDefaultValue = false)]
        public string HazardousMaterialType { get; set; }

        /// <summary>
        /// The item dimensions attribute of the item.
        /// </summary>
        /// <value>The item dimensions attribute of the item.</value>
        [DataMember(Name = "ItemDimensions", EmitDefaultValue = false)]
        public DimensionType ItemDimensions { get; set; }

        /// <summary>
        /// The adult product attribute of the item.
        /// </summary>
        /// <value>The adult product attribute of the item.</value>
        [DataMember(Name = "IsAdultProduct", EmitDefaultValue = false)]
        public bool? IsAdultProduct { get; set; }

        /// <summary>
        /// The autographed attribute of the item.
        /// </summary>
        /// <value>The autographed attribute of the item.</value>
        [DataMember(Name = "IsAutographed", EmitDefaultValue = false)]
        public bool? IsAutographed { get; set; }

        /// <summary>
        /// The is eligible for trade in attribute of the item.
        /// </summary>
        /// <value>The is eligible for trade in attribute of the item.</value>
        [DataMember(Name = "IsEligibleForTradeIn", EmitDefaultValue = false)]
        public bool? IsEligibleForTradeIn { get; set; }

        /// <summary>
        /// The is memorabilia attribute of the item.
        /// </summary>
        /// <value>The is memorabilia attribute of the item.</value>
        [DataMember(Name = "IsMemorabilia", EmitDefaultValue = false)]
        public bool? IsMemorabilia { get; set; }

        /// <summary>
        /// The issues per year attribute of the item.
        /// </summary>
        /// <value>The issues per year attribute of the item.</value>
        [DataMember(Name = "IssuesPerYear", EmitDefaultValue = false)]
        public string IssuesPerYear { get; set; }

        /// <summary>
        /// The item part number attribute of the item.
        /// </summary>
        /// <value>The item part number attribute of the item.</value>
        [DataMember(Name = "ItemPartNumber", EmitDefaultValue = false)]
        public string ItemPartNumber { get; set; }

        /// <summary>
        /// The label attribute of the item.
        /// </summary>
        /// <value>The label attribute of the item.</value>
        [DataMember(Name = "Label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// The languages attribute of the item.
        /// </summary>
        /// <value>The languages attribute of the item.</value>
        [DataMember(Name = "Languages", EmitDefaultValue = false)]
        public List<LanguageType> Languages { get; set; }

        /// <summary>
        /// The legal disclaimer attribute of the item.
        /// </summary>
        /// <value>The legal disclaimer attribute of the item.</value>
        [DataMember(Name = "LegalDisclaimer", EmitDefaultValue = false)]
        public string LegalDisclaimer { get; set; }

        /// <summary>
        /// The list price attribute of the item.
        /// </summary>
        /// <value>The list price attribute of the item.</value>
        [DataMember(Name = "ListPrice", EmitDefaultValue = false)]
        public Price ListPrice { get; set; }

        /// <summary>
        /// The manufacturer attribute of the item.
        /// </summary>
        /// <value>The manufacturer attribute of the item.</value>
        [DataMember(Name = "Manufacturer", EmitDefaultValue = false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// The manufacturer maximum age attribute of the item.
        /// </summary>
        /// <value>The manufacturer maximum age attribute of the item.</value>
        [DataMember(Name = "ManufacturerMaximumAge", EmitDefaultValue = false)]
        public DecimalWithUnits ManufacturerMaximumAge { get; set; }

        /// <summary>
        /// The manufacturer minimum age attribute of the item.
        /// </summary>
        /// <value>The manufacturer minimum age attribute of the item.</value>
        [DataMember(Name = "ManufacturerMinimumAge", EmitDefaultValue = false)]
        public DecimalWithUnits ManufacturerMinimumAge { get; set; }

        /// <summary>
        /// The manufacturer parts warranty description attribute of the item.
        /// </summary>
        /// <value>The manufacturer parts warranty description attribute of the item.</value>
        [DataMember(Name = "ManufacturerPartsWarrantyDescription", EmitDefaultValue = false)]
        public string ManufacturerPartsWarrantyDescription { get; set; }

        /// <summary>
        /// The material type attributes of the item.
        /// </summary>
        /// <value>The material type attributes of the item.</value>
        [DataMember(Name = "MaterialType", EmitDefaultValue = false)]
        public List<string> MaterialType { get; set; }

        /// <summary>
        /// The maximum resolution attribute of the item.
        /// </summary>
        /// <value>The maximum resolution attribute of the item.</value>
        [DataMember(Name = "MaximumResolution", EmitDefaultValue = false)]
        public DecimalWithUnits MaximumResolution { get; set; }

        /// <summary>
        /// The media type attributes of the item.
        /// </summary>
        /// <value>The media type attributes of the item.</value>
        [DataMember(Name = "MediaType", EmitDefaultValue = false)]
        public List<string> MediaType { get; set; }

        /// <summary>
        /// The metal stamp attribute of the item.
        /// </summary>
        /// <value>The metal stamp attribute of the item.</value>
        [DataMember(Name = "MetalStamp", EmitDefaultValue = false)]
        public string MetalStamp { get; set; }

        /// <summary>
        /// The metal type attribute of the item.
        /// </summary>
        /// <value>The metal type attribute of the item.</value>
        [DataMember(Name = "MetalType", EmitDefaultValue = false)]
        public string MetalType { get; set; }

        /// <summary>
        /// The model attribute of the item.
        /// </summary>
        /// <value>The model attribute of the item.</value>
        [DataMember(Name = "Model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// The number of discs attribute of the item.
        /// </summary>
        /// <value>The number of discs attribute of the item.</value>
        [DataMember(Name = "NumberOfDiscs", EmitDefaultValue = false)]
        public int? NumberOfDiscs { get; set; }

        /// <summary>
        /// The number of issues attribute of the item.
        /// </summary>
        /// <value>The number of issues attribute of the item.</value>
        [DataMember(Name = "NumberOfIssues", EmitDefaultValue = false)]
        public int? NumberOfIssues { get; set; }

        /// <summary>
        /// The number of items attribute of the item.
        /// </summary>
        /// <value>The number of items attribute of the item.</value>
        [DataMember(Name = "NumberOfItems", EmitDefaultValue = false)]
        public int? NumberOfItems { get; set; }

        /// <summary>
        /// The number of pages attribute of the item.
        /// </summary>
        /// <value>The number of pages attribute of the item.</value>
        [DataMember(Name = "NumberOfPages", EmitDefaultValue = false)]
        public int? NumberOfPages { get; set; }

        /// <summary>
        /// The number of tracks attribute of the item.
        /// </summary>
        /// <value>The number of tracks attribute of the item.</value>
        [DataMember(Name = "NumberOfTracks", EmitDefaultValue = false)]
        public int? NumberOfTracks { get; set; }

        /// <summary>
        /// The operating system attributes of the item.
        /// </summary>
        /// <value>The operating system attributes of the item.</value>
        [DataMember(Name = "OperatingSystem", EmitDefaultValue = false)]
        public List<string> OperatingSystem { get; set; }

        /// <summary>
        /// The optical zoom attribute of the item.
        /// </summary>
        /// <value>The optical zoom attribute of the item.</value>
        [DataMember(Name = "OpticalZoom", EmitDefaultValue = false)]
        public DecimalWithUnits OpticalZoom { get; set; }

        /// <summary>
        /// The package dimensions attribute of the item.
        /// </summary>
        /// <value>The package dimensions attribute of the item.</value>
        [DataMember(Name = "PackageDimensions", EmitDefaultValue = false)]
        public DimensionType PackageDimensions { get; set; }

        /// <summary>
        /// The package quantity attribute of the item.
        /// </summary>
        /// <value>The package quantity attribute of the item.</value>
        [DataMember(Name = "PackageQuantity", EmitDefaultValue = false)]
        public int? PackageQuantity { get; set; }

        /// <summary>
        /// The part number attribute of the item.
        /// </summary>
        /// <value>The part number attribute of the item.</value>
        [DataMember(Name = "PartNumber", EmitDefaultValue = false)]
        public string PartNumber { get; set; }

        /// <summary>
        /// The PEGI rating attribute of the item.
        /// </summary>
        /// <value>The PEGI rating attribute of the item.</value>
        [DataMember(Name = "PegiRating", EmitDefaultValue = false)]
        public string PegiRating { get; set; }

        /// <summary>
        /// The platform attributes of the item.
        /// </summary>
        /// <value>The platform attributes of the item.</value>
        [DataMember(Name = "Platform", EmitDefaultValue = false)]
        public List<string> Platform { get; set; }

        /// <summary>
        /// The processor count attribute of the item.
        /// </summary>
        /// <value>The processor count attribute of the item.</value>
        [DataMember(Name = "ProcessorCount", EmitDefaultValue = false)]
        public int? ProcessorCount { get; set; }

        /// <summary>
        /// The product group attribute of the item.
        /// </summary>
        /// <value>The product group attribute of the item.</value>
        [DataMember(Name = "ProductGroup", EmitDefaultValue = false)]
        public string ProductGroup { get; set; }

        /// <summary>
        /// The product type name attribute of the item.
        /// </summary>
        /// <value>The product type name attribute of the item.</value>
        [DataMember(Name = "ProductTypeName", EmitDefaultValue = false)]
        public string ProductTypeName { get; set; }

        /// <summary>
        /// The product type subcategory attribute of the item.
        /// </summary>
        /// <value>The product type subcategory attribute of the item.</value>
        [DataMember(Name = "ProductTypeSubcategory", EmitDefaultValue = false)]
        public string ProductTypeSubcategory { get; set; }

        /// <summary>
        /// The publication date attribute of the item.
        /// </summary>
        /// <value>The publication date attribute of the item.</value>
        [DataMember(Name = "PublicationDate", EmitDefaultValue = false)]
        public string PublicationDate { get; set; }

        /// <summary>
        /// The publisher attribute of the item.
        /// </summary>
        /// <value>The publisher attribute of the item.</value>
        [DataMember(Name = "Publisher", EmitDefaultValue = false)]
        public string Publisher { get; set; }

        /// <summary>
        /// The region code attribute of the item.
        /// </summary>
        /// <value>The region code attribute of the item.</value>
        [DataMember(Name = "RegionCode", EmitDefaultValue = false)]
        public string RegionCode { get; set; }

        /// <summary>
        /// The release date attribute of the item.
        /// </summary>
        /// <value>The release date attribute of the item.</value>
        [DataMember(Name = "ReleaseDate", EmitDefaultValue = false)]
        public string ReleaseDate { get; set; }

        /// <summary>
        /// The ring size attribute of the item.
        /// </summary>
        /// <value>The ring size attribute of the item.</value>
        [DataMember(Name = "RingSize", EmitDefaultValue = false)]
        public string RingSize { get; set; }

        /// <summary>
        /// The running time attribute of the item.
        /// </summary>
        /// <value>The running time attribute of the item.</value>
        [DataMember(Name = "RunningTime", EmitDefaultValue = false)]
        public DecimalWithUnits RunningTime { get; set; }

        /// <summary>
        /// The shaft material attribute of the item.
        /// </summary>
        /// <value>The shaft material attribute of the item.</value>
        [DataMember(Name = "ShaftMaterial", EmitDefaultValue = false)]
        public string ShaftMaterial { get; set; }

        /// <summary>
        /// The scent attribute of the item.
        /// </summary>
        /// <value>The scent attribute of the item.</value>
        [DataMember(Name = "Scent", EmitDefaultValue = false)]
        public string Scent { get; set; }

        /// <summary>
        /// The season sequence attribute of the item.
        /// </summary>
        /// <value>The season sequence attribute of the item.</value>
        [DataMember(Name = "SeasonSequence", EmitDefaultValue = false)]
        public string SeasonSequence { get; set; }

        /// <summary>
        /// The Seikodo product code attribute of the item.
        /// </summary>
        /// <value>The Seikodo product code attribute of the item.</value>
        [DataMember(Name = "SeikodoProductCode", EmitDefaultValue = false)]
        public string SeikodoProductCode { get; set; }

        /// <summary>
        /// The size attribute of the item.
        /// </summary>
        /// <value>The size attribute of the item.</value>
        [DataMember(Name = "Size", EmitDefaultValue = false)]
        public string Size { get; set; }

        /// <summary>
        /// The size per pearl attribute of the item.
        /// </summary>
        /// <value>The size per pearl attribute of the item.</value>
        [DataMember(Name = "SizePerPearl", EmitDefaultValue = false)]
        public string SizePerPearl { get; set; }

        /// <summary>
        /// The small image attribute of the item.
        /// </summary>
        /// <value>The small image attribute of the item.</value>
        [DataMember(Name = "SmallImage", EmitDefaultValue = false)]
        public Image SmallImage { get; set; }

        /// <summary>
        /// The studio attribute of the item.
        /// </summary>
        /// <value>The studio attribute of the item.</value>
        [DataMember(Name = "Studio", EmitDefaultValue = false)]
        public string Studio { get; set; }

        /// <summary>
        /// The subscription length attribute of the item.
        /// </summary>
        /// <value>The subscription length attribute of the item.</value>
        [DataMember(Name = "SubscriptionLength", EmitDefaultValue = false)]
        public DecimalWithUnits SubscriptionLength { get; set; }

        /// <summary>
        /// The system memory size attribute of the item.
        /// </summary>
        /// <value>The system memory size attribute of the item.</value>
        [DataMember(Name = "SystemMemorySize", EmitDefaultValue = false)]
        public DecimalWithUnits SystemMemorySize { get; set; }

        /// <summary>
        /// The system memory type attribute of the item.
        /// </summary>
        /// <value>The system memory type attribute of the item.</value>
        [DataMember(Name = "SystemMemoryType", EmitDefaultValue = false)]
        public string SystemMemoryType { get; set; }

        /// <summary>
        /// The theatrical release date attribute of the item.
        /// </summary>
        /// <value>The theatrical release date attribute of the item.</value>
        [DataMember(Name = "TheatricalReleaseDate", EmitDefaultValue = false)]
        public string TheatricalReleaseDate { get; set; }

        /// <summary>
        /// The title attribute of the item.
        /// </summary>
        /// <value>The title attribute of the item.</value>
        [DataMember(Name = "Title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The total diamond weight attribute of the item.
        /// </summary>
        /// <value>The total diamond weight attribute of the item.</value>
        [DataMember(Name = "TotalDiamondWeight", EmitDefaultValue = false)]
        public DecimalWithUnits TotalDiamondWeight { get; set; }

        /// <summary>
        /// The total gem weight attribute of the item.
        /// </summary>
        /// <value>The total gem weight attribute of the item.</value>
        [DataMember(Name = "TotalGemWeight", EmitDefaultValue = false)]
        public DecimalWithUnits TotalGemWeight { get; set; }

        /// <summary>
        /// The warranty attribute of the item.
        /// </summary>
        /// <value>The warranty attribute of the item.</value>
        [DataMember(Name = "Warranty", EmitDefaultValue = false)]
        public string Warranty { get; set; }

        /// <summary>
        /// The WEEE tax value attribute of the item.
        /// </summary>
        /// <value>The WEEE tax value attribute of the item.</value>
        [DataMember(Name = "WeeeTaxValue", EmitDefaultValue = false)]
        public Price WeeeTaxValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttributeSetListType {\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  Artist: ").Append(Artist).Append("\n");
            sb.Append("  AspectRatio: ").Append(AspectRatio).Append("\n");
            sb.Append("  AudienceRating: ").Append(AudienceRating).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  BackFinding: ").Append(BackFinding).Append("\n");
            sb.Append("  BandMaterialType: ").Append(BandMaterialType).Append("\n");
            sb.Append("  Binding: ").Append(Binding).Append("\n");
            sb.Append("  BlurayRegion: ").Append(BlurayRegion).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  CeroAgeRating: ").Append(CeroAgeRating).Append("\n");
            sb.Append("  ChainType: ").Append(ChainType).Append("\n");
            sb.Append("  ClaspType: ").Append(ClaspType).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  CpuManufacturer: ").Append(CpuManufacturer).Append("\n");
            sb.Append("  CpuSpeed: ").Append(CpuSpeed).Append("\n");
            sb.Append("  CpuType: ").Append(CpuType).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Director: ").Append(Director).Append("\n");
            sb.Append("  DisplaySize: ").Append(DisplaySize).Append("\n");
            sb.Append("  Edition: ").Append(Edition).Append("\n");
            sb.Append("  EpisodeSequence: ").Append(EpisodeSequence).Append("\n");
            sb.Append("  EsrbAgeRating: ").Append(EsrbAgeRating).Append("\n");
            sb.Append("  Feature: ").Append(Feature).Append("\n");
            sb.Append("  Flavor: ").Append(Flavor).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  GemType: ").Append(GemType).Append("\n");
            sb.Append("  Genre: ").Append(Genre).Append("\n");
            sb.Append("  GolfClubFlex: ").Append(GolfClubFlex).Append("\n");
            sb.Append("  GolfClubLoft: ").Append(GolfClubLoft).Append("\n");
            sb.Append("  HandOrientation: ").Append(HandOrientation).Append("\n");
            sb.Append("  HardDiskInterface: ").Append(HardDiskInterface).Append("\n");
            sb.Append("  HardDiskSize: ").Append(HardDiskSize).Append("\n");
            sb.Append("  HardwarePlatform: ").Append(HardwarePlatform).Append("\n");
            sb.Append("  HazardousMaterialType: ").Append(HazardousMaterialType).Append("\n");
            sb.Append("  ItemDimensions: ").Append(ItemDimensions).Append("\n");
            sb.Append("  IsAdultProduct: ").Append(IsAdultProduct).Append("\n");
            sb.Append("  IsAutographed: ").Append(IsAutographed).Append("\n");
            sb.Append("  IsEligibleForTradeIn: ").Append(IsEligibleForTradeIn).Append("\n");
            sb.Append("  IsMemorabilia: ").Append(IsMemorabilia).Append("\n");
            sb.Append("  IssuesPerYear: ").Append(IssuesPerYear).Append("\n");
            sb.Append("  ItemPartNumber: ").Append(ItemPartNumber).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LegalDisclaimer: ").Append(LegalDisclaimer).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ManufacturerMaximumAge: ").Append(ManufacturerMaximumAge).Append("\n");
            sb.Append("  ManufacturerMinimumAge: ").Append(ManufacturerMinimumAge).Append("\n");
            sb.Append("  ManufacturerPartsWarrantyDescription: ").Append(ManufacturerPartsWarrantyDescription).Append("\n");
            sb.Append("  MaterialType: ").Append(MaterialType).Append("\n");
            sb.Append("  MaximumResolution: ").Append(MaximumResolution).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  MetalStamp: ").Append(MetalStamp).Append("\n");
            sb.Append("  MetalType: ").Append(MetalType).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  NumberOfDiscs: ").Append(NumberOfDiscs).Append("\n");
            sb.Append("  NumberOfIssues: ").Append(NumberOfIssues).Append("\n");
            sb.Append("  NumberOfItems: ").Append(NumberOfItems).Append("\n");
            sb.Append("  NumberOfPages: ").Append(NumberOfPages).Append("\n");
            sb.Append("  NumberOfTracks: ").Append(NumberOfTracks).Append("\n");
            sb.Append("  OperatingSystem: ").Append(OperatingSystem).Append("\n");
            sb.Append("  OpticalZoom: ").Append(OpticalZoom).Append("\n");
            sb.Append("  PackageDimensions: ").Append(PackageDimensions).Append("\n");
            sb.Append("  PackageQuantity: ").Append(PackageQuantity).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  PegiRating: ").Append(PegiRating).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  ProcessorCount: ").Append(ProcessorCount).Append("\n");
            sb.Append("  ProductGroup: ").Append(ProductGroup).Append("\n");
            sb.Append("  ProductTypeName: ").Append(ProductTypeName).Append("\n");
            sb.Append("  ProductTypeSubcategory: ").Append(ProductTypeSubcategory).Append("\n");
            sb.Append("  PublicationDate: ").Append(PublicationDate).Append("\n");
            sb.Append("  Publisher: ").Append(Publisher).Append("\n");
            sb.Append("  RegionCode: ").Append(RegionCode).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  RingSize: ").Append(RingSize).Append("\n");
            sb.Append("  RunningTime: ").Append(RunningTime).Append("\n");
            sb.Append("  ShaftMaterial: ").Append(ShaftMaterial).Append("\n");
            sb.Append("  Scent: ").Append(Scent).Append("\n");
            sb.Append("  SeasonSequence: ").Append(SeasonSequence).Append("\n");
            sb.Append("  SeikodoProductCode: ").Append(SeikodoProductCode).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SizePerPearl: ").Append(SizePerPearl).Append("\n");
            sb.Append("  SmallImage: ").Append(SmallImage).Append("\n");
            sb.Append("  Studio: ").Append(Studio).Append("\n");
            sb.Append("  SubscriptionLength: ").Append(SubscriptionLength).Append("\n");
            sb.Append("  SystemMemorySize: ").Append(SystemMemorySize).Append("\n");
            sb.Append("  SystemMemoryType: ").Append(SystemMemoryType).Append("\n");
            sb.Append("  TheatricalReleaseDate: ").Append(TheatricalReleaseDate).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TotalDiamondWeight: ").Append(TotalDiamondWeight).Append("\n");
            sb.Append("  TotalGemWeight: ").Append(TotalGemWeight).Append("\n");
            sb.Append("  Warranty: ").Append(Warranty).Append("\n");
            sb.Append("  WeeeTaxValue: ").Append(WeeeTaxValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttributeSetListType);
        }

        /// <summary>
        /// Returns true if AttributeSetListType instances are equal
        /// </summary>
        /// <param name="input">Instance of AttributeSetListType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttributeSetListType input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Actor == input.Actor ||
                    this.Actor != null &&
                    this.Actor.SequenceEqual(input.Actor)
                ) &&
                (
                    this.Artist == input.Artist ||
                    this.Artist != null &&
                    this.Artist.SequenceEqual(input.Artist)
                ) &&
                (
                    this.AspectRatio == input.AspectRatio ||
                    (this.AspectRatio != null &&
                    this.AspectRatio.Equals(input.AspectRatio))
                ) &&
                (
                    this.AudienceRating == input.AudienceRating ||
                    (this.AudienceRating != null &&
                    this.AudienceRating.Equals(input.AudienceRating))
                ) &&
                (
                    this.Author == input.Author ||
                    this.Author != null &&
                    this.Author.SequenceEqual(input.Author)
                ) &&
                (
                    this.BackFinding == input.BackFinding ||
                    (this.BackFinding != null &&
                    this.BackFinding.Equals(input.BackFinding))
                ) &&
                (
                    this.BandMaterialType == input.BandMaterialType ||
                    (this.BandMaterialType != null &&
                    this.BandMaterialType.Equals(input.BandMaterialType))
                ) &&
                (
                    this.Binding == input.Binding ||
                    (this.Binding != null &&
                    this.Binding.Equals(input.Binding))
                ) &&
                (
                    this.BlurayRegion == input.BlurayRegion ||
                    (this.BlurayRegion != null &&
                    this.BlurayRegion.Equals(input.BlurayRegion))
                ) &&
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) &&
                (
                    this.CeroAgeRating == input.CeroAgeRating ||
                    (this.CeroAgeRating != null &&
                    this.CeroAgeRating.Equals(input.CeroAgeRating))
                ) &&
                (
                    this.ChainType == input.ChainType ||
                    (this.ChainType != null &&
                    this.ChainType.Equals(input.ChainType))
                ) &&
                (
                    this.ClaspType == input.ClaspType ||
                    (this.ClaspType != null &&
                    this.ClaspType.Equals(input.ClaspType))
                ) &&
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) &&
                (
                    this.CpuManufacturer == input.CpuManufacturer ||
                    (this.CpuManufacturer != null &&
                    this.CpuManufacturer.Equals(input.CpuManufacturer))
                ) &&
                (
                    this.CpuSpeed == input.CpuSpeed ||
                    (this.CpuSpeed != null &&
                    this.CpuSpeed.Equals(input.CpuSpeed))
                ) &&
                (
                    this.CpuType == input.CpuType ||
                    (this.CpuType != null &&
                    this.CpuType.Equals(input.CpuType))
                ) &&
                (
                    this.Creator == input.Creator ||
                    this.Creator != null &&
                    this.Creator.SequenceEqual(input.Creator)
                ) &&
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) &&
                (
                    this.Director == input.Director ||
                    this.Director != null &&
                    this.Director.SequenceEqual(input.Director)
                ) &&
                (
                    this.DisplaySize == input.DisplaySize ||
                    (this.DisplaySize != null &&
                    this.DisplaySize.Equals(input.DisplaySize))
                ) &&
                (
                    this.Edition == input.Edition ||
                    (this.Edition != null &&
                    this.Edition.Equals(input.Edition))
                ) &&
                (
                    this.EpisodeSequence == input.EpisodeSequence ||
                    (this.EpisodeSequence != null &&
                    this.EpisodeSequence.Equals(input.EpisodeSequence))
                ) &&
                (
                    this.EsrbAgeRating == input.EsrbAgeRating ||
                    (this.EsrbAgeRating != null &&
                    this.EsrbAgeRating.Equals(input.EsrbAgeRating))
                ) &&
                (
                    this.Feature == input.Feature ||
                    this.Feature != null &&
                    this.Feature.SequenceEqual(input.Feature)
                ) &&
                (
                    this.Flavor == input.Flavor ||
                    (this.Flavor != null &&
                    this.Flavor.Equals(input.Flavor))
                ) &&
                (
                    this.Format == input.Format ||
                    this.Format != null &&
                    this.Format.SequenceEqual(input.Format)
                ) &&
                (
                    this.GemType == input.GemType ||
                    this.GemType != null &&
                    this.GemType.SequenceEqual(input.GemType)
                ) &&
                (
                    this.Genre == input.Genre ||
                    (this.Genre != null &&
                    this.Genre.Equals(input.Genre))
                ) &&
                (
                    this.GolfClubFlex == input.GolfClubFlex ||
                    (this.GolfClubFlex != null &&
                    this.GolfClubFlex.Equals(input.GolfClubFlex))
                ) &&
                (
                    this.GolfClubLoft == input.GolfClubLoft ||
                    (this.GolfClubLoft != null &&
                    this.GolfClubLoft.Equals(input.GolfClubLoft))
                ) &&
                (
                    this.HandOrientation == input.HandOrientation ||
                    (this.HandOrientation != null &&
                    this.HandOrientation.Equals(input.HandOrientation))
                ) &&
                (
                    this.HardDiskInterface == input.HardDiskInterface ||
                    (this.HardDiskInterface != null &&
                    this.HardDiskInterface.Equals(input.HardDiskInterface))
                ) &&
                (
                    this.HardDiskSize == input.HardDiskSize ||
                    (this.HardDiskSize != null &&
                    this.HardDiskSize.Equals(input.HardDiskSize))
                ) &&
                (
                    this.HardwarePlatform == input.HardwarePlatform ||
                    (this.HardwarePlatform != null &&
                    this.HardwarePlatform.Equals(input.HardwarePlatform))
                ) &&
                (
                    this.HazardousMaterialType == input.HazardousMaterialType ||
                    (this.HazardousMaterialType != null &&
                    this.HazardousMaterialType.Equals(input.HazardousMaterialType))
                ) &&
                (
                    this.ItemDimensions == input.ItemDimensions ||
                    (this.ItemDimensions != null &&
                    this.ItemDimensions.Equals(input.ItemDimensions))
                ) &&
                (
                    this.IsAdultProduct == input.IsAdultProduct ||
                    (this.IsAdultProduct != null &&
                    this.IsAdultProduct.Equals(input.IsAdultProduct))
                ) &&
                (
                    this.IsAutographed == input.IsAutographed ||
                    (this.IsAutographed != null &&
                    this.IsAutographed.Equals(input.IsAutographed))
                ) &&
                (
                    this.IsEligibleForTradeIn == input.IsEligibleForTradeIn ||
                    (this.IsEligibleForTradeIn != null &&
                    this.IsEligibleForTradeIn.Equals(input.IsEligibleForTradeIn))
                ) &&
                (
                    this.IsMemorabilia == input.IsMemorabilia ||
                    (this.IsMemorabilia != null &&
                    this.IsMemorabilia.Equals(input.IsMemorabilia))
                ) &&
                (
                    this.IssuesPerYear == input.IssuesPerYear ||
                    (this.IssuesPerYear != null &&
                    this.IssuesPerYear.Equals(input.IssuesPerYear))
                ) &&
                (
                    this.ItemPartNumber == input.ItemPartNumber ||
                    (this.ItemPartNumber != null &&
                    this.ItemPartNumber.Equals(input.ItemPartNumber))
                ) &&
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) &&
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) &&
                (
                    this.LegalDisclaimer == input.LegalDisclaimer ||
                    (this.LegalDisclaimer != null &&
                    this.LegalDisclaimer.Equals(input.LegalDisclaimer))
                ) &&
                (
                    this.ListPrice == input.ListPrice ||
                    (this.ListPrice != null &&
                    this.ListPrice.Equals(input.ListPrice))
                ) &&
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) &&
                (
                    this.ManufacturerMaximumAge == input.ManufacturerMaximumAge ||
                    (this.ManufacturerMaximumAge != null &&
                    this.ManufacturerMaximumAge.Equals(input.ManufacturerMaximumAge))
                ) &&
                (
                    this.ManufacturerMinimumAge == input.ManufacturerMinimumAge ||
                    (this.ManufacturerMinimumAge != null &&
                    this.ManufacturerMinimumAge.Equals(input.ManufacturerMinimumAge))
                ) &&
                (
                    this.ManufacturerPartsWarrantyDescription == input.ManufacturerPartsWarrantyDescription ||
                    (this.ManufacturerPartsWarrantyDescription != null &&
                    this.ManufacturerPartsWarrantyDescription.Equals(input.ManufacturerPartsWarrantyDescription))
                ) &&
                (
                    this.MaterialType == input.MaterialType ||
                    this.MaterialType != null &&
                    this.MaterialType.SequenceEqual(input.MaterialType)
                ) &&
                (
                    this.MaximumResolution == input.MaximumResolution ||
                    (this.MaximumResolution != null &&
                    this.MaximumResolution.Equals(input.MaximumResolution))
                ) &&
                (
                    this.MediaType == input.MediaType ||
                    this.MediaType != null &&
                    this.MediaType.SequenceEqual(input.MediaType)
                ) &&
                (
                    this.MetalStamp == input.MetalStamp ||
                    (this.MetalStamp != null &&
                    this.MetalStamp.Equals(input.MetalStamp))
                ) &&
                (
                    this.MetalType == input.MetalType ||
                    (this.MetalType != null &&
                    this.MetalType.Equals(input.MetalType))
                ) &&
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) &&
                (
                    this.NumberOfDiscs == input.NumberOfDiscs ||
                    (this.NumberOfDiscs != null &&
                    this.NumberOfDiscs.Equals(input.NumberOfDiscs))
                ) &&
                (
                    this.NumberOfIssues == input.NumberOfIssues ||
                    (this.NumberOfIssues != null &&
                    this.NumberOfIssues.Equals(input.NumberOfIssues))
                ) &&
                (
                    this.NumberOfItems == input.NumberOfItems ||
                    (this.NumberOfItems != null &&
                    this.NumberOfItems.Equals(input.NumberOfItems))
                ) &&
                (
                    this.NumberOfPages == input.NumberOfPages ||
                    (this.NumberOfPages != null &&
                    this.NumberOfPages.Equals(input.NumberOfPages))
                ) &&
                (
                    this.NumberOfTracks == input.NumberOfTracks ||
                    (this.NumberOfTracks != null &&
                    this.NumberOfTracks.Equals(input.NumberOfTracks))
                ) &&
                (
                    this.OperatingSystem == input.OperatingSystem ||
                    this.OperatingSystem != null &&
                    this.OperatingSystem.SequenceEqual(input.OperatingSystem)
                ) &&
                (
                    this.OpticalZoom == input.OpticalZoom ||
                    (this.OpticalZoom != null &&
                    this.OpticalZoom.Equals(input.OpticalZoom))
                ) &&
                (
                    this.PackageDimensions == input.PackageDimensions ||
                    (this.PackageDimensions != null &&
                    this.PackageDimensions.Equals(input.PackageDimensions))
                ) &&
                (
                    this.PackageQuantity == input.PackageQuantity ||
                    (this.PackageQuantity != null &&
                    this.PackageQuantity.Equals(input.PackageQuantity))
                ) &&
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) &&
                (
                    this.PegiRating == input.PegiRating ||
                    (this.PegiRating != null &&
                    this.PegiRating.Equals(input.PegiRating))
                ) &&
                (
                    this.Platform == input.Platform ||
                    this.Platform != null &&
                    this.Platform.SequenceEqual(input.Platform)
                ) &&
                (
                    this.ProcessorCount == input.ProcessorCount ||
                    (this.ProcessorCount != null &&
                    this.ProcessorCount.Equals(input.ProcessorCount))
                ) &&
                (
                    this.ProductGroup == input.ProductGroup ||
                    (this.ProductGroup != null &&
                    this.ProductGroup.Equals(input.ProductGroup))
                ) &&
                (
                    this.ProductTypeName == input.ProductTypeName ||
                    (this.ProductTypeName != null &&
                    this.ProductTypeName.Equals(input.ProductTypeName))
                ) &&
                (
                    this.ProductTypeSubcategory == input.ProductTypeSubcategory ||
                    (this.ProductTypeSubcategory != null &&
                    this.ProductTypeSubcategory.Equals(input.ProductTypeSubcategory))
                ) &&
                (
                    this.PublicationDate == input.PublicationDate ||
                    (this.PublicationDate != null &&
                    this.PublicationDate.Equals(input.PublicationDate))
                ) &&
                (
                    this.Publisher == input.Publisher ||
                    (this.Publisher != null &&
                    this.Publisher.Equals(input.Publisher))
                ) &&
                (
                    this.RegionCode == input.RegionCode ||
                    (this.RegionCode != null &&
                    this.RegionCode.Equals(input.RegionCode))
                ) &&
                (
                    this.ReleaseDate == input.ReleaseDate ||
                    (this.ReleaseDate != null &&
                    this.ReleaseDate.Equals(input.ReleaseDate))
                ) &&
                (
                    this.RingSize == input.RingSize ||
                    (this.RingSize != null &&
                    this.RingSize.Equals(input.RingSize))
                ) &&
                (
                    this.RunningTime == input.RunningTime ||
                    (this.RunningTime != null &&
                    this.RunningTime.Equals(input.RunningTime))
                ) &&
                (
                    this.ShaftMaterial == input.ShaftMaterial ||
                    (this.ShaftMaterial != null &&
                    this.ShaftMaterial.Equals(input.ShaftMaterial))
                ) &&
                (
                    this.Scent == input.Scent ||
                    (this.Scent != null &&
                    this.Scent.Equals(input.Scent))
                ) &&
                (
                    this.SeasonSequence == input.SeasonSequence ||
                    (this.SeasonSequence != null &&
                    this.SeasonSequence.Equals(input.SeasonSequence))
                ) &&
                (
                    this.SeikodoProductCode == input.SeikodoProductCode ||
                    (this.SeikodoProductCode != null &&
                    this.SeikodoProductCode.Equals(input.SeikodoProductCode))
                ) &&
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) &&
                (
                    this.SizePerPearl == input.SizePerPearl ||
                    (this.SizePerPearl != null &&
                    this.SizePerPearl.Equals(input.SizePerPearl))
                ) &&
                (
                    this.SmallImage == input.SmallImage ||
                    (this.SmallImage != null &&
                    this.SmallImage.Equals(input.SmallImage))
                ) &&
                (
                    this.Studio == input.Studio ||
                    (this.Studio != null &&
                    this.Studio.Equals(input.Studio))
                ) &&
                (
                    this.SubscriptionLength == input.SubscriptionLength ||
                    (this.SubscriptionLength != null &&
                    this.SubscriptionLength.Equals(input.SubscriptionLength))
                ) &&
                (
                    this.SystemMemorySize == input.SystemMemorySize ||
                    (this.SystemMemorySize != null &&
                    this.SystemMemorySize.Equals(input.SystemMemorySize))
                ) &&
                (
                    this.SystemMemoryType == input.SystemMemoryType ||
                    (this.SystemMemoryType != null &&
                    this.SystemMemoryType.Equals(input.SystemMemoryType))
                ) &&
                (
                    this.TheatricalReleaseDate == input.TheatricalReleaseDate ||
                    (this.TheatricalReleaseDate != null &&
                    this.TheatricalReleaseDate.Equals(input.TheatricalReleaseDate))
                ) &&
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) &&
                (
                    this.TotalDiamondWeight == input.TotalDiamondWeight ||
                    (this.TotalDiamondWeight != null &&
                    this.TotalDiamondWeight.Equals(input.TotalDiamondWeight))
                ) &&
                (
                    this.TotalGemWeight == input.TotalGemWeight ||
                    (this.TotalGemWeight != null &&
                    this.TotalGemWeight.Equals(input.TotalGemWeight))
                ) &&
                (
                    this.Warranty == input.Warranty ||
                    (this.Warranty != null &&
                    this.Warranty.Equals(input.Warranty))
                ) &&
                (
                    this.WeeeTaxValue == input.WeeeTaxValue ||
                    (this.WeeeTaxValue != null &&
                    this.WeeeTaxValue.Equals(input.WeeeTaxValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Actor != null)
                    hashCode = hashCode * 59 + this.Actor.GetHashCode();
                if (this.Artist != null)
                    hashCode = hashCode * 59 + this.Artist.GetHashCode();
                if (this.AspectRatio != null)
                    hashCode = hashCode * 59 + this.AspectRatio.GetHashCode();
                if (this.AudienceRating != null)
                    hashCode = hashCode * 59 + this.AudienceRating.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.BackFinding != null)
                    hashCode = hashCode * 59 + this.BackFinding.GetHashCode();
                if (this.BandMaterialType != null)
                    hashCode = hashCode * 59 + this.BandMaterialType.GetHashCode();
                if (this.Binding != null)
                    hashCode = hashCode * 59 + this.Binding.GetHashCode();
                if (this.BlurayRegion != null)
                    hashCode = hashCode * 59 + this.BlurayRegion.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.CeroAgeRating != null)
                    hashCode = hashCode * 59 + this.CeroAgeRating.GetHashCode();
                if (this.ChainType != null)
                    hashCode = hashCode * 59 + this.ChainType.GetHashCode();
                if (this.ClaspType != null)
                    hashCode = hashCode * 59 + this.ClaspType.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.CpuManufacturer != null)
                    hashCode = hashCode * 59 + this.CpuManufacturer.GetHashCode();
                if (this.CpuSpeed != null)
                    hashCode = hashCode * 59 + this.CpuSpeed.GetHashCode();
                if (this.CpuType != null)
                    hashCode = hashCode * 59 + this.CpuType.GetHashCode();
                if (this.Creator != null)
                    hashCode = hashCode * 59 + this.Creator.GetHashCode();
                if (this.Department != null)
                    hashCode = hashCode * 59 + this.Department.GetHashCode();
                if (this.Director != null)
                    hashCode = hashCode * 59 + this.Director.GetHashCode();
                if (this.DisplaySize != null)
                    hashCode = hashCode * 59 + this.DisplaySize.GetHashCode();
                if (this.Edition != null)
                    hashCode = hashCode * 59 + this.Edition.GetHashCode();
                if (this.EpisodeSequence != null)
                    hashCode = hashCode * 59 + this.EpisodeSequence.GetHashCode();
                if (this.EsrbAgeRating != null)
                    hashCode = hashCode * 59 + this.EsrbAgeRating.GetHashCode();
                if (this.Feature != null)
                    hashCode = hashCode * 59 + this.Feature.GetHashCode();
                if (this.Flavor != null)
                    hashCode = hashCode * 59 + this.Flavor.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.GemType != null)
                    hashCode = hashCode * 59 + this.GemType.GetHashCode();
                if (this.Genre != null)
                    hashCode = hashCode * 59 + this.Genre.GetHashCode();
                if (this.GolfClubFlex != null)
                    hashCode = hashCode * 59 + this.GolfClubFlex.GetHashCode();
                if (this.GolfClubLoft != null)
                    hashCode = hashCode * 59 + this.GolfClubLoft.GetHashCode();
                if (this.HandOrientation != null)
                    hashCode = hashCode * 59 + this.HandOrientation.GetHashCode();
                if (this.HardDiskInterface != null)
                    hashCode = hashCode * 59 + this.HardDiskInterface.GetHashCode();
                if (this.HardDiskSize != null)
                    hashCode = hashCode * 59 + this.HardDiskSize.GetHashCode();
                if (this.HardwarePlatform != null)
                    hashCode = hashCode * 59 + this.HardwarePlatform.GetHashCode();
                if (this.HazardousMaterialType != null)
                    hashCode = hashCode * 59 + this.HazardousMaterialType.GetHashCode();
                if (this.ItemDimensions != null)
                    hashCode = hashCode * 59 + this.ItemDimensions.GetHashCode();
                if (this.IsAdultProduct != null)
                    hashCode = hashCode * 59 + this.IsAdultProduct.GetHashCode();
                if (this.IsAutographed != null)
                    hashCode = hashCode * 59 + this.IsAutographed.GetHashCode();
                if (this.IsEligibleForTradeIn != null)
                    hashCode = hashCode * 59 + this.IsEligibleForTradeIn.GetHashCode();
                if (this.IsMemorabilia != null)
                    hashCode = hashCode * 59 + this.IsMemorabilia.GetHashCode();
                if (this.IssuesPerYear != null)
                    hashCode = hashCode * 59 + this.IssuesPerYear.GetHashCode();
                if (this.ItemPartNumber != null)
                    hashCode = hashCode * 59 + this.ItemPartNumber.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.LegalDisclaimer != null)
                    hashCode = hashCode * 59 + this.LegalDisclaimer.GetHashCode();
                if (this.ListPrice != null)
                    hashCode = hashCode * 59 + this.ListPrice.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.ManufacturerMaximumAge != null)
                    hashCode = hashCode * 59 + this.ManufacturerMaximumAge.GetHashCode();
                if (this.ManufacturerMinimumAge != null)
                    hashCode = hashCode * 59 + this.ManufacturerMinimumAge.GetHashCode();
                if (this.ManufacturerPartsWarrantyDescription != null)
                    hashCode = hashCode * 59 + this.ManufacturerPartsWarrantyDescription.GetHashCode();
                if (this.MaterialType != null)
                    hashCode = hashCode * 59 + this.MaterialType.GetHashCode();
                if (this.MaximumResolution != null)
                    hashCode = hashCode * 59 + this.MaximumResolution.GetHashCode();
                if (this.MediaType != null)
                    hashCode = hashCode * 59 + this.MediaType.GetHashCode();
                if (this.MetalStamp != null)
                    hashCode = hashCode * 59 + this.MetalStamp.GetHashCode();
                if (this.MetalType != null)
                    hashCode = hashCode * 59 + this.MetalType.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.NumberOfDiscs != null)
                    hashCode = hashCode * 59 + this.NumberOfDiscs.GetHashCode();
                if (this.NumberOfIssues != null)
                    hashCode = hashCode * 59 + this.NumberOfIssues.GetHashCode();
                if (this.NumberOfItems != null)
                    hashCode = hashCode * 59 + this.NumberOfItems.GetHashCode();
                if (this.NumberOfPages != null)
                    hashCode = hashCode * 59 + this.NumberOfPages.GetHashCode();
                if (this.NumberOfTracks != null)
                    hashCode = hashCode * 59 + this.NumberOfTracks.GetHashCode();
                if (this.OperatingSystem != null)
                    hashCode = hashCode * 59 + this.OperatingSystem.GetHashCode();
                if (this.OpticalZoom != null)
                    hashCode = hashCode * 59 + this.OpticalZoom.GetHashCode();
                if (this.PackageDimensions != null)
                    hashCode = hashCode * 59 + this.PackageDimensions.GetHashCode();
                if (this.PackageQuantity != null)
                    hashCode = hashCode * 59 + this.PackageQuantity.GetHashCode();
                if (this.PartNumber != null)
                    hashCode = hashCode * 59 + this.PartNumber.GetHashCode();
                if (this.PegiRating != null)
                    hashCode = hashCode * 59 + this.PegiRating.GetHashCode();
                if (this.Platform != null)
                    hashCode = hashCode * 59 + this.Platform.GetHashCode();
                if (this.ProcessorCount != null)
                    hashCode = hashCode * 59 + this.ProcessorCount.GetHashCode();
                if (this.ProductGroup != null)
                    hashCode = hashCode * 59 + this.ProductGroup.GetHashCode();
                if (this.ProductTypeName != null)
                    hashCode = hashCode * 59 + this.ProductTypeName.GetHashCode();
                if (this.ProductTypeSubcategory != null)
                    hashCode = hashCode * 59 + this.ProductTypeSubcategory.GetHashCode();
                if (this.PublicationDate != null)
                    hashCode = hashCode * 59 + this.PublicationDate.GetHashCode();
                if (this.Publisher != null)
                    hashCode = hashCode * 59 + this.Publisher.GetHashCode();
                if (this.RegionCode != null)
                    hashCode = hashCode * 59 + this.RegionCode.GetHashCode();
                if (this.ReleaseDate != null)
                    hashCode = hashCode * 59 + this.ReleaseDate.GetHashCode();
                if (this.RingSize != null)
                    hashCode = hashCode * 59 + this.RingSize.GetHashCode();
                if (this.RunningTime != null)
                    hashCode = hashCode * 59 + this.RunningTime.GetHashCode();
                if (this.ShaftMaterial != null)
                    hashCode = hashCode * 59 + this.ShaftMaterial.GetHashCode();
                if (this.Scent != null)
                    hashCode = hashCode * 59 + this.Scent.GetHashCode();
                if (this.SeasonSequence != null)
                    hashCode = hashCode * 59 + this.SeasonSequence.GetHashCode();
                if (this.SeikodoProductCode != null)
                    hashCode = hashCode * 59 + this.SeikodoProductCode.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.SizePerPearl != null)
                    hashCode = hashCode * 59 + this.SizePerPearl.GetHashCode();
                if (this.SmallImage != null)
                    hashCode = hashCode * 59 + this.SmallImage.GetHashCode();
                if (this.Studio != null)
                    hashCode = hashCode * 59 + this.Studio.GetHashCode();
                if (this.SubscriptionLength != null)
                    hashCode = hashCode * 59 + this.SubscriptionLength.GetHashCode();
                if (this.SystemMemorySize != null)
                    hashCode = hashCode * 59 + this.SystemMemorySize.GetHashCode();
                if (this.SystemMemoryType != null)
                    hashCode = hashCode * 59 + this.SystemMemoryType.GetHashCode();
                if (this.TheatricalReleaseDate != null)
                    hashCode = hashCode * 59 + this.TheatricalReleaseDate.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.TotalDiamondWeight != null)
                    hashCode = hashCode * 59 + this.TotalDiamondWeight.GetHashCode();
                if (this.TotalGemWeight != null)
                    hashCode = hashCode * 59 + this.TotalGemWeight.GetHashCode();
                if (this.Warranty != null)
                    hashCode = hashCode * 59 + this.Warranty.GetHashCode();
                if (this.WeeeTaxValue != null)
                    hashCode = hashCode * 59 + this.WeeeTaxValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
