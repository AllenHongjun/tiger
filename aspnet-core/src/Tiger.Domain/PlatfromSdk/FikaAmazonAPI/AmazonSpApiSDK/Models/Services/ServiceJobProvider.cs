/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Services
{
    /// <summary>
    /// Information about the service job provider.
    /// </summary>
    [DataContract]
    public partial class ServiceJobProvider : IEquatable<ServiceJobProvider>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceJobProvider" /> class.
        /// </summary>
        /// <param name="ServiceJobProviderId">The identifier of the service job provider.</param>
        public ServiceJobProvider(string ServiceJobProviderId = default(string))
        {
            this.ServiceJobProviderId = ServiceJobProviderId;
        }

        /// <summary>
        /// The identifier of the service job provider
        /// </summary>
        /// <value>The identifier of the service job provider</value>
        [DataMember(Name = "serviceJobProviderId", EmitDefaultValue = false)]
        public string ServiceJobProviderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceJobProvider {\n");
            sb.Append("  ServiceJobProviderId: ").Append(ServiceJobProviderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceJobProvider);
        }

        /// <summary>
        /// Returns true if ServiceJobProvider instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceJobProvider to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceJobProvider input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ServiceJobProviderId == input.ServiceJobProviderId ||
                    (this.ServiceJobProviderId != null &&
                    this.ServiceJobProviderId.Equals(input.ServiceJobProviderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceJobProviderId != null)
                    hashCode = hashCode * 59 + this.ServiceJobProviderId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ServiceJobProviderId (string) pattern
            Regex regexServiceJobProviderId = new Regex(@"^[A-Z0-9]*$", RegexOptions.CultureInvariant);
            if (false == regexServiceJobProviderId.Match(this.ServiceJobProviderId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServiceJobProviderId, must match a pattern of " + regexServiceJobProviderId, new[] { "ServiceJobProviderId" });
            }

            yield break;
        }
    }

}
