/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Services
{
    /// <summary>
    /// The job details of a service.
    /// </summary>
    [DataContract]
    public partial class ServiceJob : IEquatable<ServiceJob>, IValidatableObject
    {
        /// <summary>
        /// The status of the service job.
        /// </summary>
        /// <value>The status of the service job.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServiceJobStatusEnum
        {

            /// <summary>
            /// Enum NOTSERVICED for value: NOT_SERVICED
            /// </summary>
            [EnumMember(Value = "NOT_SERVICED")]
            NOTSERVICED = 1,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 2,

            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 3,

            /// <summary>
            /// Enum PENDINGSCHEDULE for value: PENDING_SCHEDULE
            /// </summary>
            [EnumMember(Value = "PENDING_SCHEDULE")]
            PENDINGSCHEDULE = 4,

            /// <summary>
            /// Enum NOTFULFILLABLE for value: NOT_FULFILLABLE
            /// </summary>
            [EnumMember(Value = "NOT_FULFILLABLE")]
            NOTFULFILLABLE = 5,

            /// <summary>
            /// Enum HOLD for value: HOLD
            /// </summary>
            [EnumMember(Value = "HOLD")]
            HOLD = 6,

            /// <summary>
            /// Enum PAYMENTDECLINED for value: PAYMENT_DECLINED
            /// </summary>
            [EnumMember(Value = "PAYMENT_DECLINED")]
            PAYMENTDECLINED = 7
        }

        /// <summary>
        /// The status of the service job.
        /// </summary>
        /// <value>The status of the service job.</value>
        [DataMember(Name = "serviceJobStatus", EmitDefaultValue = false)]
        public ServiceJobStatusEnum? ServiceJobStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceJob" /> class.
        /// </summary>
        /// <param name="CreateTime">The date and time of the creation of the job, in ISO 8601 format..</param>
        /// <param name="ServiceJobId">The service job identifier..</param>
        /// <param name="ServiceJobStatus">The status of the service job..</param>
        /// <param name="ScopeOfWork">The scope of work for the order..</param>
        /// <param name="Seller">Information about the seller of the service job..</param>
        /// <param name="ServiceJobProvider">Information about the service job provider..</param>
        /// <param name="PreferredAppointmentTimes">A list of appointment windows preferred by the buyer. Included only if the buyer selected appointment windows when creating the order..</param>
        /// <param name="Appointments">A list of appointments..</param>
        /// <param name="ServiceOrderId">The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format..</param>
        /// <param name="MarketplaceId">The marketplace identifier..</param>
        /// <param name="Buyer">Information about the buyer..</param>
        /// <param name="AssociatedItems">A list of items associated with the service job..</param>
        /// <param name="ServiceLocation">Information about the location of the service job..</param>
        public ServiceJob(DateTime? CreateTime = default(DateTime?), ServiceJobId ServiceJobId = default(ServiceJobId), ServiceJobStatusEnum? ServiceJobStatus = default(ServiceJobStatusEnum?), ScopeOfWork ScopeOfWork = default(ScopeOfWork), Seller Seller = default(Seller), ServiceJobProvider ServiceJobProvider = default(ServiceJobProvider), List<AppointmentTime> PreferredAppointmentTimes = default(List<AppointmentTime>), List<Appointment> Appointments = default(List<Appointment>), OrderId ServiceOrderId = default(OrderId), string MarketplaceId = default(string), Buyer Buyer = default(Buyer), List<AssociatedItem> AssociatedItems = default(List<AssociatedItem>), ServiceLocation ServiceLocation = default(ServiceLocation))
        {
            this.CreateTime = CreateTime;
            this.ServiceJobId = ServiceJobId;
            this.ServiceJobStatus = ServiceJobStatus;
            this.ScopeOfWork = ScopeOfWork;
            this.Seller = Seller;
            this.ServiceJobProvider = ServiceJobProvider;
            this.PreferredAppointmentTimes = PreferredAppointmentTimes;
            this.Appointments = Appointments;
            this.ServiceOrderId = ServiceOrderId;
            this.MarketplaceId = MarketplaceId;
            this.Buyer = Buyer;
            this.AssociatedItems = AssociatedItems;
            this.ServiceLocation = ServiceLocation;
        }

        /// <summary>
        /// The date and time of the creation of the job, in ISO 8601 format.
        /// </summary>
        /// <value>The date and time of the creation of the job, in ISO 8601 format.</value>
        [DataMember(Name = "createTime", EmitDefaultValue = false)]
        public DateTime? CreateTime { get; set; }

        /// <summary>
        /// The service job identifier.
        /// </summary>
        /// <value>The service job identifier.</value>
        [DataMember(Name = "serviceJobId", EmitDefaultValue = false)]
        public ServiceJobId ServiceJobId { get; set; }


        /// <summary>
        /// The scope of work for the order.
        /// </summary>
        /// <value>The scope of work for the order.</value>
        [DataMember(Name = "scopeOfWork", EmitDefaultValue = false)]
        public ScopeOfWork ScopeOfWork { get; set; }

        /// <summary>
        /// Information about the seller of the service job.
        /// </summary>
        /// <value>Information about the seller of the service job.</value>
        [DataMember(Name = "seller", EmitDefaultValue = false)]
        public Seller Seller { get; set; }

        /// <summary>
        /// Information about the service job provider.
        /// </summary>
        /// <value>Information about the service job provider.</value>
        [DataMember(Name = "serviceJobProvider", EmitDefaultValue = false)]
        public ServiceJobProvider ServiceJobProvider { get; set; }

        /// <summary>
        /// A list of appointment windows preferred by the buyer. Included only if the buyer selected appointment windows when creating the order.
        /// </summary>
        /// <value>A list of appointment windows preferred by the buyer. Included only if the buyer selected appointment windows when creating the order.</value>
        [DataMember(Name = "preferredAppointmentTimes", EmitDefaultValue = false)]
        public List<AppointmentTime> PreferredAppointmentTimes { get; set; }

        /// <summary>
        /// A list of appointments.
        /// </summary>
        /// <value>A list of appointments.</value>
        [DataMember(Name = "appointments", EmitDefaultValue = false)]
        public List<Appointment> Appointments { get; set; }

        /// <summary>
        /// The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.
        /// </summary>
        /// <value>The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.</value>
        [DataMember(Name = "serviceOrderId", EmitDefaultValue = false)]
        public OrderId ServiceOrderId { get; set; }

        /// <summary>
        /// The marketplace identifier.
        /// </summary>
        /// <value>The marketplace identifier.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Information about the buyer.
        /// </summary>
        /// <value>Information about the buyer.</value>
        [DataMember(Name = "buyer", EmitDefaultValue = false)]
        public Buyer Buyer { get; set; }

        /// <summary>
        /// A list of items associated with the service job.
        /// </summary>
        /// <value>A list of items associated with the service job.</value>
        [DataMember(Name = "associatedItems", EmitDefaultValue = false)]
        public List<AssociatedItem> AssociatedItems { get; set; }

        /// <summary>
        /// Information about the location of the service job.
        /// </summary>
        /// <value>Information about the location of the service job.</value>
        [DataMember(Name = "serviceLocation", EmitDefaultValue = false)]
        public ServiceLocation ServiceLocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceJob {\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ServiceJobId: ").Append(ServiceJobId).Append("\n");
            sb.Append("  ServiceJobStatus: ").Append(ServiceJobStatus).Append("\n");
            sb.Append("  ScopeOfWork: ").Append(ScopeOfWork).Append("\n");
            sb.Append("  Seller: ").Append(Seller).Append("\n");
            sb.Append("  ServiceJobProvider: ").Append(ServiceJobProvider).Append("\n");
            sb.Append("  PreferredAppointmentTimes: ").Append(PreferredAppointmentTimes).Append("\n");
            sb.Append("  Appointments: ").Append(Appointments).Append("\n");
            sb.Append("  ServiceOrderId: ").Append(ServiceOrderId).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Buyer: ").Append(Buyer).Append("\n");
            sb.Append("  AssociatedItems: ").Append(AssociatedItems).Append("\n");
            sb.Append("  ServiceLocation: ").Append(ServiceLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceJob);
        }

        /// <summary>
        /// Returns true if ServiceJob instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceJob input)
        {
            if (input == null)
                return false;

            return
                (
                    this.CreateTime == input.CreateTime ||
                    (this.CreateTime != null &&
                    this.CreateTime.Equals(input.CreateTime))
                ) &&
                (
                    this.ServiceJobId == input.ServiceJobId ||
                    (this.ServiceJobId != null &&
                    this.ServiceJobId.Equals(input.ServiceJobId))
                ) &&
                (
                    this.ServiceJobStatus == input.ServiceJobStatus ||
                    (this.ServiceJobStatus != null &&
                    this.ServiceJobStatus.Equals(input.ServiceJobStatus))
                ) &&
                (
                    this.ScopeOfWork == input.ScopeOfWork ||
                    (this.ScopeOfWork != null &&
                    this.ScopeOfWork.Equals(input.ScopeOfWork))
                ) &&
                (
                    this.Seller == input.Seller ||
                    (this.Seller != null &&
                    this.Seller.Equals(input.Seller))
                ) &&
                (
                    this.ServiceJobProvider == input.ServiceJobProvider ||
                    (this.ServiceJobProvider != null &&
                    this.ServiceJobProvider.Equals(input.ServiceJobProvider))
                ) &&
                (
                    this.PreferredAppointmentTimes == input.PreferredAppointmentTimes ||
                    this.PreferredAppointmentTimes != null &&
                    this.PreferredAppointmentTimes.SequenceEqual(input.PreferredAppointmentTimes)
                ) &&
                (
                    this.Appointments == input.Appointments ||
                    this.Appointments != null &&
                    this.Appointments.SequenceEqual(input.Appointments)
                ) &&
                (
                    this.ServiceOrderId == input.ServiceOrderId ||
                    (this.ServiceOrderId != null &&
                    this.ServiceOrderId.Equals(input.ServiceOrderId))
                ) &&
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    this.Buyer == input.Buyer ||
                    (this.Buyer != null &&
                    this.Buyer.Equals(input.Buyer))
                ) &&
                (
                    this.AssociatedItems == input.AssociatedItems ||
                    this.AssociatedItems != null &&
                    this.AssociatedItems.SequenceEqual(input.AssociatedItems)
                ) &&
                (
                    this.ServiceLocation == input.ServiceLocation ||
                    (this.ServiceLocation != null &&
                    this.ServiceLocation.Equals(input.ServiceLocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreateTime != null)
                    hashCode = hashCode * 59 + this.CreateTime.GetHashCode();
                if (this.ServiceJobId != null)
                    hashCode = hashCode * 59 + this.ServiceJobId.GetHashCode();
                if (this.ServiceJobStatus != null)
                    hashCode = hashCode * 59 + this.ServiceJobStatus.GetHashCode();
                if (this.ScopeOfWork != null)
                    hashCode = hashCode * 59 + this.ScopeOfWork.GetHashCode();
                if (this.Seller != null)
                    hashCode = hashCode * 59 + this.Seller.GetHashCode();
                if (this.ServiceJobProvider != null)
                    hashCode = hashCode * 59 + this.ServiceJobProvider.GetHashCode();
                if (this.PreferredAppointmentTimes != null)
                    hashCode = hashCode * 59 + this.PreferredAppointmentTimes.GetHashCode();
                if (this.Appointments != null)
                    hashCode = hashCode * 59 + this.Appointments.GetHashCode();
                if (this.ServiceOrderId != null)
                    hashCode = hashCode * 59 + this.ServiceOrderId.GetHashCode();
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.Buyer != null)
                    hashCode = hashCode * 59 + this.Buyer.GetHashCode();
                if (this.AssociatedItems != null)
                    hashCode = hashCode * 59 + this.AssociatedItems.GetHashCode();
                if (this.ServiceLocation != null)
                    hashCode = hashCode * 59 + this.ServiceLocation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MarketplaceId (string) pattern
            Regex regexMarketplaceId = new Regex(@"^[A-Z0-9]*$", RegexOptions.CultureInvariant);
            if (false == regexMarketplaceId.Match(this.MarketplaceId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarketplaceId, must match a pattern of " + regexMarketplaceId, new[] { "MarketplaceId" });
            }

            yield break;
        }
    }

}
