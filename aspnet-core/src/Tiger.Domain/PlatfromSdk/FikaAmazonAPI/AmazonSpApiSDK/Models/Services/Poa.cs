/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Services
{
    /// <summary>
    /// Proof of Appointment (POA) details.
    /// </summary>
    [DataContract]
    public partial class Poa : IEquatable<Poa>, IValidatableObject
    {
        /// <summary>
        /// The type of POA uploaded.
        /// </summary>
        /// <value>The type of POA uploaded.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PoaTypeEnum
        {

            /// <summary>
            /// Enum NOSIGNATUREDUMMYPOS for value: NO_SIGNATURE_DUMMY_POS
            /// </summary>
            [EnumMember(Value = "NO_SIGNATURE_DUMMY_POS")]
            NOSIGNATUREDUMMYPOS = 1,

            /// <summary>
            /// Enum CUSTOMERSIGNATURE for value: CUSTOMER_SIGNATURE
            /// </summary>
            [EnumMember(Value = "CUSTOMER_SIGNATURE")]
            CUSTOMERSIGNATURE = 2,

            /// <summary>
            /// Enum DUMMYRECEIPT for value: DUMMY_RECEIPT
            /// </summary>
            [EnumMember(Value = "DUMMY_RECEIPT")]
            DUMMYRECEIPT = 3,

            /// <summary>
            /// Enum POARECEIPT for value: POA_RECEIPT
            /// </summary>
            [EnumMember(Value = "POA_RECEIPT")]
            POARECEIPT = 4
        }

        /// <summary>
        /// The type of POA uploaded.
        /// </summary>
        /// <value>The type of POA uploaded.</value>
        [DataMember(Name = "poaType", EmitDefaultValue = false)]
        public PoaTypeEnum? PoaType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Poa" /> class.
        /// </summary>
        /// <param name="AppointmentTime">The time of the appointment window..</param>
        /// <param name="Technicians">A list of technicians..</param>
        /// <param name="UploadingTechnician">The identifier of the technician who uploaded the POA..</param>
        /// <param name="UploadTime">The date and time when the POA was uploaded, in ISO 8601 format..</param>
        /// <param name="PoaType">The type of POA uploaded..</param>
        public Poa(AppointmentTime AppointmentTime = default(AppointmentTime), List<Technician> Technicians = default(List<Technician>), string UploadingTechnician = default(string), DateTime? UploadTime = default(DateTime?), PoaTypeEnum? PoaType = default(PoaTypeEnum?))
        {
            this.AppointmentTime = AppointmentTime;
            this.Technicians = Technicians;
            this.UploadingTechnician = UploadingTechnician;
            this.UploadTime = UploadTime;
            this.PoaType = PoaType;
        }

        /// <summary>
        /// The time of the appointment window.
        /// </summary>
        /// <value>The time of the appointment window.</value>
        [DataMember(Name = "appointmentTime", EmitDefaultValue = false)]
        public AppointmentTime AppointmentTime { get; set; }

        /// <summary>
        /// A list of technicians.
        /// </summary>
        /// <value>A list of technicians.</value>
        [DataMember(Name = "technicians", EmitDefaultValue = false)]
        public List<Technician> Technicians { get; set; }

        /// <summary>
        /// The identifier of the technician who uploaded the POA.
        /// </summary>
        /// <value>The identifier of the technician who uploaded the POA.</value>
        [DataMember(Name = "uploadingTechnician", EmitDefaultValue = false)]
        public string UploadingTechnician { get; set; }

        /// <summary>
        /// The date and time when the POA was uploaded, in ISO 8601 format.
        /// </summary>
        /// <value>The date and time when the POA was uploaded, in ISO 8601 format.</value>
        [DataMember(Name = "uploadTime", EmitDefaultValue = false)]
        public DateTime? UploadTime { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Poa {\n");
            sb.Append("  AppointmentTime: ").Append(AppointmentTime).Append("\n");
            sb.Append("  Technicians: ").Append(Technicians).Append("\n");
            sb.Append("  UploadingTechnician: ").Append(UploadingTechnician).Append("\n");
            sb.Append("  UploadTime: ").Append(UploadTime).Append("\n");
            sb.Append("  PoaType: ").Append(PoaType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Poa);
        }

        /// <summary>
        /// Returns true if Poa instances are equal
        /// </summary>
        /// <param name="input">Instance of Poa to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Poa input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AppointmentTime == input.AppointmentTime ||
                    (this.AppointmentTime != null &&
                    this.AppointmentTime.Equals(input.AppointmentTime))
                ) &&
                (
                    this.Technicians == input.Technicians ||
                    this.Technicians != null &&
                    this.Technicians.SequenceEqual(input.Technicians)
                ) &&
                (
                    this.UploadingTechnician == input.UploadingTechnician ||
                    (this.UploadingTechnician != null &&
                    this.UploadingTechnician.Equals(input.UploadingTechnician))
                ) &&
                (
                    this.UploadTime == input.UploadTime ||
                    (this.UploadTime != null &&
                    this.UploadTime.Equals(input.UploadTime))
                ) &&
                (
                    this.PoaType == input.PoaType ||
                    (this.PoaType != null &&
                    this.PoaType.Equals(input.PoaType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppointmentTime != null)
                    hashCode = hashCode * 59 + this.AppointmentTime.GetHashCode();
                if (this.Technicians != null)
                    hashCode = hashCode * 59 + this.Technicians.GetHashCode();
                if (this.UploadingTechnician != null)
                    hashCode = hashCode * 59 + this.UploadingTechnician.GetHashCode();
                if (this.UploadTime != null)
                    hashCode = hashCode * 59 + this.UploadTime.GetHashCode();
                if (this.PoaType != null)
                    hashCode = hashCode * 59 + this.PoaType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UploadingTechnician (string) pattern
            Regex regexUploadingTechnician = new Regex(@"^[A-Z0-9]*$", RegexOptions.CultureInvariant);
            if (false == regexUploadingTechnician.Match(this.UploadingTechnician).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UploadingTechnician, must match a pattern of " + regexUploadingTechnician, new[] { "UploadingTechnician" });
            }

            yield break;
        }
    }

}
