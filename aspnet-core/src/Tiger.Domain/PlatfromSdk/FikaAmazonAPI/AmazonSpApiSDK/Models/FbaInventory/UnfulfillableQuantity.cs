/* 
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FbaInventory
{
    /// <summary>
    /// The quantity of unfulfillable inventory.
    /// </summary>
    [DataContract]
    public partial class UnfulfillableQuantity : IEquatable<UnfulfillableQuantity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnfulfillableQuantity" /> class.
        /// </summary>
        /// <param name="TotalUnfulfillableQuantity">The total number of units in Amazon&#39;s fulfillment network in unsellable condition..</param>
        /// <param name="CustomerDamagedQuantity">The number of units in customer damaged disposition..</param>
        /// <param name="WarehouseDamagedQuantity">The number of units in warehouse damaged disposition..</param>
        /// <param name="DistributorDamagedQuantity">The number of units in distributor damaged disposition..</param>
        /// <param name="CarrierDamagedQuantity">The number of units in carrier damaged disposition..</param>
        /// <param name="DefectiveQuantity">The number of units in defective disposition..</param>
        /// <param name="ExpiredQuantity">The number of units in expired disposition..</param>
        public UnfulfillableQuantity(int? TotalUnfulfillableQuantity = default(int?), int? CustomerDamagedQuantity = default(int?), int? WarehouseDamagedQuantity = default(int?), int? DistributorDamagedQuantity = default(int?), int? CarrierDamagedQuantity = default(int?), int? DefectiveQuantity = default(int?), int? ExpiredQuantity = default(int?))
        {
            this.TotalUnfulfillableQuantity = TotalUnfulfillableQuantity;
            this.CustomerDamagedQuantity = CustomerDamagedQuantity;
            this.WarehouseDamagedQuantity = WarehouseDamagedQuantity;
            this.DistributorDamagedQuantity = DistributorDamagedQuantity;
            this.CarrierDamagedQuantity = CarrierDamagedQuantity;
            this.DefectiveQuantity = DefectiveQuantity;
            this.ExpiredQuantity = ExpiredQuantity;
        }

        /// <summary>
        /// The total number of units in Amazon&#39;s fulfillment network in unsellable condition.
        /// </summary>
        /// <value>The total number of units in Amazon&#39;s fulfillment network in unsellable condition.</value>
        [DataMember(Name = "totalUnfulfillableQuantity", EmitDefaultValue = false)]
        public int? TotalUnfulfillableQuantity { get; set; }

        /// <summary>
        /// The number of units in customer damaged disposition.
        /// </summary>
        /// <value>The number of units in customer damaged disposition.</value>
        [DataMember(Name = "customerDamagedQuantity", EmitDefaultValue = false)]
        public int? CustomerDamagedQuantity { get; set; }

        /// <summary>
        /// The number of units in warehouse damaged disposition.
        /// </summary>
        /// <value>The number of units in warehouse damaged disposition.</value>
        [DataMember(Name = "warehouseDamagedQuantity", EmitDefaultValue = false)]
        public int? WarehouseDamagedQuantity { get; set; }

        /// <summary>
        /// The number of units in distributor damaged disposition.
        /// </summary>
        /// <value>The number of units in distributor damaged disposition.</value>
        [DataMember(Name = "distributorDamagedQuantity", EmitDefaultValue = false)]
        public int? DistributorDamagedQuantity { get; set; }

        /// <summary>
        /// The number of units in carrier damaged disposition.
        /// </summary>
        /// <value>The number of units in carrier damaged disposition.</value>
        [DataMember(Name = "carrierDamagedQuantity", EmitDefaultValue = false)]
        public int? CarrierDamagedQuantity { get; set; }

        /// <summary>
        /// The number of units in defective disposition.
        /// </summary>
        /// <value>The number of units in defective disposition.</value>
        [DataMember(Name = "defectiveQuantity", EmitDefaultValue = false)]
        public int? DefectiveQuantity { get; set; }

        /// <summary>
        /// The number of units in expired disposition.
        /// </summary>
        /// <value>The number of units in expired disposition.</value>
        [DataMember(Name = "expiredQuantity", EmitDefaultValue = false)]
        public int? ExpiredQuantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnfulfillableQuantity {\n");
            sb.Append("  TotalUnfulfillableQuantity: ").Append(TotalUnfulfillableQuantity).Append("\n");
            sb.Append("  CustomerDamagedQuantity: ").Append(CustomerDamagedQuantity).Append("\n");
            sb.Append("  WarehouseDamagedQuantity: ").Append(WarehouseDamagedQuantity).Append("\n");
            sb.Append("  DistributorDamagedQuantity: ").Append(DistributorDamagedQuantity).Append("\n");
            sb.Append("  CarrierDamagedQuantity: ").Append(CarrierDamagedQuantity).Append("\n");
            sb.Append("  DefectiveQuantity: ").Append(DefectiveQuantity).Append("\n");
            sb.Append("  ExpiredQuantity: ").Append(ExpiredQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnfulfillableQuantity);
        }

        /// <summary>
        /// Returns true if UnfulfillableQuantity instances are equal
        /// </summary>
        /// <param name="input">Instance of UnfulfillableQuantity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnfulfillableQuantity input)
        {
            if (input == null)
                return false;

            return
                (
                    this.TotalUnfulfillableQuantity == input.TotalUnfulfillableQuantity ||
                    (this.TotalUnfulfillableQuantity != null &&
                    this.TotalUnfulfillableQuantity.Equals(input.TotalUnfulfillableQuantity))
                ) &&
                (
                    this.CustomerDamagedQuantity == input.CustomerDamagedQuantity ||
                    (this.CustomerDamagedQuantity != null &&
                    this.CustomerDamagedQuantity.Equals(input.CustomerDamagedQuantity))
                ) &&
                (
                    this.WarehouseDamagedQuantity == input.WarehouseDamagedQuantity ||
                    (this.WarehouseDamagedQuantity != null &&
                    this.WarehouseDamagedQuantity.Equals(input.WarehouseDamagedQuantity))
                ) &&
                (
                    this.DistributorDamagedQuantity == input.DistributorDamagedQuantity ||
                    (this.DistributorDamagedQuantity != null &&
                    this.DistributorDamagedQuantity.Equals(input.DistributorDamagedQuantity))
                ) &&
                (
                    this.CarrierDamagedQuantity == input.CarrierDamagedQuantity ||
                    (this.CarrierDamagedQuantity != null &&
                    this.CarrierDamagedQuantity.Equals(input.CarrierDamagedQuantity))
                ) &&
                (
                    this.DefectiveQuantity == input.DefectiveQuantity ||
                    (this.DefectiveQuantity != null &&
                    this.DefectiveQuantity.Equals(input.DefectiveQuantity))
                ) &&
                (
                    this.ExpiredQuantity == input.ExpiredQuantity ||
                    (this.ExpiredQuantity != null &&
                    this.ExpiredQuantity.Equals(input.ExpiredQuantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalUnfulfillableQuantity != null)
                    hashCode = hashCode * 59 + this.TotalUnfulfillableQuantity.GetHashCode();
                if (this.CustomerDamagedQuantity != null)
                    hashCode = hashCode * 59 + this.CustomerDamagedQuantity.GetHashCode();
                if (this.WarehouseDamagedQuantity != null)
                    hashCode = hashCode * 59 + this.WarehouseDamagedQuantity.GetHashCode();
                if (this.DistributorDamagedQuantity != null)
                    hashCode = hashCode * 59 + this.DistributorDamagedQuantity.GetHashCode();
                if (this.CarrierDamagedQuantity != null)
                    hashCode = hashCode * 59 + this.CarrierDamagedQuantity.GetHashCode();
                if (this.DefectiveQuantity != null)
                    hashCode = hashCode * 59 + this.DefectiveQuantity.GetHashCode();
                if (this.ExpiredQuantity != null)
                    hashCode = hashCode * 59 + this.ExpiredQuantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
