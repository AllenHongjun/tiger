/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances
{
    /// <summary>
    /// An item in an adjustment to the seller&#39;s account.
    /// </summary>
    [DataContract]
    public partial class AdjustmentItem : IEquatable<AdjustmentItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdjustmentItem" /> class.
        /// </summary>
        /// <param name="Quantity">Represents the number of units in the seller&#39;s inventory when the AdustmentType is FBAInventoryReimbursement..</param>
        /// <param name="PerUnitAmount">The per unit value of the item..</param>
        /// <param name="TotalAmount">The total value of the item..</param>
        /// <param name="SellerSKU">The seller SKU of the item. The seller SKU is qualified by the seller&#39;s seller ID, which is included with every call to the Selling Partner API..</param>
        /// <param name="FnSKU">A unique identifier assigned to products stored in and fulfilled from a fulfillment center..</param>
        /// <param name="ProductDescription">A short description of the item..</param>
        /// <param name="ASIN">The Amazon Standard Identification Number (ASIN) of the item..</param>
        public AdjustmentItem(string Quantity = default(string), Currency PerUnitAmount = default(Currency), Currency TotalAmount = default(Currency), string SellerSKU = default(string), string FnSKU = default(string), string ProductDescription = default(string), string ASIN = default(string))
        {
            this.Quantity = Quantity;
            this.PerUnitAmount = PerUnitAmount;
            this.TotalAmount = TotalAmount;
            this.SellerSKU = SellerSKU;
            this.FnSKU = FnSKU;
            this.ProductDescription = ProductDescription;
            this.ASIN = ASIN;
        }

        /// <summary>
        /// Represents the number of units in the seller&#39;s inventory when the AdustmentType is FBAInventoryReimbursement.
        /// </summary>
        /// <value>Represents the number of units in the seller&#39;s inventory when the AdustmentType is FBAInventoryReimbursement.</value>
        [DataMember(Name = "Quantity", EmitDefaultValue = false)]
        public string Quantity { get; set; }

        /// <summary>
        /// The per unit value of the item.
        /// </summary>
        /// <value>The per unit value of the item.</value>
        [DataMember(Name = "PerUnitAmount", EmitDefaultValue = false)]
        public Currency PerUnitAmount { get; set; }

        /// <summary>
        /// The total value of the item.
        /// </summary>
        /// <value>The total value of the item.</value>
        [DataMember(Name = "TotalAmount", EmitDefaultValue = false)]
        public Currency TotalAmount { get; set; }

        /// <summary>
        /// The seller SKU of the item. The seller SKU is qualified by the seller&#39;s seller ID, which is included with every call to the Selling Partner API.
        /// </summary>
        /// <value>The seller SKU of the item. The seller SKU is qualified by the seller&#39;s seller ID, which is included with every call to the Selling Partner API.</value>
        [DataMember(Name = "SellerSKU", EmitDefaultValue = false)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// A unique identifier assigned to products stored in and fulfilled from a fulfillment center.
        /// </summary>
        /// <value>A unique identifier assigned to products stored in and fulfilled from a fulfillment center.</value>
        [DataMember(Name = "FnSKU", EmitDefaultValue = false)]
        public string FnSKU { get; set; }

        /// <summary>
        /// A short description of the item.
        /// </summary>
        /// <value>A short description of the item.</value>
        [DataMember(Name = "ProductDescription", EmitDefaultValue = false)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "ASIN", EmitDefaultValue = false)]
        public string ASIN { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdjustmentItem {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  PerUnitAmount: ").Append(PerUnitAmount).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("  FnSKU: ").Append(FnSKU).Append("\n");
            sb.Append("  ProductDescription: ").Append(ProductDescription).Append("\n");
            sb.Append("  ASIN: ").Append(ASIN).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdjustmentItem);
        }

        /// <summary>
        /// Returns true if AdjustmentItem instances are equal
        /// </summary>
        /// <param name="input">Instance of AdjustmentItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdjustmentItem input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) &&
                (
                    this.PerUnitAmount == input.PerUnitAmount ||
                    (this.PerUnitAmount != null &&
                    this.PerUnitAmount.Equals(input.PerUnitAmount))
                ) &&
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) &&
                (
                    this.SellerSKU == input.SellerSKU ||
                    (this.SellerSKU != null &&
                    this.SellerSKU.Equals(input.SellerSKU))
                ) &&
                (
                    this.FnSKU == input.FnSKU ||
                    (this.FnSKU != null &&
                    this.FnSKU.Equals(input.FnSKU))
                ) &&
                (
                    this.ProductDescription == input.ProductDescription ||
                    (this.ProductDescription != null &&
                    this.ProductDescription.Equals(input.ProductDescription))
                ) &&
                (
                    this.ASIN == input.ASIN ||
                    (this.ASIN != null &&
                    this.ASIN.Equals(input.ASIN))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.PerUnitAmount != null)
                    hashCode = hashCode * 59 + this.PerUnitAmount.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                if (this.SellerSKU != null)
                    hashCode = hashCode * 59 + this.SellerSKU.GetHashCode();
                if (this.FnSKU != null)
                    hashCode = hashCode * 59 + this.FnSKU.GetHashCode();
                if (this.ProductDescription != null)
                    hashCode = hashCode * 59 + this.ProductDescription.GetHashCode();
                if (this.ASIN != null)
                    hashCode = hashCode * 59 + this.ASIN.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
