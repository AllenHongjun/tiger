/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances
{
    /// <summary>
    /// A payment made directly to a seller.
    /// </summary>
    [DataContract]
    public partial class DirectPayment : IEquatable<DirectPayment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DirectPayment" /> class.
        /// </summary>
        /// <param name="DirectPaymentType">The type of payment.  Possible values:  * StoredValueCardRevenue - The amount that is deducted from the seller&#39;s account because the seller received money through a stored value card.  * StoredValueCardRefund - The amount that Amazon returns to the seller if the order that is bought using a stored value card is refunded.  * PrivateLabelCreditCardRevenue - The amount that is deducted from the seller&#39;s account because the seller received money through a private label credit card offered by Amazon.  * PrivateLabelCreditCardRefund - The amount that Amazon returns to the seller if the order that is bought using a private label credit card offered by Amazon is refunded.  * CollectOnDeliveryRevenue - The COD amount that the seller collected directly from the buyer.  * CollectOnDeliveryRefund - The amount that Amazon refunds to the buyer if an order paid for by COD is refunded..</param>
        /// <param name="DirectPaymentAmount">The amount of the direct payment..</param>
        public DirectPayment(string DirectPaymentType = default(string), Currency DirectPaymentAmount = default(Currency))
        {
            this.DirectPaymentType = DirectPaymentType;
            this.DirectPaymentAmount = DirectPaymentAmount;
        }

        /// <summary>
        /// The type of payment.  Possible values:  * StoredValueCardRevenue - The amount that is deducted from the seller&#39;s account because the seller received money through a stored value card.  * StoredValueCardRefund - The amount that Amazon returns to the seller if the order that is bought using a stored value card is refunded.  * PrivateLabelCreditCardRevenue - The amount that is deducted from the seller&#39;s account because the seller received money through a private label credit card offered by Amazon.  * PrivateLabelCreditCardRefund - The amount that Amazon returns to the seller if the order that is bought using a private label credit card offered by Amazon is refunded.  * CollectOnDeliveryRevenue - The COD amount that the seller collected directly from the buyer.  * CollectOnDeliveryRefund - The amount that Amazon refunds to the buyer if an order paid for by COD is refunded.
        /// </summary>
        /// <value>The type of payment.  Possible values:  * StoredValueCardRevenue - The amount that is deducted from the seller&#39;s account because the seller received money through a stored value card.  * StoredValueCardRefund - The amount that Amazon returns to the seller if the order that is bought using a stored value card is refunded.  * PrivateLabelCreditCardRevenue - The amount that is deducted from the seller&#39;s account because the seller received money through a private label credit card offered by Amazon.  * PrivateLabelCreditCardRefund - The amount that Amazon returns to the seller if the order that is bought using a private label credit card offered by Amazon is refunded.  * CollectOnDeliveryRevenue - The COD amount that the seller collected directly from the buyer.  * CollectOnDeliveryRefund - The amount that Amazon refunds to the buyer if an order paid for by COD is refunded.</value>
        [DataMember(Name = "DirectPaymentType", EmitDefaultValue = false)]
        public string DirectPaymentType { get; set; }

        /// <summary>
        /// The amount of the direct payment.
        /// </summary>
        /// <value>The amount of the direct payment.</value>
        [DataMember(Name = "DirectPaymentAmount", EmitDefaultValue = false)]
        public Currency DirectPaymentAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DirectPayment {\n");
            sb.Append("  DirectPaymentType: ").Append(DirectPaymentType).Append("\n");
            sb.Append("  DirectPaymentAmount: ").Append(DirectPaymentAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DirectPayment);
        }

        /// <summary>
        /// Returns true if DirectPayment instances are equal
        /// </summary>
        /// <param name="input">Instance of DirectPayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DirectPayment input)
        {
            if (input == null)
                return false;

            return
                (
                    this.DirectPaymentType == input.DirectPaymentType ||
                    (this.DirectPaymentType != null &&
                    this.DirectPaymentType.Equals(input.DirectPaymentType))
                ) &&
                (
                    this.DirectPaymentAmount == input.DirectPaymentAmount ||
                    (this.DirectPaymentAmount != null &&
                    this.DirectPaymentAmount.Equals(input.DirectPaymentAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DirectPaymentType != null)
                    hashCode = hashCode * 59 + this.DirectPaymentType.GetHashCode();
                if (this.DirectPaymentAmount != null)
                    hashCode = hashCode * 59 + this.DirectPaymentAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
