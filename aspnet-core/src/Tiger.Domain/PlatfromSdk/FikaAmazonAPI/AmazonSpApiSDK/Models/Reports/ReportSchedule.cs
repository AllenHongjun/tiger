/* 
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2020-09-04
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Reports
{
    /// <summary>
    /// Detailed information about a report schedule.
    /// </summary>
    [DataContract]
    public partial class ReportSchedule : IEquatable<ReportSchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportSchedule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ReportSchedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportSchedule" /> class.
        /// </summary>
        /// <param name="ReportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID. (required).</param>
        /// <param name="ReportType">The report type. (required).</param>
        /// <param name="MarketplaceIds">A list of marketplace identifiers. The report document&#39;s contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise..</param>
        /// <param name="ReportOptions">ReportOptions.</param>
        /// <param name="Period">An ISO 8601 period value that indicates how often a report should be created. (required).</param>
        /// <param name="NextReportCreationTime">The date and time when the schedule will create its next report, in ISO 8601 date time format..</param>
        public ReportSchedule(string ReportScheduleId = default(string), string ReportType = default(string), List<string> MarketplaceIds = default(List<string>), ReportOptions ReportOptions = default(ReportOptions), string Period = default(string), DateTime? NextReportCreationTime = default(DateTime?))
        {
            // to ensure "ReportScheduleId" is required (not null)
            if (ReportScheduleId == null)
            {
                throw new InvalidDataException("ReportScheduleId is a required property for ReportSchedule and cannot be null");
            }
            else
            {
                this.ReportScheduleId = ReportScheduleId;
            }
            // to ensure "ReportType" is required (not null)
            if (ReportType == null)
            {
                throw new InvalidDataException("ReportType is a required property for ReportSchedule and cannot be null");
            }
            else
            {
                this.ReportType = ReportType;
            }
            // to ensure "Period" is required (not null)
            if (Period == null)
            {
                throw new InvalidDataException("Period is a required property for ReportSchedule and cannot be null");
            }
            else
            {
                this.Period = Period;
            }
            this.MarketplaceIds = MarketplaceIds;
            this.ReportOptions = ReportOptions;
            this.NextReportCreationTime = NextReportCreationTime;
        }

        /// <summary>
        /// The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name = "reportScheduleId", EmitDefaultValue = false)]
        public string ReportScheduleId { get; set; }

        /// <summary>
        /// The report type.
        /// </summary>
        /// <value>The report type.</value>
        [DataMember(Name = "reportType", EmitDefaultValue = false)]
        public string ReportType { get; set; }

        /// <summary>
        /// A list of marketplace identifiers. The report document&#39;s contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.
        /// </summary>
        /// <value>A list of marketplace identifiers. The report document&#39;s contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.</value>
        [DataMember(Name = "marketplaceIds", EmitDefaultValue = false)]
        public List<string> MarketplaceIds { get; set; }

        /// <summary>
        /// Gets or Sets ReportOptions
        /// </summary>
        [DataMember(Name = "reportOptions", EmitDefaultValue = false)]
        public ReportOptions ReportOptions { get; set; }

        /// <summary>
        /// An ISO 8601 period value that indicates how often a report should be created.
        /// </summary>
        /// <value>An ISO 8601 period value that indicates how often a report should be created.</value>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public string Period { get; set; }

        /// <summary>
        /// The date and time when the schedule will create its next report, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when the schedule will create its next report, in ISO 8601 date time format.</value>
        [DataMember(Name = "nextReportCreationTime", EmitDefaultValue = false)]
        public DateTime? NextReportCreationTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportSchedule {\n");
            sb.Append("  ReportScheduleId: ").Append(ReportScheduleId).Append("\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  MarketplaceIds: ").Append(MarketplaceIds).Append("\n");
            sb.Append("  ReportOptions: ").Append(ReportOptions).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  NextReportCreationTime: ").Append(NextReportCreationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportSchedule);
        }

        /// <summary>
        /// Returns true if ReportSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportSchedule input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ReportScheduleId == input.ReportScheduleId ||
                    (this.ReportScheduleId != null &&
                    this.ReportScheduleId.Equals(input.ReportScheduleId))
                ) &&
                (
                    this.ReportType == input.ReportType ||
                    (this.ReportType != null &&
                    this.ReportType.Equals(input.ReportType))
                ) &&
                (
                    this.MarketplaceIds == input.MarketplaceIds ||
                    this.MarketplaceIds != null &&
                    this.MarketplaceIds.SequenceEqual(input.MarketplaceIds)
                ) &&
                (
                    this.ReportOptions == input.ReportOptions ||
                    (this.ReportOptions != null &&
                    this.ReportOptions.Equals(input.ReportOptions))
                ) &&
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) &&
                (
                    this.NextReportCreationTime == input.NextReportCreationTime ||
                    (this.NextReportCreationTime != null &&
                    this.NextReportCreationTime.Equals(input.NextReportCreationTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReportScheduleId != null)
                    hashCode = hashCode * 59 + this.ReportScheduleId.GetHashCode();
                if (this.ReportType != null)
                    hashCode = hashCode * 59 + this.ReportType.GetHashCode();
                if (this.MarketplaceIds != null)
                    hashCode = hashCode * 59 + this.MarketplaceIds.GetHashCode();
                if (this.ReportOptions != null)
                    hashCode = hashCode * 59 + this.ReportOptions.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.NextReportCreationTime != null)
                    hashCode = hashCode * 59 + this.NextReportCreationTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
