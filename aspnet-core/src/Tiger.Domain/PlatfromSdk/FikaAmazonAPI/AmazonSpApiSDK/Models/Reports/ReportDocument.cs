/* 
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2020-09-04
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Reports
{
    /// <summary>
    /// ReportDocument
    /// </summary>
    [DataContract]
    public partial class ReportDocument : IEquatable<ReportDocument>, IValidatableObject
    {
        /// <summary>
        /// If present, the report document contents have been compressed with the provided algorithm.
        /// </summary>
        /// <value>If present, the report document contents have been compressed with the provided algorithm.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CompressionAlgorithmEnum
        {

            /// <summary>
            /// Enum GZIP for value: GZIP
            /// </summary>
            [EnumMember(Value = "GZIP")]
            GZIP = 1
        }

        /// <summary>
        /// If present, the report document contents have been compressed with the provided algorithm.
        /// </summary>
        /// <value>If present, the report document contents have been compressed with the provided algorithm.</value>
        [DataMember(Name = "compressionAlgorithm", EmitDefaultValue = false)]
        public CompressionAlgorithmEnum? CompressionAlgorithm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ReportDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportDocument" /> class.
        /// </summary>
        /// <param name="ReportDocumentId">The identifier for the report document. This identifier is unique only in combination with a seller ID. (required).</param>
        /// <param name="Url">A presigned URL for the report document. This URL expires after 5 minutes. (required).</param>
        /// <param name="EncryptionDetails">EncryptionDetails (required).</param>
        /// <param name="CompressionAlgorithm">If present, the report document contents have been compressed with the provided algorithm..</param>
        public ReportDocument(string ReportDocumentId = default(string), string Url = default(string), ReportDocumentEncryptionDetails EncryptionDetails = default(ReportDocumentEncryptionDetails), CompressionAlgorithmEnum? CompressionAlgorithm = default(CompressionAlgorithmEnum?))
        {
            // to ensure "ReportDocumentId" is required (not null)
            if (ReportDocumentId == null)
            {
                throw new InvalidDataException("ReportDocumentId is a required property for ReportDocument and cannot be null");
            }
            else
            {
                this.ReportDocumentId = ReportDocumentId;
            }
            // to ensure "Url" is required (not null)
            if (Url == null)
            {
                throw new InvalidDataException("Url is a required property for ReportDocument and cannot be null");
            }
            else
            {
                this.Url = Url;
            }
            // to ensure "EncryptionDetails" is required (not null)
            if (EncryptionDetails == null)
            {
                throw new InvalidDataException("EncryptionDetails is a required property for ReportDocument and cannot be null");
            }
            else
            {
                this.EncryptionDetails = EncryptionDetails;
            }
            this.CompressionAlgorithm = CompressionAlgorithm;
        }

        /// <summary>
        /// The identifier for the report document. This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier for the report document. This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name = "reportDocumentId", EmitDefaultValue = false)]
        public string ReportDocumentId { get; set; }

        /// <summary>
        /// A presigned URL for the report document. This URL expires after 5 minutes.
        /// </summary>
        /// <value>A presigned URL for the report document. This URL expires after 5 minutes.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets EncryptionDetails
        /// </summary>
        [DataMember(Name = "encryptionDetails", EmitDefaultValue = false)]
        public ReportDocumentEncryptionDetails EncryptionDetails { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportDocument {\n");
            sb.Append("  ReportDocumentId: ").Append(ReportDocumentId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  EncryptionDetails: ").Append(EncryptionDetails).Append("\n");
            sb.Append("  CompressionAlgorithm: ").Append(CompressionAlgorithm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportDocument);
        }

        /// <summary>
        /// Returns true if ReportDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportDocument input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ReportDocumentId == input.ReportDocumentId ||
                    (this.ReportDocumentId != null &&
                    this.ReportDocumentId.Equals(input.ReportDocumentId))
                ) &&
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) &&
                (
                    this.EncryptionDetails == input.EncryptionDetails ||
                    (this.EncryptionDetails != null &&
                    this.EncryptionDetails.Equals(input.EncryptionDetails))
                ) &&
                (
                    this.CompressionAlgorithm == input.CompressionAlgorithm ||
                    (this.CompressionAlgorithm != null &&
                    this.CompressionAlgorithm.Equals(input.CompressionAlgorithm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReportDocumentId != null)
                    hashCode = hashCode * 59 + this.ReportDocumentId.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.EncryptionDetails != null)
                    hashCode = hashCode * 59 + this.EncryptionDetails.GetHashCode();
                if (this.CompressionAlgorithm != null)
                    hashCode = hashCode * 59 + this.CompressionAlgorithm.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
