/* 
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ProductFees
{
    /// <summary>
    /// Price information for an item, used to estimate fees.
    /// </summary>
    [DataContract]
    public partial class PriceToEstimateFees : IEquatable<PriceToEstimateFees>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceToEstimateFees" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PriceToEstimateFees() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceToEstimateFees" /> class.
        /// </summary>
        /// <param name="ListingPrice">The price of the item. (required).</param>
        /// <param name="Shipping">The shipping cost..</param>
        /// <param name="Points">The number of Amazon Points offered with the purchase of an item..</param>
        public PriceToEstimateFees(MoneyType ListingPrice = default(MoneyType), MoneyType Shipping = default(MoneyType), Points Points = default(Points))
        {
            // to ensure "ListingPrice" is required (not null)
            if (ListingPrice == null)
            {
                throw new InvalidDataException("ListingPrice is a required property for PriceToEstimateFees and cannot be null");
            }
            else
            {
                this.ListingPrice = ListingPrice;
            }
            this.Shipping = Shipping;
            this.Points = Points;
        }

        /// <summary>
        /// The price of the item.
        /// </summary>
        /// <value>The price of the item.</value>
        [DataMember(Name = "ListingPrice", EmitDefaultValue = false)]
        public MoneyType ListingPrice { get; set; }

        /// <summary>
        /// The shipping cost.
        /// </summary>
        /// <value>The shipping cost.</value>
        [DataMember(Name = "Shipping", EmitDefaultValue = false)]
        public MoneyType Shipping { get; set; }

        /// <summary>
        /// The number of Amazon Points offered with the purchase of an item.
        /// </summary>
        /// <value>The number of Amazon Points offered with the purchase of an item.</value>
        [DataMember(Name = "Points", EmitDefaultValue = false)]
        public Points Points { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceToEstimateFees {\n");
            sb.Append("  ListingPrice: ").Append(ListingPrice).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriceToEstimateFees);
        }

        /// <summary>
        /// Returns true if PriceToEstimateFees instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceToEstimateFees to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceToEstimateFees input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ListingPrice == input.ListingPrice ||
                    (this.ListingPrice != null &&
                    this.ListingPrice.Equals(input.ListingPrice))
                ) &&
                (
                    this.Shipping == input.Shipping ||
                    (this.Shipping != null &&
                    this.Shipping.Equals(input.Shipping))
                ) &&
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ListingPrice != null)
                    hashCode = hashCode * 59 + this.ListingPrice.GetHashCode();
                if (this.Shipping != null)
                    hashCode = hashCode * 59 + this.Shipping.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
