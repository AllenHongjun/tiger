/* 
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ProductFees
{
    /// <summary>
    /// An item identifier and the estimated fees for the item.
    /// </summary>
    [DataContract]
    public partial class FeesEstimateResult : IEquatable<FeesEstimateResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeesEstimateResult" /> class.
        /// </summary>
        /// <param name="Status">The status of the fee request. Possible values: Success, ClientError, ServiceError..</param>
        /// <param name="FeesEstimateIdentifier">Information used to identify a fees estimate request..</param>
        /// <param name="FeesEstimate">The total estimated fees for an item and a list of details..</param>
        /// <param name="Error">An error object with a type, code, and message..</param>
        public FeesEstimateResult(string Status = default(string), FeesEstimateIdentifier FeesEstimateIdentifier = default(FeesEstimateIdentifier), FeesEstimate FeesEstimate = default(FeesEstimate), FeesEstimateError Error = default(FeesEstimateError))
        {
            this.Status = Status;
            this.FeesEstimateIdentifier = FeesEstimateIdentifier;
            this.FeesEstimate = FeesEstimate;
            this.Error = Error;
        }

        /// <summary>
        /// The status of the fee request. Possible values: Success, ClientError, ServiceError.
        /// </summary>
        /// <value>The status of the fee request. Possible values: Success, ClientError, ServiceError.</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Information used to identify a fees estimate request.
        /// </summary>
        /// <value>Information used to identify a fees estimate request.</value>
        [DataMember(Name = "FeesEstimateIdentifier", EmitDefaultValue = false)]
        public FeesEstimateIdentifier FeesEstimateIdentifier { get; set; }

        /// <summary>
        /// The total estimated fees for an item and a list of details.
        /// </summary>
        /// <value>The total estimated fees for an item and a list of details.</value>
        [DataMember(Name = "FeesEstimate", EmitDefaultValue = false)]
        public FeesEstimate FeesEstimate { get; set; }

        /// <summary>
        /// An error object with a type, code, and message.
        /// </summary>
        /// <value>An error object with a type, code, and message.</value>
        [DataMember(Name = "Error", EmitDefaultValue = false)]
        public FeesEstimateError Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeesEstimateResult {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FeesEstimateIdentifier: ").Append(FeesEstimateIdentifier).Append("\n");
            sb.Append("  FeesEstimate: ").Append(FeesEstimate).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeesEstimateResult);
        }

        /// <summary>
        /// Returns true if FeesEstimateResult instances are equal
        /// </summary>
        /// <param name="input">Instance of FeesEstimateResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeesEstimateResult input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) &&
                (
                    this.FeesEstimateIdentifier == input.FeesEstimateIdentifier ||
                    (this.FeesEstimateIdentifier != null &&
                    this.FeesEstimateIdentifier.Equals(input.FeesEstimateIdentifier))
                ) &&
                (
                    this.FeesEstimate == input.FeesEstimate ||
                    (this.FeesEstimate != null &&
                    this.FeesEstimate.Equals(input.FeesEstimate))
                ) &&
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.FeesEstimateIdentifier != null)
                    hashCode = hashCode * 59 + this.FeesEstimateIdentifier.GetHashCode();
                if (this.FeesEstimate != null)
                    hashCode = hashCode * 59 + this.FeesEstimate.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
