/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ProductPricing
{
    /// <summary>
    /// OfferType
    /// </summary>
    [DataContract]
    public partial class OfferType : IEquatable<OfferType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public OfferType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferType" /> class.
        /// </summary>
        /// <param name="BuyingPrice">Contains pricing information that includes promotions and contains the shipping cost. (required).</param>
        /// <param name="RegularPrice">The current price excluding any promotions that apply to the product. Excludes the shipping cost. (required).</param>
        /// <param name="FulfillmentChannel">The fulfillment channel for the offer listing. Possible values:  * Amazon - Fulfilled by Amazon. * Merchant - Fulfilled by the seller. (required).</param>
        /// <param name="ItemCondition">The item condition for the offer listing. Possible values: New, Used, Collectible, Refurbished, or Club. (required).</param>
        /// <param name="ItemSubCondition">The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other. (required).</param>
        /// <param name="SellerSKU">The seller stock keeping unit (SKU) of the item. (required).</param>
        public OfferType(PriceType BuyingPrice = default(PriceType), MoneyType RegularPrice = default(MoneyType), string FulfillmentChannel = default(string), string ItemCondition = default(string), string ItemSubCondition = default(string), string SellerSKU = default(string))
        {
            // to ensure "BuyingPrice" is required (not null)
            if (BuyingPrice == null)
            {
                throw new InvalidDataException("BuyingPrice is a required property for OfferType and cannot be null");
            }
            else
            {
                this.BuyingPrice = BuyingPrice;
            }
            // to ensure "RegularPrice" is required (not null)
            if (RegularPrice == null)
            {
                throw new InvalidDataException("RegularPrice is a required property for OfferType and cannot be null");
            }
            else
            {
                this.RegularPrice = RegularPrice;
            }
            // to ensure "FulfillmentChannel" is required (not null)
            if (FulfillmentChannel == null)
            {
                throw new InvalidDataException("FulfillmentChannel is a required property for OfferType and cannot be null");
            }
            else
            {
                this.FulfillmentChannel = FulfillmentChannel;
            }
            // to ensure "ItemCondition" is required (not null)
            if (ItemCondition == null)
            {
                throw new InvalidDataException("ItemCondition is a required property for OfferType and cannot be null");
            }
            else
            {
                this.ItemCondition = ItemCondition;
            }
            // to ensure "ItemSubCondition" is required (not null)
            if (ItemSubCondition == null)
            {
                throw new InvalidDataException("ItemSubCondition is a required property for OfferType and cannot be null");
            }
            else
            {
                this.ItemSubCondition = ItemSubCondition;
            }
            // to ensure "SellerSKU" is required (not null)
            if (SellerSKU == null)
            {
                throw new InvalidDataException("SellerSKU is a required property for OfferType and cannot be null");
            }
            else
            {
                this.SellerSKU = SellerSKU;
            }
        }

        /// <summary>
        /// Contains pricing information that includes promotions and contains the shipping cost.
        /// </summary>
        /// <value>Contains pricing information that includes promotions and contains the shipping cost.</value>
        [DataMember(Name = "BuyingPrice", EmitDefaultValue = false)]
        public PriceType BuyingPrice { get; set; }

        /// <summary>
        /// The current price excluding any promotions that apply to the product. Excludes the shipping cost.
        /// </summary>
        /// <value>The current price excluding any promotions that apply to the product. Excludes the shipping cost.</value>
        [DataMember(Name = "RegularPrice", EmitDefaultValue = false)]
        public MoneyType RegularPrice { get; set; }

        /// <summary>
        /// The fulfillment channel for the offer listing. Possible values:  * Amazon - Fulfilled by Amazon. * Merchant - Fulfilled by the seller.
        /// </summary>
        /// <value>The fulfillment channel for the offer listing. Possible values:  * Amazon - Fulfilled by Amazon. * Merchant - Fulfilled by the seller.</value>
        [DataMember(Name = "FulfillmentChannel", EmitDefaultValue = false)]
        public string FulfillmentChannel { get; set; }

        /// <summary>
        /// The item condition for the offer listing. Possible values: New, Used, Collectible, Refurbished, or Club.
        /// </summary>
        /// <value>The item condition for the offer listing. Possible values: New, Used, Collectible, Refurbished, or Club.</value>
        [DataMember(Name = "ItemCondition", EmitDefaultValue = false)]
        public string ItemCondition { get; set; }

        /// <summary>
        /// The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
        /// </summary>
        /// <value>The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.</value>
        [DataMember(Name = "ItemSubCondition", EmitDefaultValue = false)]
        public string ItemSubCondition { get; set; }

        /// <summary>
        /// The seller stock keeping unit (SKU) of the item.
        /// </summary>
        /// <value>The seller stock keeping unit (SKU) of the item.</value>
        [DataMember(Name = "SellerSKU", EmitDefaultValue = false)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferType {\n");
            sb.Append("  BuyingPrice: ").Append(BuyingPrice).Append("\n");
            sb.Append("  RegularPrice: ").Append(RegularPrice).Append("\n");
            sb.Append("  FulfillmentChannel: ").Append(FulfillmentChannel).Append("\n");
            sb.Append("  ItemCondition: ").Append(ItemCondition).Append("\n");
            sb.Append("  ItemSubCondition: ").Append(ItemSubCondition).Append("\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OfferType);
        }

        /// <summary>
        /// Returns true if OfferType instances are equal
        /// </summary>
        /// <param name="input">Instance of OfferType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferType input)
        {
            if (input == null)
                return false;

            return
                (
                    this.BuyingPrice == input.BuyingPrice ||
                    (this.BuyingPrice != null &&
                    this.BuyingPrice.Equals(input.BuyingPrice))
                ) &&
                (
                    this.RegularPrice == input.RegularPrice ||
                    (this.RegularPrice != null &&
                    this.RegularPrice.Equals(input.RegularPrice))
                ) &&
                (
                    this.FulfillmentChannel == input.FulfillmentChannel ||
                    (this.FulfillmentChannel != null &&
                    this.FulfillmentChannel.Equals(input.FulfillmentChannel))
                ) &&
                (
                    this.ItemCondition == input.ItemCondition ||
                    (this.ItemCondition != null &&
                    this.ItemCondition.Equals(input.ItemCondition))
                ) &&
                (
                    this.ItemSubCondition == input.ItemSubCondition ||
                    (this.ItemSubCondition != null &&
                    this.ItemSubCondition.Equals(input.ItemSubCondition))
                ) &&
                (
                    this.SellerSKU == input.SellerSKU ||
                    (this.SellerSKU != null &&
                    this.SellerSKU.Equals(input.SellerSKU))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuyingPrice != null)
                    hashCode = hashCode * 59 + this.BuyingPrice.GetHashCode();
                if (this.RegularPrice != null)
                    hashCode = hashCode * 59 + this.RegularPrice.GetHashCode();
                if (this.FulfillmentChannel != null)
                    hashCode = hashCode * 59 + this.FulfillmentChannel.GetHashCode();
                if (this.ItemCondition != null)
                    hashCode = hashCode * 59 + this.ItemCondition.GetHashCode();
                if (this.ItemSubCondition != null)
                    hashCode = hashCode * 59 + this.ItemSubCondition.GetHashCode();
                if (this.SellerSKU != null)
                    hashCode = hashCode * 59 + this.SellerSKU.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
