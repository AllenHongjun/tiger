/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    /// Inbound shipment information used to create and update inbound shipments.
    /// </summary>
    [DataContract]
    public partial class InboundShipmentHeader : IEquatable<InboundShipmentHeader>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ShipmentStatus
        /// </summary>
        [DataMember(Name = "ShipmentStatus", EmitDefaultValue = false)]
        public ShipmentStatus ShipmentStatus { get; set; }
        /// <summary>
        /// The preference for label preparation for an inbound shipment.
        /// </summary>
        /// <value>The preference for label preparation for an inbound shipment.</value>
        [DataMember(Name = "LabelPrepPreference", EmitDefaultValue = false)]
        public LabelPrepPreference LabelPrepPreference { get; set; }
        /// <summary>
        /// Gets or Sets IntendedBoxContentsSource
        /// </summary>
        [DataMember(Name = "IntendedBoxContentsSource", EmitDefaultValue = false)]
        public IntendedBoxContentsSource? IntendedBoxContentsSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundShipmentHeader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public InboundShipmentHeader() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundShipmentHeader" /> class.
        /// </summary>
        /// <param name="ShipmentName">The name for the shipment. Use a naming convention that helps distinguish between shipments over time, such as the date the shipment was created. (required).</param>
        /// <param name="ShipFromAddress">The return address. (required).</param>
        /// <param name="DestinationFulfillmentCenterId">The identifier for the fulfillment center to which the shipment will be shipped. Get this value from the InboundShipmentPlan object in the response returned by the createInboundShipmentPlan operation. (required).</param>
        /// <param name="AreCasesRequired">Indicates whether or not an inbound shipment contains case-packed boxes. Note: A shipment must contain either all case-packed boxes or all individually packed boxes.  Possible values:  true - All boxes in the shipment must be case packed.  false - All boxes in the shipment must be individually packed.  Note: If AreCasesRequired &#x3D; true for an inbound shipment, then the value of QuantityInCase must be greater than zero for every item in the shipment. Otherwise the service returns an error..</param>
        /// <param name="ShipmentStatus">ShipmentStatus (required).</param>
        /// <param name="LabelPrepPreference">The preference for label preparation for an inbound shipment. (required).</param>
        /// <param name="IntendedBoxContentsSource">IntendedBoxContentsSource.</param>
        public InboundShipmentHeader(string ShipmentName = default(string), Address ShipFromAddress = default(Address), string DestinationFulfillmentCenterId = default(string), bool? AreCasesRequired = default(bool?), ShipmentStatus ShipmentStatus = default(ShipmentStatus), LabelPrepPreference LabelPrepPreference = default(LabelPrepPreference), IntendedBoxContentsSource? IntendedBoxContentsSource = default(IntendedBoxContentsSource?))
        {
            // to ensure "ShipmentName" is required (not null)
            if (ShipmentName == null)
            {
                throw new InvalidDataException("ShipmentName is a required property for InboundShipmentHeader and cannot be null");
            }
            else
            {
                this.ShipmentName = ShipmentName;
            }
            // to ensure "ShipFromAddress" is required (not null)
            if (ShipFromAddress == null)
            {
                throw new InvalidDataException("ShipFromAddress is a required property for InboundShipmentHeader and cannot be null");
            }
            else
            {
                this.ShipFromAddress = ShipFromAddress;
            }
            // to ensure "DestinationFulfillmentCenterId" is required (not null)
            if (DestinationFulfillmentCenterId == null)
            {
                throw new InvalidDataException("DestinationFulfillmentCenterId is a required property for InboundShipmentHeader and cannot be null");
            }
            else
            {
                this.DestinationFulfillmentCenterId = DestinationFulfillmentCenterId;
            }
            // to ensure "ShipmentStatus" is required (not null)
            if (ShipmentStatus == null)
            {
                throw new InvalidDataException("ShipmentStatus is a required property for InboundShipmentHeader and cannot be null");
            }
            else
            {
                this.ShipmentStatus = ShipmentStatus;
            }
            // to ensure "LabelPrepPreference" is required (not null)
            if (LabelPrepPreference == null)
            {
                throw new InvalidDataException("LabelPrepPreference is a required property for InboundShipmentHeader and cannot be null");
            }
            else
            {
                this.LabelPrepPreference = LabelPrepPreference;
            }
            this.AreCasesRequired = AreCasesRequired;
            this.IntendedBoxContentsSource = IntendedBoxContentsSource;
        }

        /// <summary>
        /// The name for the shipment. Use a naming convention that helps distinguish between shipments over time, such as the date the shipment was created.
        /// </summary>
        /// <value>The name for the shipment. Use a naming convention that helps distinguish between shipments over time, such as the date the shipment was created.</value>
        [DataMember(Name = "ShipmentName", EmitDefaultValue = false)]
        public string ShipmentName { get; set; }

        /// <summary>
        /// The return address.
        /// </summary>
        /// <value>The return address.</value>
        [DataMember(Name = "ShipFromAddress", EmitDefaultValue = false)]
        public Address ShipFromAddress { get; set; }

        /// <summary>
        /// The identifier for the fulfillment center to which the shipment will be shipped. Get this value from the InboundShipmentPlan object in the response returned by the createInboundShipmentPlan operation.
        /// </summary>
        /// <value>The identifier for the fulfillment center to which the shipment will be shipped. Get this value from the InboundShipmentPlan object in the response returned by the createInboundShipmentPlan operation.</value>
        [DataMember(Name = "DestinationFulfillmentCenterId", EmitDefaultValue = false)]
        public string DestinationFulfillmentCenterId { get; set; }

        /// <summary>
        /// Indicates whether or not an inbound shipment contains case-packed boxes. Note: A shipment must contain either all case-packed boxes or all individually packed boxes.  Possible values:  true - All boxes in the shipment must be case packed.  false - All boxes in the shipment must be individually packed.  Note: If AreCasesRequired &#x3D; true for an inbound shipment, then the value of QuantityInCase must be greater than zero for every item in the shipment. Otherwise the service returns an error.
        /// </summary>
        /// <value>Indicates whether or not an inbound shipment contains case-packed boxes. Note: A shipment must contain either all case-packed boxes or all individually packed boxes.  Possible values:  true - All boxes in the shipment must be case packed.  false - All boxes in the shipment must be individually packed.  Note: If AreCasesRequired &#x3D; true for an inbound shipment, then the value of QuantityInCase must be greater than zero for every item in the shipment. Otherwise the service returns an error.</value>
        [DataMember(Name = "AreCasesRequired", EmitDefaultValue = false)]
        public bool? AreCasesRequired { get; set; }




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundShipmentHeader {\n");
            sb.Append("  ShipmentName: ").Append(ShipmentName).Append("\n");
            sb.Append("  ShipFromAddress: ").Append(ShipFromAddress).Append("\n");
            sb.Append("  DestinationFulfillmentCenterId: ").Append(DestinationFulfillmentCenterId).Append("\n");
            sb.Append("  AreCasesRequired: ").Append(AreCasesRequired).Append("\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("  LabelPrepPreference: ").Append(LabelPrepPreference).Append("\n");
            sb.Append("  IntendedBoxContentsSource: ").Append(IntendedBoxContentsSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InboundShipmentHeader);
        }

        /// <summary>
        /// Returns true if InboundShipmentHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundShipmentHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundShipmentHeader input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ShipmentName == input.ShipmentName ||
                    (this.ShipmentName != null &&
                    this.ShipmentName.Equals(input.ShipmentName))
                ) &&
                (
                    this.ShipFromAddress == input.ShipFromAddress ||
                    (this.ShipFromAddress != null &&
                    this.ShipFromAddress.Equals(input.ShipFromAddress))
                ) &&
                (
                    this.DestinationFulfillmentCenterId == input.DestinationFulfillmentCenterId ||
                    (this.DestinationFulfillmentCenterId != null &&
                    this.DestinationFulfillmentCenterId.Equals(input.DestinationFulfillmentCenterId))
                ) &&
                (
                    this.AreCasesRequired == input.AreCasesRequired ||
                    (this.AreCasesRequired != null &&
                    this.AreCasesRequired.Equals(input.AreCasesRequired))
                ) &&
                (
                    this.ShipmentStatus == input.ShipmentStatus ||
                    (this.ShipmentStatus != null &&
                    this.ShipmentStatus.Equals(input.ShipmentStatus))
                ) &&
                (
                    this.LabelPrepPreference == input.LabelPrepPreference ||
                    (this.LabelPrepPreference != null &&
                    this.LabelPrepPreference.Equals(input.LabelPrepPreference))
                ) &&
                (
                    this.IntendedBoxContentsSource == input.IntendedBoxContentsSource ||
                    (this.IntendedBoxContentsSource != null &&
                    this.IntendedBoxContentsSource.Equals(input.IntendedBoxContentsSource))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipmentName != null)
                    hashCode = hashCode * 59 + this.ShipmentName.GetHashCode();
                if (this.ShipFromAddress != null)
                    hashCode = hashCode * 59 + this.ShipFromAddress.GetHashCode();
                if (this.DestinationFulfillmentCenterId != null)
                    hashCode = hashCode * 59 + this.DestinationFulfillmentCenterId.GetHashCode();
                if (this.AreCasesRequired != null)
                    hashCode = hashCode * 59 + this.AreCasesRequired.GetHashCode();
                if (this.ShipmentStatus != null)
                    hashCode = hashCode * 59 + this.ShipmentStatus.GetHashCode();
                if (this.LabelPrepPreference != null)
                    hashCode = hashCode * 59 + this.LabelPrepPreference.GetHashCode();
                if (this.IntendedBoxContentsSource != null)
                    hashCode = hashCode * 59 + this.IntendedBoxContentsSource.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
