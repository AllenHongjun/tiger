/* 
 * Selling Partner API for Feeds
 *
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * OpenAPI spec version: 2020-09-04
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Feeds
{
    /// <summary>
    /// Information required to encrypt and upload a feed document&#39;s contents.
    /// </summary>
    [DataContract]
    public partial class CreateFeedDocumentResult : IEquatable<CreateFeedDocumentResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFeedDocumentResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public CreateFeedDocumentResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFeedDocumentResult" /> class.
        /// </summary>
        /// <param name="FeedDocumentId">The identifier of the feed document. (required).</param>
        /// <param name="Url">The presigned URL for uploading the feed contents. This URL expires after 5 minutes. (required).</param>
        /// <param name="EncryptionDetails">EncryptionDetails (required).</param>
        public CreateFeedDocumentResult(string FeedDocumentId = default(string), string Url = default(string), FeedDocumentEncryptionDetails EncryptionDetails = default(FeedDocumentEncryptionDetails))
        {
            // to ensure "FeedDocumentId" is required (not null)
            if (FeedDocumentId == null)
            {
                throw new InvalidDataException("FeedDocumentId is a required property for CreateFeedDocumentResult and cannot be null");
            }
            else
            {
                this.FeedDocumentId = FeedDocumentId;
            }
            // to ensure "Url" is required (not null)
            if (Url == null)
            {
                throw new InvalidDataException("Url is a required property for CreateFeedDocumentResult and cannot be null");
            }
            else
            {
                this.Url = Url;
            }
            // to ensure "EncryptionDetails" is required (not null)
            if (EncryptionDetails == null)
            {
                throw new InvalidDataException("EncryptionDetails is a required property for CreateFeedDocumentResult and cannot be null");
            }
            else
            {
                this.EncryptionDetails = EncryptionDetails;
            }
        }

        /// <summary>
        /// The identifier of the feed document.
        /// </summary>
        /// <value>The identifier of the feed document.</value>
        [DataMember(Name = "feedDocumentId", EmitDefaultValue = false)]
        public string FeedDocumentId { get; set; }

        /// <summary>
        /// The presigned URL for uploading the feed contents. This URL expires after 5 minutes.
        /// </summary>
        /// <value>The presigned URL for uploading the feed contents. This URL expires after 5 minutes.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets EncryptionDetails
        /// </summary>
        [DataMember(Name = "encryptionDetails", EmitDefaultValue = false)]
        public FeedDocumentEncryptionDetails EncryptionDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateFeedDocumentResult {\n");
            sb.Append("  FeedDocumentId: ").Append(FeedDocumentId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  EncryptionDetails: ").Append(EncryptionDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateFeedDocumentResult);
        }

        /// <summary>
        /// Returns true if CreateFeedDocumentResult instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateFeedDocumentResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFeedDocumentResult input)
        {
            if (input == null)
                return false;

            return
                (
                    this.FeedDocumentId == input.FeedDocumentId ||
                    (this.FeedDocumentId != null &&
                    this.FeedDocumentId.Equals(input.FeedDocumentId))
                ) &&
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) &&
                (
                    this.EncryptionDetails == input.EncryptionDetails ||
                    (this.EncryptionDetails != null &&
                    this.EncryptionDetails.Equals(input.EncryptionDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeedDocumentId != null)
                    hashCode = hashCode * 59 + this.FeedDocumentId.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.EncryptionDetails != null)
                    hashCode = hashCode * 59 + this.EncryptionDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
