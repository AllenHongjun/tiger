/* 
 * Selling Partner API for Feeds
 *
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * OpenAPI spec version: 2020-09-04
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Feeds
{
    /// <summary>
    /// Feed
    /// </summary>
    [DataContract]
    public partial class Feed : IEquatable<Feed>, IValidatableObject
    {
        /// <summary>
        /// The processing status of the feed.
        /// </summary>
        /// <value>The processing status of the feed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingStatusEnum
        {

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 1,

            /// <summary>
            /// Enum DONE for value: DONE
            /// </summary>
            [EnumMember(Value = "DONE")]
            DONE = 2,

            /// <summary>
            /// Enum FATAL for value: FATAL
            /// </summary>
            [EnumMember(Value = "FATAL")]
            FATAL = 3,

            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 4,

            /// <summary>
            /// Enum INQUEUE for value: IN_QUEUE
            /// </summary>
            [EnumMember(Value = "IN_QUEUE")]
            INQUEUE = 5
        }

        /// <summary>
        /// The processing status of the feed.
        /// </summary>
        /// <value>The processing status of the feed.</value>
        [DataMember(Name = "processingStatus", EmitDefaultValue = false)]
        public ProcessingStatusEnum ProcessingStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Feed" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Feed() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Feed" /> class.
        /// </summary>
        /// <param name="FeedId">The identifier for the feed. This identifier is unique only in combination with a seller ID. (required).</param>
        /// <param name="FeedType">The feed type. (required).</param>
        /// <param name="MarketplaceIds">A list of identifiers for the marketplaces that the feed is applied to..</param>
        /// <param name="CreatedTime">The date and time when the feed was created, in ISO 8601 date time format. (required).</param>
        /// <param name="ProcessingStatus">The processing status of the feed. (required).</param>
        /// <param name="ProcessingStartTime">The date and time when feed processing started, in ISO 8601 date time format..</param>
        /// <param name="ProcessingEndTime">The date and time when feed processing completed, in ISO 8601 date time format..</param>
        /// <param name="ResultFeedDocumentId">The identifier for the feed document. This identifier is unique only in combination with a seller ID..</param>
        public Feed(string FeedId = default(string), string FeedType = default(string), List<string> MarketplaceIds = default(List<string>), DateTime? CreatedTime = default(DateTime?), ProcessingStatusEnum ProcessingStatus = default(ProcessingStatusEnum), DateTime? ProcessingStartTime = default(DateTime?), DateTime? ProcessingEndTime = default(DateTime?), string ResultFeedDocumentId = default(string))
        {
            // to ensure "FeedId" is required (not null)
            if (FeedId == null)
            {
                throw new InvalidDataException("FeedId is a required property for Feed and cannot be null");
            }
            else
            {
                this.FeedId = FeedId;
            }
            // to ensure "FeedType" is required (not null)
            if (FeedType == null)
            {
                throw new InvalidDataException("FeedType is a required property for Feed and cannot be null");
            }
            else
            {
                this.FeedType = FeedType;
            }
            // to ensure "CreatedTime" is required (not null)
            if (CreatedTime == null)
            {
                throw new InvalidDataException("CreatedTime is a required property for Feed and cannot be null");
            }
            else
            {
                this.CreatedTime = CreatedTime;
            }
            // to ensure "ProcessingStatus" is required (not null)
            if (ProcessingStatus == null)
            {
                throw new InvalidDataException("ProcessingStatus is a required property for Feed and cannot be null");
            }
            else
            {
                this.ProcessingStatus = ProcessingStatus;
            }
            this.MarketplaceIds = MarketplaceIds;
            this.ProcessingStartTime = ProcessingStartTime;
            this.ProcessingEndTime = ProcessingEndTime;
            this.ResultFeedDocumentId = ResultFeedDocumentId;
        }

        /// <summary>
        /// The identifier for the feed. This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier for the feed. This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name = "feedId", EmitDefaultValue = false)]
        public string FeedId { get; set; }

        /// <summary>
        /// The feed type.
        /// </summary>
        /// <value>The feed type.</value>
        [DataMember(Name = "feedType", EmitDefaultValue = false)]
        public string FeedType { get; set; }

        /// <summary>
        /// A list of identifiers for the marketplaces that the feed is applied to.
        /// </summary>
        /// <value>A list of identifiers for the marketplaces that the feed is applied to.</value>
        [DataMember(Name = "marketplaceIds", EmitDefaultValue = false)]
        public List<string> MarketplaceIds { get; set; }

        /// <summary>
        /// The date and time when the feed was created, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when the feed was created, in ISO 8601 date time format.</value>
        [DataMember(Name = "createdTime", EmitDefaultValue = false)]
        public DateTime? CreatedTime { get; set; }


        /// <summary>
        /// The date and time when feed processing started, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when feed processing started, in ISO 8601 date time format.</value>
        [DataMember(Name = "processingStartTime", EmitDefaultValue = false)]
        public DateTime? ProcessingStartTime { get; set; }

        /// <summary>
        /// The date and time when feed processing completed, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when feed processing completed, in ISO 8601 date time format.</value>
        [DataMember(Name = "processingEndTime", EmitDefaultValue = false)]
        public DateTime? ProcessingEndTime { get; set; }

        /// <summary>
        /// The identifier for the feed document. This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier for the feed document. This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name = "resultFeedDocumentId", EmitDefaultValue = false)]
        public string ResultFeedDocumentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Feed {\n");
            sb.Append("  FeedId: ").Append(FeedId).Append("\n");
            sb.Append("  FeedType: ").Append(FeedType).Append("\n");
            sb.Append("  MarketplaceIds: ").Append(MarketplaceIds).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  ProcessingStatus: ").Append(ProcessingStatus).Append("\n");
            sb.Append("  ProcessingStartTime: ").Append(ProcessingStartTime).Append("\n");
            sb.Append("  ProcessingEndTime: ").Append(ProcessingEndTime).Append("\n");
            sb.Append("  ResultFeedDocumentId: ").Append(ResultFeedDocumentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Feed);
        }

        /// <summary>
        /// Returns true if Feed instances are equal
        /// </summary>
        /// <param name="input">Instance of Feed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Feed input)
        {
            if (input == null)
                return false;

            return
                (
                    this.FeedId == input.FeedId ||
                    (this.FeedId != null &&
                    this.FeedId.Equals(input.FeedId))
                ) &&
                (
                    this.FeedType == input.FeedType ||
                    (this.FeedType != null &&
                    this.FeedType.Equals(input.FeedType))
                ) &&
                (
                    this.MarketplaceIds == input.MarketplaceIds ||
                    this.MarketplaceIds != null &&
                    this.MarketplaceIds.SequenceEqual(input.MarketplaceIds)
                ) &&
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) &&
                (
                    this.ProcessingStatus == input.ProcessingStatus ||
                    (this.ProcessingStatus != null &&
                    this.ProcessingStatus.Equals(input.ProcessingStatus))
                ) &&
                (
                    this.ProcessingStartTime == input.ProcessingStartTime ||
                    (this.ProcessingStartTime != null &&
                    this.ProcessingStartTime.Equals(input.ProcessingStartTime))
                ) &&
                (
                    this.ProcessingEndTime == input.ProcessingEndTime ||
                    (this.ProcessingEndTime != null &&
                    this.ProcessingEndTime.Equals(input.ProcessingEndTime))
                ) &&
                (
                    this.ResultFeedDocumentId == input.ResultFeedDocumentId ||
                    (this.ResultFeedDocumentId != null &&
                    this.ResultFeedDocumentId.Equals(input.ResultFeedDocumentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeedId != null)
                    hashCode = hashCode * 59 + this.FeedId.GetHashCode();
                if (this.FeedType != null)
                    hashCode = hashCode * 59 + this.FeedType.GetHashCode();
                if (this.MarketplaceIds != null)
                    hashCode = hashCode * 59 + this.MarketplaceIds.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.ProcessingStatus != null)
                    hashCode = hashCode * 59 + this.ProcessingStatus.GetHashCode();
                if (this.ProcessingStartTime != null)
                    hashCode = hashCode * 59 + this.ProcessingStartTime.GetHashCode();
                if (this.ProcessingEndTime != null)
                    hashCode = hashCode * 59 + this.ProcessingEndTime.GetHashCode();
                if (this.ResultFeedDocumentId != null)
                    hashCode = hashCode * 59 + this.ResultFeedDocumentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
