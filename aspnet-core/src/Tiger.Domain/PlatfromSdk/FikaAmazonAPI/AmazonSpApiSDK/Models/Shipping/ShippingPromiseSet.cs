/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Shipping
{
    /// <summary>
    /// The promised delivery time and pickup time.
    /// </summary>
    [DataContract]
    public partial class ShippingPromiseSet : IEquatable<ShippingPromiseSet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingPromiseSet" /> class.
        /// </summary>
        /// <param name="DeliveryWindow">The time window in which the shipment will be delivered..</param>
        /// <param name="ReceiveWindow">The time window in which Amazon Shipping will pick up the shipment..</param>
        public ShippingPromiseSet(TimeRange DeliveryWindow = default(TimeRange), TimeRange ReceiveWindow = default(TimeRange))
        {
            this.DeliveryWindow = DeliveryWindow;
            this.ReceiveWindow = ReceiveWindow;
        }

        /// <summary>
        /// The time window in which the shipment will be delivered.
        /// </summary>
        /// <value>The time window in which the shipment will be delivered.</value>
        [DataMember(Name = "deliveryWindow", EmitDefaultValue = false)]
        public TimeRange DeliveryWindow { get; set; }

        /// <summary>
        /// The time window in which Amazon Shipping will pick up the shipment.
        /// </summary>
        /// <value>The time window in which Amazon Shipping will pick up the shipment.</value>
        [DataMember(Name = "receiveWindow", EmitDefaultValue = false)]
        public TimeRange ReceiveWindow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShippingPromiseSet {\n");
            sb.Append("  DeliveryWindow: ").Append(DeliveryWindow).Append("\n");
            sb.Append("  ReceiveWindow: ").Append(ReceiveWindow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingPromiseSet);
        }

        /// <summary>
        /// Returns true if ShippingPromiseSet instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingPromiseSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingPromiseSet input)
        {
            if (input == null)
                return false;

            return
                (
                    this.DeliveryWindow == input.DeliveryWindow ||
                    (this.DeliveryWindow != null &&
                    this.DeliveryWindow.Equals(input.DeliveryWindow))
                ) &&
                (
                    this.ReceiveWindow == input.ReceiveWindow ||
                    (this.ReceiveWindow != null &&
                    this.ReceiveWindow.Equals(input.ReceiveWindow))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeliveryWindow != null)
                    hashCode = hashCode * 59 + this.DeliveryWindow.GetHashCode();
                if (this.ReceiveWindow != null)
                    hashCode = hashCode * 59 + this.ReceiveWindow.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
