/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Shipping
{
    /// <summary>
    /// The payload schema for the getRates operation.
    /// </summary>
    [DataContract]
    public partial class GetRatesRequest : IEquatable<GetRatesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetRatesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public GetRatesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetRatesRequest" /> class.
        /// </summary>
        /// <param name="ShipTo">ShipTo (required).</param>
        /// <param name="ShipFrom">ShipFrom (required).</param>
        /// <param name="ServiceTypes">ServiceTypes (required).</param>
        /// <param name="ShipDate">The start date and time. This defaults to the current date and time..</param>
        /// <param name="ContainerSpecifications">ContainerSpecifications (required).</param>
        public GetRatesRequest(Address ShipTo = default(Address), Address ShipFrom = default(Address), ServiceTypeList ServiceTypes = default(ServiceTypeList), DateTime? ShipDate = default(DateTime?), ContainerSpecificationList ContainerSpecifications = default(ContainerSpecificationList))
        {
            // to ensure "ShipTo" is required (not null)
            if (ShipTo == null)
            {
                throw new InvalidDataException("ShipTo is a required property for GetRatesRequest and cannot be null");
            }
            else
            {
                this.ShipTo = ShipTo;
            }
            // to ensure "ShipFrom" is required (not null)
            if (ShipFrom == null)
            {
                throw new InvalidDataException("ShipFrom is a required property for GetRatesRequest and cannot be null");
            }
            else
            {
                this.ShipFrom = ShipFrom;
            }
            // to ensure "ServiceTypes" is required (not null)
            if (ServiceTypes == null)
            {
                throw new InvalidDataException("ServiceTypes is a required property for GetRatesRequest and cannot be null");
            }
            else
            {
                this.ServiceTypes = ServiceTypes;
            }
            // to ensure "ContainerSpecifications" is required (not null)
            if (ContainerSpecifications == null)
            {
                throw new InvalidDataException("ContainerSpecifications is a required property for GetRatesRequest and cannot be null");
            }
            else
            {
                this.ContainerSpecifications = ContainerSpecifications;
            }
            this.ShipDate = ShipDate;
        }

        /// <summary>
        /// Gets or Sets ShipTo
        /// </summary>
        [DataMember(Name = "shipTo", EmitDefaultValue = false)]
        public Address ShipTo { get; set; }

        /// <summary>
        /// Gets or Sets ShipFrom
        /// </summary>
        [DataMember(Name = "shipFrom", EmitDefaultValue = false)]
        public Address ShipFrom { get; set; }

        /// <summary>
        /// Gets or Sets ServiceTypes
        /// </summary>
        [DataMember(Name = "serviceTypes", EmitDefaultValue = false)]
        public ServiceTypeList ServiceTypes { get; set; }

        /// <summary>
        /// The start date and time. This defaults to the current date and time.
        /// </summary>
        /// <value>The start date and time. This defaults to the current date and time.</value>
        [DataMember(Name = "shipDate", EmitDefaultValue = false)]
        public DateTime? ShipDate { get; set; }

        /// <summary>
        /// Gets or Sets ContainerSpecifications
        /// </summary>
        [DataMember(Name = "containerSpecifications", EmitDefaultValue = false)]
        public ContainerSpecificationList ContainerSpecifications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetRatesRequest {\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  ShipFrom: ").Append(ShipFrom).Append("\n");
            sb.Append("  ServiceTypes: ").Append(ServiceTypes).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  ContainerSpecifications: ").Append(ContainerSpecifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetRatesRequest);
        }

        /// <summary>
        /// Returns true if GetRatesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetRatesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetRatesRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ShipTo == input.ShipTo ||
                    (this.ShipTo != null &&
                    this.ShipTo.Equals(input.ShipTo))
                ) &&
                (
                    this.ShipFrom == input.ShipFrom ||
                    (this.ShipFrom != null &&
                    this.ShipFrom.Equals(input.ShipFrom))
                ) &&
                (
                    this.ServiceTypes == input.ServiceTypes ||
                    (this.ServiceTypes != null &&
                    this.ServiceTypes.Equals(input.ServiceTypes))
                ) &&
                (
                    this.ShipDate == input.ShipDate ||
                    (this.ShipDate != null &&
                    this.ShipDate.Equals(input.ShipDate))
                ) &&
                (
                    this.ContainerSpecifications == input.ContainerSpecifications ||
                    (this.ContainerSpecifications != null &&
                    this.ContainerSpecifications.Equals(input.ContainerSpecifications))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipTo != null)
                    hashCode = hashCode * 59 + this.ShipTo.GetHashCode();
                if (this.ShipFrom != null)
                    hashCode = hashCode * 59 + this.ShipFrom.GetHashCode();
                if (this.ServiceTypes != null)
                    hashCode = hashCode * 59 + this.ServiceTypes.GetHashCode();
                if (this.ShipDate != null)
                    hashCode = hashCode * 59 + this.ShipDate.GetHashCode();
                if (this.ContainerSpecifications != null)
                    hashCode = hashCode * 59 + this.ContainerSpecifications.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
