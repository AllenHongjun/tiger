/* 
 * Selling Partner API for Solicitations
 *
 * With the Solicitations API you can build applications that send non-critical solicitations to buyers. You can get a list of solicitation types that are available for an order that you specify, then call an operation that sends a solicitation to the buyer for that order. Buyers cannot respond to solicitations sent by this API, and these solicitations do not appear in the Messaging section of Seller Central or in the recipient's Message Center. The Solicitations API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Solicitations
{
    /// <summary>
    /// GetSolicitationActionsForOrderResponseLinks
    /// </summary>
    [DataContract]
    public partial class GetSolicitationActionsForOrderResponseLinks : IEquatable<GetSolicitationActionsForOrderResponseLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSolicitationActionsForOrderResponseLinks" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public GetSolicitationActionsForOrderResponseLinks() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSolicitationActionsForOrderResponseLinks" /> class.
        /// </summary>
        /// <param name="Self">Self (required).</param>
        /// <param name="Actions">Eligible actions for the specified amazonOrderId. (required).</param>
        public GetSolicitationActionsForOrderResponseLinks(LinkObject Self = default(LinkObject), List<LinkObject> Actions = default(List<LinkObject>))
        {
            // to ensure "Self" is required (not null)
            if (Self == null)
            {
                throw new InvalidDataException("Self is a required property for GetSolicitationActionsForOrderResponseLinks and cannot be null");
            }
            else
            {
                this.Self = Self;
            }
            // to ensure "Actions" is required (not null)
            if (Actions == null)
            {
                throw new InvalidDataException("Actions is a required property for GetSolicitationActionsForOrderResponseLinks and cannot be null");
            }
            else
            {
                this.Actions = Actions;
            }
        }

        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public LinkObject Self { get; set; }

        /// <summary>
        /// Eligible actions for the specified amazonOrderId.
        /// </summary>
        /// <value>Eligible actions for the specified amazonOrderId.</value>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<LinkObject> Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetSolicitationActionsForOrderResponseLinks {\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSolicitationActionsForOrderResponseLinks);
        }

        /// <summary>
        /// Returns true if GetSolicitationActionsForOrderResponseLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSolicitationActionsForOrderResponseLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSolicitationActionsForOrderResponseLinks input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Self == input.Self ||
                    (this.Self != null &&
                    this.Self.Equals(input.Self))
                ) &&
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Self != null)
                    hashCode = hashCode * 59 + this.Self.GetHashCode();
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
