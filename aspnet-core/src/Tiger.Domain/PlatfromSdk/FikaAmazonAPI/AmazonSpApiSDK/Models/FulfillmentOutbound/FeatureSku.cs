/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    /// Information about an SKU, including the count available, identifiers, and a list of overlapping SKUs that share the same inventory pool.
    /// </summary>
    [DataContract]
    public partial class FeatureSku :  IEquatable<FeatureSku>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureSku" /> class.
        /// </summary>
        /// <param name="sellerSku">Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit..</param>
        /// <param name="fnSku">The unique SKU used by Amazon&#39;s fulfillment network..</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item..</param>
        /// <param name="skuCount">The number of SKUs available for this service..</param>
        /// <param name="overlappingSkus">Other seller SKUs that are shared across the same inventory..</param>
        public FeatureSku(string sellerSku = default(string), string fnSku = default(string), string asin = default(string), decimal? skuCount = default(decimal?), List<string> overlappingSkus = default(List<string>))
        {
            this.SellerSku = sellerSku;
            this.FnSku = fnSku;
            this.Asin = asin;
            this.SkuCount = skuCount;
            this.OverlappingSkus = overlappingSkus;
        }
        
        /// <summary>
        /// Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.
        /// </summary>
        /// <value>Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</value>
        [DataMember(Name="sellerSku", EmitDefaultValue=false)]
        public string SellerSku { get; set; }

        /// <summary>
        /// The unique SKU used by Amazon&#39;s fulfillment network.
        /// </summary>
        /// <value>The unique SKU used by Amazon&#39;s fulfillment network.</value>
        [DataMember(Name="fnSku", EmitDefaultValue=false)]
        public string FnSku { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name="asin", EmitDefaultValue=false)]
        public string Asin { get; set; }

        /// <summary>
        /// The number of SKUs available for this service.
        /// </summary>
        /// <value>The number of SKUs available for this service.</value>
        [DataMember(Name="skuCount", EmitDefaultValue=false)]
        public decimal? SkuCount { get; set; }

        /// <summary>
        /// Other seller SKUs that are shared across the same inventory.
        /// </summary>
        /// <value>Other seller SKUs that are shared across the same inventory.</value>
        [DataMember(Name="overlappingSkus", EmitDefaultValue=false)]
        public List<string> OverlappingSkus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureSku {\n");
            sb.Append("  SellerSku: ").Append(SellerSku).Append("\n");
            sb.Append("  FnSku: ").Append(FnSku).Append("\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  SkuCount: ").Append(SkuCount).Append("\n");
            sb.Append("  OverlappingSkus: ").Append(OverlappingSkus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureSku);
        }

        /// <summary>
        /// Returns true if FeatureSku instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureSku to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureSku input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SellerSku == input.SellerSku ||
                    (this.SellerSku != null &&
                    this.SellerSku.Equals(input.SellerSku))
                ) && 
                (
                    this.FnSku == input.FnSku ||
                    (this.FnSku != null &&
                    this.FnSku.Equals(input.FnSku))
                ) && 
                (
                    this.Asin == input.Asin ||
                    (this.Asin != null &&
                    this.Asin.Equals(input.Asin))
                ) && 
                (
                    this.SkuCount == input.SkuCount ||
                    (this.SkuCount != null &&
                    this.SkuCount.Equals(input.SkuCount))
                ) && 
                (
                    this.OverlappingSkus == input.OverlappingSkus ||
                    this.OverlappingSkus != null &&
                    this.OverlappingSkus.SequenceEqual(input.OverlappingSkus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellerSku != null)
                    hashCode = hashCode * 59 + this.SellerSku.GetHashCode();
                if (this.FnSku != null)
                    hashCode = hashCode * 59 + this.FnSku.GetHashCode();
                if (this.Asin != null)
                    hashCode = hashCode * 59 + this.Asin.GetHashCode();
                if (this.SkuCount != null)
                    hashCode = hashCode * 59 + this.SkuCount.GetHashCode();
                if (this.OverlappingSkus != null)
                    hashCode = hashCode * 59 + this.OverlappingSkus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
