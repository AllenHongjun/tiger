/* 
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    /// Item information for a shipment in a fulfillment order preview.
    /// </summary>
    [DataContract]
    public partial class FulfillmentPreviewItem : IEquatable<FulfillmentPreviewItem>, IValidatableObject
    {
        /// <summary>
        /// The method used to calculate EstimatedShippingWeight.
        /// </summary>
        /// <value>The method used to calculate EstimatedShippingWeight.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShippingWeightCalculationMethodEnum
        {

            /// <summary>
            /// Enum Package for value: Package
            /// </summary>
            [EnumMember(Value = "Package")]
            Package = 1,

            /// <summary>
            /// Enum Dimensional for value: Dimensional
            /// </summary>
            [EnumMember(Value = "Dimensional")]
            Dimensional = 2
        }

        /// <summary>
        /// The method used to calculate EstimatedShippingWeight.
        /// </summary>
        /// <value>The method used to calculate EstimatedShippingWeight.</value>
        [DataMember(Name = "ShippingWeightCalculationMethod", EmitDefaultValue = false)]
        public ShippingWeightCalculationMethodEnum? ShippingWeightCalculationMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentPreviewItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public FulfillmentPreviewItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentPreviewItem" /> class.
        /// </summary>
        /// <param name="SellerSKU">The seller SKU of the item. (required).</param>
        /// <param name="Quantity">The item quantity. (required).</param>
        /// <param name="SellerFulfillmentOrderItemId">A fulfillment order item identifier that the seller created with a call to the createFulfillmentOrder operation. (required).</param>
        /// <param name="EstimatedShippingWeight">The estimated shipping weight of the item quantity for a single item, as identified by sellerSKU, in a shipment..</param>
        /// <param name="ShippingWeightCalculationMethod">The method used to calculate EstimatedShippingWeight..</param>
        public FulfillmentPreviewItem(string SellerSKU = default(string), int Quantity = default(int), string SellerFulfillmentOrderItemId = default(string), Weight EstimatedShippingWeight = default(Weight), ShippingWeightCalculationMethodEnum? ShippingWeightCalculationMethod = default(ShippingWeightCalculationMethodEnum?))
        {
            // to ensure "SellerSKU" is required (not null)
            if (SellerSKU == null)
            {
                throw new InvalidDataException("SellerSKU is a required property for FulfillmentPreviewItem and cannot be null");
            }
            else
            {
                this.SellerSKU = SellerSKU;
            }
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
            {
                throw new InvalidDataException("Quantity is a required property for FulfillmentPreviewItem and cannot be null");
            }
            else
            {
                this.Quantity = Quantity;
            }
            // to ensure "SellerFulfillmentOrderItemId" is required (not null)
            if (SellerFulfillmentOrderItemId == null)
            {
                throw new InvalidDataException("SellerFulfillmentOrderItemId is a required property for FulfillmentPreviewItem and cannot be null");
            }
            else
            {
                this.SellerFulfillmentOrderItemId = SellerFulfillmentOrderItemId;
            }
            this.EstimatedShippingWeight = EstimatedShippingWeight;
            this.ShippingWeightCalculationMethod = ShippingWeightCalculationMethod;
        }

        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        /// <value>The seller SKU of the item.</value>
        [DataMember(Name = "SellerSKU", EmitDefaultValue = false)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// The item quantity.
        /// </summary>
        /// <value>The item quantity.</value>
        [DataMember(Name = "Quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// A fulfillment order item identifier that the seller created with a call to the createFulfillmentOrder operation.
        /// </summary>
        /// <value>A fulfillment order item identifier that the seller created with a call to the createFulfillmentOrder operation.</value>
        [DataMember(Name = "SellerFulfillmentOrderItemId", EmitDefaultValue = false)]
        public string SellerFulfillmentOrderItemId { get; set; }

        /// <summary>
        /// The estimated shipping weight of the item quantity for a single item, as identified by sellerSKU, in a shipment.
        /// </summary>
        /// <value>The estimated shipping weight of the item quantity for a single item, as identified by sellerSKU, in a shipment.</value>
        [DataMember(Name = "EstimatedShippingWeight", EmitDefaultValue = false)]
        public Weight EstimatedShippingWeight { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentPreviewItem {\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SellerFulfillmentOrderItemId: ").Append(SellerFulfillmentOrderItemId).Append("\n");
            sb.Append("  EstimatedShippingWeight: ").Append(EstimatedShippingWeight).Append("\n");
            sb.Append("  ShippingWeightCalculationMethod: ").Append(ShippingWeightCalculationMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentPreviewItem);
        }

        /// <summary>
        /// Returns true if FulfillmentPreviewItem instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentPreviewItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentPreviewItem input)
        {
            if (input == null)
                return false;

            return
                (
                    this.SellerSKU == input.SellerSKU ||
                    (this.SellerSKU != null &&
                    this.SellerSKU.Equals(input.SellerSKU))
                ) &&
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) &&
                (
                    this.SellerFulfillmentOrderItemId == input.SellerFulfillmentOrderItemId ||
                    (this.SellerFulfillmentOrderItemId != null &&
                    this.SellerFulfillmentOrderItemId.Equals(input.SellerFulfillmentOrderItemId))
                ) &&
                (
                    this.EstimatedShippingWeight == input.EstimatedShippingWeight ||
                    (this.EstimatedShippingWeight != null &&
                    this.EstimatedShippingWeight.Equals(input.EstimatedShippingWeight))
                ) &&
                (
                    this.ShippingWeightCalculationMethod == input.ShippingWeightCalculationMethod ||
                    (this.ShippingWeightCalculationMethod != null &&
                    this.ShippingWeightCalculationMethod.Equals(input.ShippingWeightCalculationMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellerSKU != null)
                    hashCode = hashCode * 59 + this.SellerSKU.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.SellerFulfillmentOrderItemId != null)
                    hashCode = hashCode * 59 + this.SellerFulfillmentOrderItemId.GetHashCode();
                if (this.EstimatedShippingWeight != null)
                    hashCode = hashCode * 59 + this.EstimatedShippingWeight.GetHashCode();
                if (this.ShippingWeightCalculationMethod != null)
                    hashCode = hashCode * 59 + this.ShippingWeightCalculationMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
