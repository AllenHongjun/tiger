/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    /// The payload for the getFeatureSKU operation.
    /// </summary>
    [DataContract]
    public partial class GetFeatureSkuResult :  IEquatable<GetFeatureSkuResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFeatureSkuResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public GetFeatureSkuResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFeatureSkuResult" /> class.
        /// </summary>
        /// <param name="marketplaceId">The requested marketplace. (required).</param>
        /// <param name="featureName">The name of the feature. (required).</param>
        /// <param name="isEligible">When true, the seller SKU is eligible for the requested feature. (required).</param>
        /// <param name="ineligibleReasons">A list of one or more reasons that the seller SKU is ineligibile for the feature.  Possible values: * MERCHANT_NOT_ENROLLED - The merchant isn&#39;t enrolled for the feature. * SKU_NOT_ELIGIBLE - The SKU doesn&#39;t reside in a warehouse that supports the feature. * INVALID_SKU - There is an issue with the SKU provided..</param>
        /// <param name="skuInfo">Information about the SKU, including the count available, identifiers, and a list of overlapping SKUs that share the same inventory pool..</param>
        public GetFeatureSkuResult(string marketplaceId = default(string), string featureName = default(string), bool? isEligible = default(bool?), List<string> ineligibleReasons = default(List<string>), FeatureSku skuInfo = default(FeatureSku))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for GetFeatureSkuResult and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "featureName" is required (not null)
            if (featureName == null)
            {
                throw new InvalidDataException("featureName is a required property for GetFeatureSkuResult and cannot be null");
            }
            else
            {
                this.FeatureName = featureName;
            }
            // to ensure "isEligible" is required (not null)
            if (isEligible == null)
            {
                throw new InvalidDataException("isEligible is a required property for GetFeatureSkuResult and cannot be null");
            }
            else
            {
                this.IsEligible = isEligible;
            }
            this.IneligibleReasons = ineligibleReasons;
            this.SkuInfo = skuInfo;
        }
        
        /// <summary>
        /// The requested marketplace.
        /// </summary>
        /// <value>The requested marketplace.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The name of the feature.
        /// </summary>
        /// <value>The name of the feature.</value>
        [DataMember(Name="featureName", EmitDefaultValue=false)]
        public string FeatureName { get; set; }

        /// <summary>
        /// When true, the seller SKU is eligible for the requested feature.
        /// </summary>
        /// <value>When true, the seller SKU is eligible for the requested feature.</value>
        [DataMember(Name="isEligible", EmitDefaultValue=false)]
        public bool? IsEligible { get; set; }

        /// <summary>
        /// A list of one or more reasons that the seller SKU is ineligibile for the feature.  Possible values: * MERCHANT_NOT_ENROLLED - The merchant isn&#39;t enrolled for the feature. * SKU_NOT_ELIGIBLE - The SKU doesn&#39;t reside in a warehouse that supports the feature. * INVALID_SKU - There is an issue with the SKU provided.
        /// </summary>
        /// <value>A list of one or more reasons that the seller SKU is ineligibile for the feature.  Possible values: * MERCHANT_NOT_ENROLLED - The merchant isn&#39;t enrolled for the feature. * SKU_NOT_ELIGIBLE - The SKU doesn&#39;t reside in a warehouse that supports the feature. * INVALID_SKU - There is an issue with the SKU provided.</value>
        [DataMember(Name="ineligibleReasons", EmitDefaultValue=false)]
        public List<string> IneligibleReasons { get; set; }

        /// <summary>
        /// Information about the SKU, including the count available, identifiers, and a list of overlapping SKUs that share the same inventory pool.
        /// </summary>
        /// <value>Information about the SKU, including the count available, identifiers, and a list of overlapping SKUs that share the same inventory pool.</value>
        [DataMember(Name="skuInfo", EmitDefaultValue=false)]
        public FeatureSku SkuInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetFeatureSkuResult {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  FeatureName: ").Append(FeatureName).Append("\n");
            sb.Append("  IsEligible: ").Append(IsEligible).Append("\n");
            sb.Append("  IneligibleReasons: ").Append(IneligibleReasons).Append("\n");
            sb.Append("  SkuInfo: ").Append(SkuInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetFeatureSkuResult);
        }

        /// <summary>
        /// Returns true if GetFeatureSkuResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetFeatureSkuResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetFeatureSkuResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.FeatureName == input.FeatureName ||
                    (this.FeatureName != null &&
                    this.FeatureName.Equals(input.FeatureName))
                ) && 
                (
                    this.IsEligible == input.IsEligible ||
                    (this.IsEligible != null &&
                    this.IsEligible.Equals(input.IsEligible))
                ) && 
                (
                    this.IneligibleReasons == input.IneligibleReasons ||
                    this.IneligibleReasons != null &&
                    this.IneligibleReasons.SequenceEqual(input.IneligibleReasons)
                ) && 
                (
                    this.SkuInfo == input.SkuInfo ||
                    (this.SkuInfo != null &&
                    this.SkuInfo.Equals(input.SkuInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.FeatureName != null)
                    hashCode = hashCode * 59 + this.FeatureName.GetHashCode();
                if (this.IsEligible != null)
                    hashCode = hashCode * 59 + this.IsEligible.GetHashCode();
                if (this.IneligibleReasons != null)
                    hashCode = hashCode * 59 + this.IneligibleReasons.GetHashCode();
                if (this.SkuInfo != null)
                    hashCode = hashCode * 59 + this.SkuInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
