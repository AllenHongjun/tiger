/* 
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.VendorDirectFulfillmentOrders
{
    /// <summary>
    /// Gift details for the item.
    /// </summary>
    [DataContract]
    public partial class GiftDetails :  IEquatable<GiftDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GiftDetails" /> class.
        /// </summary>
        /// <param name="giftMessage">Gift message to be printed in shipment..</param>
        /// <param name="giftWrapId">Gift wrap identifier for the gift wrapping, if any..</param>
        public GiftDetails(string giftMessage = default(string), string giftWrapId = default(string))
        {
            this.GiftMessage = giftMessage;
            this.GiftWrapId = giftWrapId;
        }
        
        /// <summary>
        /// Gift message to be printed in shipment.
        /// </summary>
        /// <value>Gift message to be printed in shipment.</value>
        [DataMember(Name="giftMessage", EmitDefaultValue=false)]
        public string GiftMessage { get; set; }

        /// <summary>
        /// Gift wrap identifier for the gift wrapping, if any.
        /// </summary>
        /// <value>Gift wrap identifier for the gift wrapping, if any.</value>
        [DataMember(Name="giftWrapId", EmitDefaultValue=false)]
        public string GiftWrapId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GiftDetails {\n");
            sb.Append("  GiftMessage: ").Append(GiftMessage).Append("\n");
            sb.Append("  GiftWrapId: ").Append(GiftWrapId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GiftDetails);
        }

        /// <summary>
        /// Returns true if GiftDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of GiftDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GiftDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GiftMessage == input.GiftMessage ||
                    (this.GiftMessage != null &&
                    this.GiftMessage.Equals(input.GiftMessage))
                ) && 
                (
                    this.GiftWrapId == input.GiftWrapId ||
                    (this.GiftWrapId != null &&
                    this.GiftWrapId.Equals(input.GiftWrapId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GiftMessage != null)
                    hashCode = hashCode * 59 + this.GiftMessage.GetHashCode();
                if (this.GiftWrapId != null)
                    hashCode = hashCode * 59 + this.GiftWrapId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
