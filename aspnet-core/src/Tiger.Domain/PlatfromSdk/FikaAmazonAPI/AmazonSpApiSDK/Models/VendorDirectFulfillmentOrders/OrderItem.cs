/* 
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using FikaAmazonAPI.AmazonSpApiSDK.Models.Sales;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.VendorDirectFulfillmentOrders
{
    /// <summary>
    /// OrderItem
    /// </summary>
    [DataContract]
    public partial class OrderItem :  IEquatable<OrderItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public OrderItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        /// <param name="itemSequenceNumber">Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on. (required).</param>
        /// <param name="buyerProductIdentifier">Buyer&#39;s standard identification number (ASIN) of an item..</param>
        /// <param name="vendorProductIdentifier">The vendor selected product identification of the item..</param>
        /// <param name="title">Title for the item..</param>
        /// <param name="orderedQuantity">Item quantity ordered. (required).</param>
        /// <param name="scheduledDeliveryShipment">Details for the scheduled delivery shipment..</param>
        /// <param name="giftDetails">Gift message and wrapId details..</param>
        /// <param name="netPrice">Net price (before tax) to vendor with currency details. (required).</param>
        /// <param name="taxDetails">Total tax details for the line item..</param>
        /// <param name="totalPrice">The price to Amazon each (cost)..</param>
        public OrderItem(string itemSequenceNumber = default(string), string buyerProductIdentifier = default(string), string vendorProductIdentifier = default(string), string title = default(string), ItemQuantity orderedQuantity = default(ItemQuantity), ScheduledDeliveryShipment scheduledDeliveryShipment = default(ScheduledDeliveryShipment), GiftDetails giftDetails = default(GiftDetails), Money netPrice = default(Money), Object taxDetails = default(Object), Money totalPrice = default(Money))
        {
            // to ensure "itemSequenceNumber" is required (not null)
            if (itemSequenceNumber == null)
            {
                throw new InvalidDataException("itemSequenceNumber is a required property for OrderItem and cannot be null");
            }
            else
            {
                this.ItemSequenceNumber = itemSequenceNumber;
            }
            // to ensure "orderedQuantity" is required (not null)
            if (orderedQuantity == null)
            {
                throw new InvalidDataException("orderedQuantity is a required property for OrderItem and cannot be null");
            }
            else
            {
                this.OrderedQuantity = orderedQuantity;
            }
            // to ensure "netPrice" is required (not null)
            if (netPrice == null)
            {
                throw new InvalidDataException("netPrice is a required property for OrderItem and cannot be null");
            }
            else
            {
                this.NetPrice = netPrice;
            }
            this.BuyerProductIdentifier = buyerProductIdentifier;
            this.VendorProductIdentifier = vendorProductIdentifier;
            this.Title = title;
            this.ScheduledDeliveryShipment = scheduledDeliveryShipment;
            this.GiftDetails = giftDetails;
            this.TaxDetails = taxDetails;
            this.TotalPrice = totalPrice;
        }
        
        /// <summary>
        /// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
        /// </summary>
        /// <value>Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.</value>
        [DataMember(Name="itemSequenceNumber", EmitDefaultValue=false)]
        public string ItemSequenceNumber { get; set; }

        /// <summary>
        /// Buyer&#39;s standard identification number (ASIN) of an item.
        /// </summary>
        /// <value>Buyer&#39;s standard identification number (ASIN) of an item.</value>
        [DataMember(Name="buyerProductIdentifier", EmitDefaultValue=false)]
        public string BuyerProductIdentifier { get; set; }

        /// <summary>
        /// The vendor selected product identification of the item.
        /// </summary>
        /// <value>The vendor selected product identification of the item.</value>
        [DataMember(Name="vendorProductIdentifier", EmitDefaultValue=false)]
        public string VendorProductIdentifier { get; set; }

        /// <summary>
        /// Title for the item.
        /// </summary>
        /// <value>Title for the item.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Item quantity ordered.
        /// </summary>
        /// <value>Item quantity ordered.</value>
        [DataMember(Name="orderedQuantity", EmitDefaultValue=false)]
        public ItemQuantity OrderedQuantity { get; set; }

        /// <summary>
        /// Details for the scheduled delivery shipment.
        /// </summary>
        /// <value>Details for the scheduled delivery shipment.</value>
        [DataMember(Name="scheduledDeliveryShipment", EmitDefaultValue=false)]
        public ScheduledDeliveryShipment ScheduledDeliveryShipment { get; set; }

        /// <summary>
        /// Gift message and wrapId details.
        /// </summary>
        /// <value>Gift message and wrapId details.</value>
        [DataMember(Name="giftDetails", EmitDefaultValue=false)]
        public GiftDetails GiftDetails { get; set; }

        /// <summary>
        /// Net price (before tax) to vendor with currency details.
        /// </summary>
        /// <value>Net price (before tax) to vendor with currency details.</value>
        [DataMember(Name="netPrice", EmitDefaultValue=false)]
        public Money NetPrice { get; set; }

        /// <summary>
        /// Total tax details for the line item.
        /// </summary>
        /// <value>Total tax details for the line item.</value>
        [DataMember(Name="taxDetails", EmitDefaultValue=false)]
        public Object TaxDetails { get; set; }

        /// <summary>
        /// The price to Amazon each (cost).
        /// </summary>
        /// <value>The price to Amazon each (cost).</value>
        [DataMember(Name="totalPrice", EmitDefaultValue=false)]
        public Money TotalPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItem {\n");
            sb.Append("  ItemSequenceNumber: ").Append(ItemSequenceNumber).Append("\n");
            sb.Append("  BuyerProductIdentifier: ").Append(BuyerProductIdentifier).Append("\n");
            sb.Append("  VendorProductIdentifier: ").Append(VendorProductIdentifier).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  OrderedQuantity: ").Append(OrderedQuantity).Append("\n");
            sb.Append("  ScheduledDeliveryShipment: ").Append(ScheduledDeliveryShipment).Append("\n");
            sb.Append("  GiftDetails: ").Append(GiftDetails).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderItem);
        }

        /// <summary>
        /// Returns true if OrderItem instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemSequenceNumber == input.ItemSequenceNumber ||
                    (this.ItemSequenceNumber != null &&
                    this.ItemSequenceNumber.Equals(input.ItemSequenceNumber))
                ) && 
                (
                    this.BuyerProductIdentifier == input.BuyerProductIdentifier ||
                    (this.BuyerProductIdentifier != null &&
                    this.BuyerProductIdentifier.Equals(input.BuyerProductIdentifier))
                ) && 
                (
                    this.VendorProductIdentifier == input.VendorProductIdentifier ||
                    (this.VendorProductIdentifier != null &&
                    this.VendorProductIdentifier.Equals(input.VendorProductIdentifier))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.OrderedQuantity == input.OrderedQuantity ||
                    (this.OrderedQuantity != null &&
                    this.OrderedQuantity.Equals(input.OrderedQuantity))
                ) && 
                (
                    this.ScheduledDeliveryShipment == input.ScheduledDeliveryShipment ||
                    (this.ScheduledDeliveryShipment != null &&
                    this.ScheduledDeliveryShipment.Equals(input.ScheduledDeliveryShipment))
                ) && 
                (
                    this.GiftDetails == input.GiftDetails ||
                    (this.GiftDetails != null &&
                    this.GiftDetails.Equals(input.GiftDetails))
                ) && 
                (
                    this.NetPrice == input.NetPrice ||
                    (this.NetPrice != null &&
                    this.NetPrice.Equals(input.NetPrice))
                ) && 
                (
                    this.TaxDetails == input.TaxDetails ||
                    (this.TaxDetails != null &&
                    this.TaxDetails.Equals(input.TaxDetails))
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    (this.TotalPrice != null &&
                    this.TotalPrice.Equals(input.TotalPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemSequenceNumber != null)
                    hashCode = hashCode * 59 + this.ItemSequenceNumber.GetHashCode();
                if (this.BuyerProductIdentifier != null)
                    hashCode = hashCode * 59 + this.BuyerProductIdentifier.GetHashCode();
                if (this.VendorProductIdentifier != null)
                    hashCode = hashCode * 59 + this.VendorProductIdentifier.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.OrderedQuantity != null)
                    hashCode = hashCode * 59 + this.OrderedQuantity.GetHashCode();
                if (this.ScheduledDeliveryShipment != null)
                    hashCode = hashCode * 59 + this.ScheduledDeliveryShipment.GetHashCode();
                if (this.GiftDetails != null)
                    hashCode = hashCode * 59 + this.GiftDetails.GetHashCode();
                if (this.NetPrice != null)
                    hashCode = hashCode * 59 + this.NetPrice.GetHashCode();
                if (this.TaxDetails != null)
                    hashCode = hashCode * 59 + this.TaxDetails.GetHashCode();
                if (this.TotalPrice != null)
                    hashCode = hashCode * 59 + this.TotalPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
