/* 
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using FikaAmazonAPI.AmazonSpApiSDK.Models.Sales;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.VendorDirectFulfillmentOrders
{
    /// <summary>
    /// TaxDetails
    /// </summary>
    [DataContract]
    public partial class TaxDetails :  IEquatable<TaxDetails>, IValidatableObject
    {
        /// <summary>
        /// Tax type.
        /// </summary>
        /// <value>Tax type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum CONSUMPTION for value: CONSUMPTION
            /// </summary>
            [EnumMember(Value = "CONSUMPTION")]
            CONSUMPTION = 1,
            
            /// <summary>
            /// Enum GST for value: GST
            /// </summary>
            [EnumMember(Value = "GST")]
            GST = 2,
            
            /// <summary>
            /// Enum MwSt for value: MwSt.
            /// </summary>
            [EnumMember(Value = "MwSt.")]
            MwSt = 3,
            
            /// <summary>
            /// Enum PST for value: PST
            /// </summary>
            [EnumMember(Value = "PST")]
            PST = 4,
            
            /// <summary>
            /// Enum TOTAL for value: TOTAL
            /// </summary>
            [EnumMember(Value = "TOTAL")]
            TOTAL = 5,
            
            /// <summary>
            /// Enum TVA for value: TVA
            /// </summary>
            [EnumMember(Value = "TVA")]
            TVA = 6,
            
            /// <summary>
            /// Enum VAT for value: VAT
            /// </summary>
            [EnumMember(Value = "VAT")]
            VAT = 7
        }

        /// <summary>
        /// Tax type.
        /// </summary>
        /// <value>Tax type.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public TaxDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxDetails" /> class.
        /// </summary>
        /// <param name="taxRate">taxRate.</param>
        /// <param name="taxAmount">taxAmount (required).</param>
        /// <param name="taxableAmount">taxableAmount.</param>
        /// <param name="type">Tax type..</param>
        public TaxDetails(string taxRate = default(string), Money taxAmount = default(Money), Money taxableAmount = default(Money), TypeEnum? type = default(TypeEnum?))
        {
            // to ensure "taxAmount" is required (not null)
            if (taxAmount == null)
            {
                throw new InvalidDataException("taxAmount is a required property for TaxDetails and cannot be null");
            }
            else
            {
                this.TaxAmount = taxAmount;
            }
            this.TaxRate = taxRate;
            this.TaxableAmount = taxableAmount;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets TaxRate
        /// </summary>
        [DataMember(Name="taxRate", EmitDefaultValue=false)]
        public string TaxRate { get; set; }

        /// <summary>
        /// Gets or Sets TaxAmount
        /// </summary>
        [DataMember(Name="taxAmount", EmitDefaultValue=false)]
        public Money TaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets TaxableAmount
        /// </summary>
        [DataMember(Name="taxableAmount", EmitDefaultValue=false)]
        public Money TaxableAmount { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxDetails {\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxableAmount: ").Append(TaxableAmount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxDetails);
        }

        /// <summary>
        /// Returns true if TaxDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                ) && 
                (
                    this.TaxAmount == input.TaxAmount ||
                    (this.TaxAmount != null &&
                    this.TaxAmount.Equals(input.TaxAmount))
                ) && 
                (
                    this.TaxableAmount == input.TaxableAmount ||
                    (this.TaxableAmount != null &&
                    this.TaxableAmount.Equals(input.TaxableAmount))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaxRate != null)
                    hashCode = hashCode * 59 + this.TaxRate.GetHashCode();
                if (this.TaxAmount != null)
                    hashCode = hashCode * 59 + this.TaxAmount.GetHashCode();
                if (this.TaxableAmount != null)
                    hashCode = hashCode * 59 + this.TaxableAmount.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
