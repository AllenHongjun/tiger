/* 
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.VendorDirectFulfillmentOrders
{
    /// <summary>
    /// Details of an individual order being acknowledged.
    /// </summary>
    [DataContract]
    public partial class OrderAcknowledgementItem :  IEquatable<OrderAcknowledgementItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAcknowledgementItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public OrderAcknowledgementItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAcknowledgementItem" /> class.
        /// </summary>
        /// <param name="purchaseOrderNumber">The purchase order number for this order. Formatting Notes: alpha-numeric code. (required).</param>
        /// <param name="vendorOrderNumber">The vendor&#39;s order number for this order. (required).</param>
        /// <param name="acknowledgementDate">The date and time when the order is acknowledged, in ISO-8601 date/time format. For example: 2018-07-16T23:00:00Z / 2018-07-16T23:00:00-05:00 / 2018-07-16T23:00:00-08:00. (required).</param>
        /// <param name="acknowledgementStatus">Status of acknowledgement. (required).</param>
        /// <param name="sellingParty">PartyID as vendor code. (required).</param>
        /// <param name="shipFromParty">PartyID as the vendor&#39;s warehouseId. (required).</param>
        /// <param name="itemAcknowledgements">Item details including acknowledged quantity. (required).</param>
        public OrderAcknowledgementItem(string purchaseOrderNumber = default(string), string vendorOrderNumber = default(string), DateTime? acknowledgementDate = default(DateTime?), AcknowledgementStatus acknowledgementStatus = default(AcknowledgementStatus), PartyIdentification sellingParty = default(PartyIdentification), PartyIdentification shipFromParty = default(PartyIdentification), List<OrderItemAcknowledgement> itemAcknowledgements = default(List<OrderItemAcknowledgement>))
        {
            // to ensure "purchaseOrderNumber" is required (not null)
            if (purchaseOrderNumber == null)
            {
                throw new InvalidDataException("purchaseOrderNumber is a required property for OrderAcknowledgementItem and cannot be null");
            }
            else
            {
                this.PurchaseOrderNumber = purchaseOrderNumber;
            }
            // to ensure "vendorOrderNumber" is required (not null)
            if (vendorOrderNumber == null)
            {
                throw new InvalidDataException("vendorOrderNumber is a required property for OrderAcknowledgementItem and cannot be null");
            }
            else
            {
                this.VendorOrderNumber = vendorOrderNumber;
            }
            // to ensure "acknowledgementDate" is required (not null)
            if (acknowledgementDate == null)
            {
                throw new InvalidDataException("acknowledgementDate is a required property for OrderAcknowledgementItem and cannot be null");
            }
            else
            {
                this.AcknowledgementDate = acknowledgementDate;
            }
            // to ensure "acknowledgementStatus" is required (not null)
            if (acknowledgementStatus == null)
            {
                throw new InvalidDataException("acknowledgementStatus is a required property for OrderAcknowledgementItem and cannot be null");
            }
            else
            {
                this.AcknowledgementStatus = acknowledgementStatus;
            }
            // to ensure "sellingParty" is required (not null)
            if (sellingParty == null)
            {
                throw new InvalidDataException("sellingParty is a required property for OrderAcknowledgementItem and cannot be null");
            }
            else
            {
                this.SellingParty = sellingParty;
            }
            // to ensure "shipFromParty" is required (not null)
            if (shipFromParty == null)
            {
                throw new InvalidDataException("shipFromParty is a required property for OrderAcknowledgementItem and cannot be null");
            }
            else
            {
                this.ShipFromParty = shipFromParty;
            }
            // to ensure "itemAcknowledgements" is required (not null)
            if (itemAcknowledgements == null)
            {
                throw new InvalidDataException("itemAcknowledgements is a required property for OrderAcknowledgementItem and cannot be null");
            }
            else
            {
                this.ItemAcknowledgements = itemAcknowledgements;
            }
        }
        
        /// <summary>
        /// The purchase order number for this order. Formatting Notes: alpha-numeric code.
        /// </summary>
        /// <value>The purchase order number for this order. Formatting Notes: alpha-numeric code.</value>
        [DataMember(Name="purchaseOrderNumber", EmitDefaultValue=false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// The vendor&#39;s order number for this order.
        /// </summary>
        /// <value>The vendor&#39;s order number for this order.</value>
        [DataMember(Name="vendorOrderNumber", EmitDefaultValue=false)]
        public string VendorOrderNumber { get; set; }

        /// <summary>
        /// The date and time when the order is acknowledged, in ISO-8601 date/time format. For example: 2018-07-16T23:00:00Z / 2018-07-16T23:00:00-05:00 / 2018-07-16T23:00:00-08:00.
        /// </summary>
        /// <value>The date and time when the order is acknowledged, in ISO-8601 date/time format. For example: 2018-07-16T23:00:00Z / 2018-07-16T23:00:00-05:00 / 2018-07-16T23:00:00-08:00.</value>
        [DataMember(Name="acknowledgementDate", EmitDefaultValue=false)]
        public DateTime? AcknowledgementDate { get; set; }

        /// <summary>
        /// Status of acknowledgement.
        /// </summary>
        /// <value>Status of acknowledgement.</value>
        [DataMember(Name="acknowledgementStatus", EmitDefaultValue=false)]
        public AcknowledgementStatus AcknowledgementStatus { get; set; }

        /// <summary>
        /// PartyID as vendor code.
        /// </summary>
        /// <value>PartyID as vendor code.</value>
        [DataMember(Name="sellingParty", EmitDefaultValue=false)]
        public PartyIdentification SellingParty { get; set; }

        /// <summary>
        /// PartyID as the vendor&#39;s warehouseId.
        /// </summary>
        /// <value>PartyID as the vendor&#39;s warehouseId.</value>
        [DataMember(Name="shipFromParty", EmitDefaultValue=false)]
        public PartyIdentification ShipFromParty { get; set; }

        /// <summary>
        /// Item details including acknowledged quantity.
        /// </summary>
        /// <value>Item details including acknowledged quantity.</value>
        [DataMember(Name="itemAcknowledgements", EmitDefaultValue=false)]
        public List<OrderItemAcknowledgement> ItemAcknowledgements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderAcknowledgementItem {\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  VendorOrderNumber: ").Append(VendorOrderNumber).Append("\n");
            sb.Append("  AcknowledgementDate: ").Append(AcknowledgementDate).Append("\n");
            sb.Append("  AcknowledgementStatus: ").Append(AcknowledgementStatus).Append("\n");
            sb.Append("  SellingParty: ").Append(SellingParty).Append("\n");
            sb.Append("  ShipFromParty: ").Append(ShipFromParty).Append("\n");
            sb.Append("  ItemAcknowledgements: ").Append(ItemAcknowledgements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderAcknowledgementItem);
        }

        /// <summary>
        /// Returns true if OrderAcknowledgementItem instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderAcknowledgementItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderAcknowledgementItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) && 
                (
                    this.VendorOrderNumber == input.VendorOrderNumber ||
                    (this.VendorOrderNumber != null &&
                    this.VendorOrderNumber.Equals(input.VendorOrderNumber))
                ) && 
                (
                    this.AcknowledgementDate == input.AcknowledgementDate ||
                    (this.AcknowledgementDate != null &&
                    this.AcknowledgementDate.Equals(input.AcknowledgementDate))
                ) && 
                (
                    this.AcknowledgementStatus == input.AcknowledgementStatus ||
                    (this.AcknowledgementStatus != null &&
                    this.AcknowledgementStatus.Equals(input.AcknowledgementStatus))
                ) && 
                (
                    this.SellingParty == input.SellingParty ||
                    (this.SellingParty != null &&
                    this.SellingParty.Equals(input.SellingParty))
                ) && 
                (
                    this.ShipFromParty == input.ShipFromParty ||
                    (this.ShipFromParty != null &&
                    this.ShipFromParty.Equals(input.ShipFromParty))
                ) && 
                (
                    this.ItemAcknowledgements == input.ItemAcknowledgements ||
                    this.ItemAcknowledgements != null &&
                    this.ItemAcknowledgements.SequenceEqual(input.ItemAcknowledgements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.VendorOrderNumber != null)
                    hashCode = hashCode * 59 + this.VendorOrderNumber.GetHashCode();
                if (this.AcknowledgementDate != null)
                    hashCode = hashCode * 59 + this.AcknowledgementDate.GetHashCode();
                if (this.AcknowledgementStatus != null)
                    hashCode = hashCode * 59 + this.AcknowledgementStatus.GetHashCode();
                if (this.SellingParty != null)
                    hashCode = hashCode * 59 + this.SellingParty.GetHashCode();
                if (this.ShipFromParty != null)
                    hashCode = hashCode * 59 + this.ShipFromParty.GetHashCode();
                if (this.ItemAcknowledgements != null)
                    hashCode = hashCode * 59 + this.ItemAcknowledgements.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
