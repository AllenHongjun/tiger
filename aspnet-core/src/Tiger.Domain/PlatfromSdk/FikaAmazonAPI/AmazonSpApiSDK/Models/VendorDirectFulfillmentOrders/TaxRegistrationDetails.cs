/* 
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.VendorDirectFulfillmentOrders
{
    /// <summary>
    /// Tax registration details of the entity.
    /// </summary>
    [DataContract]
    public partial class TaxRegistrationDetails :  IEquatable<TaxRegistrationDetails>, IValidatableObject
    {
        /// <summary>
        /// Tax registration type for the entity.
        /// </summary>
        /// <value>Tax registration type for the entity.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxRegistrationTypeEnum
        {
            
            /// <summary>
            /// Enum VAT for value: VAT
            /// </summary>
            [EnumMember(Value = "VAT")]
            VAT = 1,
            
            /// <summary>
            /// Enum GST for value: GST
            /// </summary>
            [EnumMember(Value = "GST")]
            GST = 2
        }

        /// <summary>
        /// Tax registration type for the entity.
        /// </summary>
        /// <value>Tax registration type for the entity.</value>
        [DataMember(Name="taxRegistrationType", EmitDefaultValue=false)]
        public TaxRegistrationTypeEnum? TaxRegistrationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxRegistrationDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public TaxRegistrationDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxRegistrationDetails" /> class.
        /// </summary>
        /// <param name="taxRegistrationType">Tax registration type for the entity..</param>
        /// <param name="taxRegistrationNumber">Tax registration number for the party. For example, VAT ID. (required).</param>
        /// <param name="taxRegistrationAddress">Address associated with the tax registration number..</param>
        /// <param name="taxRegistrationMessages">Tax registration message that can be used for additional tax related details..</param>
        public TaxRegistrationDetails(TaxRegistrationTypeEnum? taxRegistrationType = default(TaxRegistrationTypeEnum?), string taxRegistrationNumber = default(string), Address taxRegistrationAddress = default(Address), string taxRegistrationMessages = default(string))
        {
            // to ensure "taxRegistrationNumber" is required (not null)
            if (taxRegistrationNumber == null)
            {
                throw new InvalidDataException("taxRegistrationNumber is a required property for TaxRegistrationDetails and cannot be null");
            }
            else
            {
                this.TaxRegistrationNumber = taxRegistrationNumber;
            }
            this.TaxRegistrationType = taxRegistrationType;
            this.TaxRegistrationAddress = taxRegistrationAddress;
            this.TaxRegistrationMessages = taxRegistrationMessages;
        }
        

        /// <summary>
        /// Tax registration number for the party. For example, VAT ID.
        /// </summary>
        /// <value>Tax registration number for the party. For example, VAT ID.</value>
        [DataMember(Name="taxRegistrationNumber", EmitDefaultValue=false)]
        public string TaxRegistrationNumber { get; set; }

        /// <summary>
        /// Address associated with the tax registration number.
        /// </summary>
        /// <value>Address associated with the tax registration number.</value>
        [DataMember(Name="taxRegistrationAddress", EmitDefaultValue=false)]
        public Address TaxRegistrationAddress { get; set; }

        /// <summary>
        /// Tax registration message that can be used for additional tax related details.
        /// </summary>
        /// <value>Tax registration message that can be used for additional tax related details.</value>
        [DataMember(Name="taxRegistrationMessages", EmitDefaultValue=false)]
        public string TaxRegistrationMessages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxRegistrationDetails {\n");
            sb.Append("  TaxRegistrationType: ").Append(TaxRegistrationType).Append("\n");
            sb.Append("  TaxRegistrationNumber: ").Append(TaxRegistrationNumber).Append("\n");
            sb.Append("  TaxRegistrationAddress: ").Append(TaxRegistrationAddress).Append("\n");
            sb.Append("  TaxRegistrationMessages: ").Append(TaxRegistrationMessages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxRegistrationDetails);
        }

        /// <summary>
        /// Returns true if TaxRegistrationDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxRegistrationDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxRegistrationDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TaxRegistrationType == input.TaxRegistrationType ||
                    (this.TaxRegistrationType != null &&
                    this.TaxRegistrationType.Equals(input.TaxRegistrationType))
                ) && 
                (
                    this.TaxRegistrationNumber == input.TaxRegistrationNumber ||
                    (this.TaxRegistrationNumber != null &&
                    this.TaxRegistrationNumber.Equals(input.TaxRegistrationNumber))
                ) && 
                (
                    this.TaxRegistrationAddress == input.TaxRegistrationAddress ||
                    (this.TaxRegistrationAddress != null &&
                    this.TaxRegistrationAddress.Equals(input.TaxRegistrationAddress))
                ) && 
                (
                    this.TaxRegistrationMessages == input.TaxRegistrationMessages ||
                    (this.TaxRegistrationMessages != null &&
                    this.TaxRegistrationMessages.Equals(input.TaxRegistrationMessages))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaxRegistrationType != null)
                    hashCode = hashCode * 59 + this.TaxRegistrationType.GetHashCode();
                if (this.TaxRegistrationNumber != null)
                    hashCode = hashCode * 59 + this.TaxRegistrationNumber.GetHashCode();
                if (this.TaxRegistrationAddress != null)
                    hashCode = hashCode * 59 + this.TaxRegistrationAddress.GetHashCode();
                if (this.TaxRegistrationMessages != null)
                    hashCode = hashCode * 59 + this.TaxRegistrationMessages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
