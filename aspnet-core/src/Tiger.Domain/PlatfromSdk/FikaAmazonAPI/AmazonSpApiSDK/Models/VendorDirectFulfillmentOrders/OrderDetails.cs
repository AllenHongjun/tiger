/* 
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.VendorDirectFulfillmentOrders
{
    /// <summary>
    /// Details of an order.
    /// </summary>
    [DataContract]
    public partial class OrderDetails :  IEquatable<OrderDetails>, IValidatableObject
    {
        /// <summary>
        /// Current status of the order.
        /// </summary>
        /// <value>Current status of the order.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderStatusEnum
        {
            
            /// <summary>
            /// Enum NEW for value: NEW
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW = 1,
            
            /// <summary>
            /// Enum SHIPPED for value: SHIPPED
            /// </summary>
            [EnumMember(Value = "SHIPPED")]
            SHIPPED = 2,
            
            /// <summary>
            /// Enum ACCEPTED for value: ACCEPTED
            /// </summary>
            [EnumMember(Value = "ACCEPTED")]
            ACCEPTED = 3,
            
            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 4
        }

        /// <summary>
        /// Current status of the order.
        /// </summary>
        /// <value>Current status of the order.</value>
        [DataMember(Name="orderStatus", EmitDefaultValue=false)]
        public OrderStatusEnum? OrderStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public OrderDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDetails" /> class.
        /// </summary>
        /// <param name="customerOrderNumber">The customer order number. (required).</param>
        /// <param name="orderDate">The date the order was placed. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00. If no time zone is specified, UTC should be assumed. (required).</param>
        /// <param name="orderStatus">Current status of the order..</param>
        /// <param name="shipmentDetails">shipmentDetails (required).</param>
        /// <param name="taxTotal">taxTotal.</param>
        /// <param name="sellingParty">PartyID of vendor code. (required).</param>
        /// <param name="shipFromParty">PartyID of vendor&#39;s warehouse. (required).</param>
        /// <param name="shipToParty">Name/Address and tax details of the ship to party. (required).</param>
        /// <param name="billToParty">Name/Address and tax details of the bill to party. (required).</param>
        /// <param name="items">A list of items in this purchase order. (required).</param>
        public OrderDetails(string customerOrderNumber = default(string), DateTime? orderDate = default(DateTime?), OrderStatusEnum? orderStatus = default(OrderStatusEnum?), ShipmentDetails shipmentDetails = default(ShipmentDetails), Object taxTotal = default(Object), PartyIdentification sellingParty = default(PartyIdentification), PartyIdentification shipFromParty = default(PartyIdentification), Address shipToParty = default(Address), PartyIdentification billToParty = default(PartyIdentification), List<OrderItem> items = default(List<OrderItem>))
        {
            // to ensure "customerOrderNumber" is required (not null)
            if (customerOrderNumber == null)
            {
                throw new InvalidDataException("customerOrderNumber is a required property for OrderDetails and cannot be null");
            }
            else
            {
                this.CustomerOrderNumber = customerOrderNumber;
            }
            // to ensure "orderDate" is required (not null)
            if (orderDate == null)
            {
                throw new InvalidDataException("orderDate is a required property for OrderDetails and cannot be null");
            }
            else
            {
                this.OrderDate = orderDate;
            }
            // to ensure "shipmentDetails" is required (not null)
            if (shipmentDetails == null)
            {
                throw new InvalidDataException("shipmentDetails is a required property for OrderDetails and cannot be null");
            }
            else
            {
                this.ShipmentDetails = shipmentDetails;
            }
            // to ensure "sellingParty" is required (not null)
            if (sellingParty == null)
            {
                throw new InvalidDataException("sellingParty is a required property for OrderDetails and cannot be null");
            }
            else
            {
                this.SellingParty = sellingParty;
            }
            // to ensure "shipFromParty" is required (not null)
            if (shipFromParty == null)
            {
                throw new InvalidDataException("shipFromParty is a required property for OrderDetails and cannot be null");
            }
            else
            {
                this.ShipFromParty = shipFromParty;
            }
            // to ensure "shipToParty" is required (not null)
            if (shipToParty == null)
            {
                throw new InvalidDataException("shipToParty is a required property for OrderDetails and cannot be null");
            }
            else
            {
                this.ShipToParty = shipToParty;
            }
            // to ensure "billToParty" is required (not null)
            if (billToParty == null)
            {
                throw new InvalidDataException("billToParty is a required property for OrderDetails and cannot be null");
            }
            else
            {
                this.BillToParty = billToParty;
            }
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for OrderDetails and cannot be null");
            }
            else
            {
                this.Items = items;
            }
            this.OrderStatus = orderStatus;
            this.TaxTotal = taxTotal;
        }
        
        /// <summary>
        /// The customer order number.
        /// </summary>
        /// <value>The customer order number.</value>
        [DataMember(Name="customerOrderNumber", EmitDefaultValue=false)]
        public string CustomerOrderNumber { get; set; }

        /// <summary>
        /// The date the order was placed. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00. If no time zone is specified, UTC should be assumed.
        /// </summary>
        /// <value>The date the order was placed. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00. If no time zone is specified, UTC should be assumed.</value>
        [DataMember(Name="orderDate", EmitDefaultValue=false)]
        public DateTime? OrderDate { get; set; }


        /// <summary>
        /// Gets or Sets ShipmentDetails
        /// </summary>
        [DataMember(Name="shipmentDetails", EmitDefaultValue=false)]
        public ShipmentDetails ShipmentDetails { get; set; }

        /// <summary>
        /// Gets or Sets TaxTotal
        /// </summary>
        [DataMember(Name="taxTotal", EmitDefaultValue=false)]
        public Object TaxTotal { get; set; }

        /// <summary>
        /// PartyID of vendor code.
        /// </summary>
        /// <value>PartyID of vendor code.</value>
        [DataMember(Name="sellingParty", EmitDefaultValue=false)]
        public PartyIdentification SellingParty { get; set; }

        /// <summary>
        /// PartyID of vendor&#39;s warehouse.
        /// </summary>
        /// <value>PartyID of vendor&#39;s warehouse.</value>
        [DataMember(Name="shipFromParty", EmitDefaultValue=false)]
        public PartyIdentification ShipFromParty { get; set; }

        /// <summary>
        /// Name/Address and tax details of the ship to party.
        /// </summary>
        /// <value>Name/Address and tax details of the ship to party.</value>
        [DataMember(Name="shipToParty", EmitDefaultValue=false)]
        public Address ShipToParty { get; set; }

        /// <summary>
        /// Name/Address and tax details of the bill to party.
        /// </summary>
        /// <value>Name/Address and tax details of the bill to party.</value>
        [DataMember(Name="billToParty", EmitDefaultValue=false)]
        public PartyIdentification BillToParty { get; set; }

        /// <summary>
        /// A list of items in this purchase order.
        /// </summary>
        /// <value>A list of items in this purchase order.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<OrderItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderDetails {\n");
            sb.Append("  CustomerOrderNumber: ").Append(CustomerOrderNumber).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  ShipmentDetails: ").Append(ShipmentDetails).Append("\n");
            sb.Append("  TaxTotal: ").Append(TaxTotal).Append("\n");
            sb.Append("  SellingParty: ").Append(SellingParty).Append("\n");
            sb.Append("  ShipFromParty: ").Append(ShipFromParty).Append("\n");
            sb.Append("  ShipToParty: ").Append(ShipToParty).Append("\n");
            sb.Append("  BillToParty: ").Append(BillToParty).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderDetails);
        }

        /// <summary>
        /// Returns true if OrderDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomerOrderNumber == input.CustomerOrderNumber ||
                    (this.CustomerOrderNumber != null &&
                    this.CustomerOrderNumber.Equals(input.CustomerOrderNumber))
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.OrderStatus == input.OrderStatus ||
                    (this.OrderStatus != null &&
                    this.OrderStatus.Equals(input.OrderStatus))
                ) && 
                (
                    this.ShipmentDetails == input.ShipmentDetails ||
                    (this.ShipmentDetails != null &&
                    this.ShipmentDetails.Equals(input.ShipmentDetails))
                ) && 
                (
                    this.TaxTotal == input.TaxTotal ||
                    (this.TaxTotal != null &&
                    this.TaxTotal.Equals(input.TaxTotal))
                ) && 
                (
                    this.SellingParty == input.SellingParty ||
                    (this.SellingParty != null &&
                    this.SellingParty.Equals(input.SellingParty))
                ) && 
                (
                    this.ShipFromParty == input.ShipFromParty ||
                    (this.ShipFromParty != null &&
                    this.ShipFromParty.Equals(input.ShipFromParty))
                ) && 
                (
                    this.ShipToParty == input.ShipToParty ||
                    (this.ShipToParty != null &&
                    this.ShipToParty.Equals(input.ShipToParty))
                ) && 
                (
                    this.BillToParty == input.BillToParty ||
                    (this.BillToParty != null &&
                    this.BillToParty.Equals(input.BillToParty))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerOrderNumber != null)
                    hashCode = hashCode * 59 + this.CustomerOrderNumber.GetHashCode();
                if (this.OrderDate != null)
                    hashCode = hashCode * 59 + this.OrderDate.GetHashCode();
                if (this.OrderStatus != null)
                    hashCode = hashCode * 59 + this.OrderStatus.GetHashCode();
                if (this.ShipmentDetails != null)
                    hashCode = hashCode * 59 + this.ShipmentDetails.GetHashCode();
                if (this.TaxTotal != null)
                    hashCode = hashCode * 59 + this.TaxTotal.GetHashCode();
                if (this.SellingParty != null)
                    hashCode = hashCode * 59 + this.SellingParty.GetHashCode();
                if (this.ShipFromParty != null)
                    hashCode = hashCode * 59 + this.ShipFromParty.GetHashCode();
                if (this.ShipToParty != null)
                    hashCode = hashCode * 59 + this.ShipToParty.GetHashCode();
                if (this.BillToParty != null)
                    hashCode = hashCode * 59 + this.BillToParty.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
