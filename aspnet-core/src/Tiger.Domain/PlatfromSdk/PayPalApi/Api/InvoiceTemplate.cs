//==============================================================================
//
//  This file was auto-generated by a tool using the PayPal REST API schema.
//  More information: https://developer.paypal.com/docs/api/
//
//==============================================================================
using System.Collections.Generic;
using Newtonsoft.Json;
using PayPal.Util;

namespace PayPal.Api
{
    /// <summary>
    /// Invoicing template.
    /// <para>
    /// See <a href="https://developer.paypal.com/docs/api/">PayPal Developer documentation</a> for more information.
    /// </para>
    /// </summary>
    public class InvoiceTemplate : PayPalResource
    {
        /// <summary>
        /// The ID of the template.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "template_id")]
        public string template_id { get; set; }

        /// <summary>
        /// The template name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "name")]
        public string name { get; set; }

        /// <summary>
        /// Indicates whether this template is the default merchant template. A merchant can have one default template.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "default")]
        public bool? @default { get; set; }

        /// <summary>
        /// Customized invoice data, which is saved as the template.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "template_data")]
        public InvoiceTemplateData template_data { get; set; }

        /// <summary>
        /// Settings for each template.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settings")]
        public List<InvoiceTemplateSettings> settings { get; set; }

        /// <summary>
        /// The unit of measure for the template. Value is quantity, hours, or amount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "unit_of_measure")]
        public string unit_of_measure { get; set; }

        /// <summary>
        /// Indicates whether this template is a merchant-created custom template. Non-custom templates are system generated.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "custom")]
        public bool? custom { get; set; }

        /// <summary>
        /// Shows details for a template, by ID.
        /// </summary>
        /// <param name="apiContext">APIContext used for the API call.</param>
        /// <param name="templateId">The ID of the template for which to show details.</param>
        /// <returns>Template</returns>
        public static InvoiceTemplate Get(APIContext apiContext, string templateId)
        {
            // Validate the arguments to be used in the request
            ArgumentValidator.ValidateAndSetupAPIContext(apiContext);
            ArgumentValidator.Validate(templateId, "templateId");

            // Configure and send the request
            var pattern = "v1/invoicing/templates/{0}";
            var resourcePath = SDKUtil.FormatURIPath(pattern, new object[] { templateId });
            return PayPalResource.ConfigureAndExecute<InvoiceTemplate>(apiContext, HttpMethod.GET, resourcePath);
        }

        /// <summary>
        /// Lists all merchant-created templates. The list shows the emails, addresses, and phone numbers from the merchant profile.
        /// </summary>
        /// <param name="apiContext">APIContext used for the API call.</param>
        /// <param name="fields">The fields to return in the response. Value is `all` or `none`. Specify `none` to return only the template name, ID, and default attributes.</param>
        /// <returns>Templates</returns>
        public static InvoiceTemplates GetAll(APIContext apiContext, string fields = "all")
        {
            // Validate the arguments to be used in the request
            ArgumentValidator.ValidateAndSetupAPIContext(apiContext);

            var queryParameters = new QueryParameters();
            queryParameters["fields"] = fields;

            // Configure and send the request
            var resourcePath = "v1/invoicing/templates" + queryParameters.ToUrlFormattedString();
            return PayPalResource.ConfigureAndExecute<InvoiceTemplates>(apiContext, HttpMethod.GET, resourcePath);
        }

        /// <summary>
        /// Deletes a template, by ID.
        /// </summary>
        /// <param name="apiContext">APIContext used for the API call.</param>
        public void Delete(APIContext apiContext)
        {
            InvoiceTemplate.Delete(apiContext, this.template_id);
        }

        /// <summary>
        /// Deletes a template, by ID.
        /// </summary>
        /// <param name="apiContext">APIContext used for the API call.</param>
        /// <param name="templateId">The ID of the template to delete.</param>
        public static void Delete(APIContext apiContext, string templateId)
        {
            // Validate the arguments to be used in the request
            ArgumentValidator.ValidateAndSetupAPIContext(apiContext);
            ArgumentValidator.Validate(templateId, "templateId");

            // Configure and send the request
            apiContext.MaskRequestId = true;
            var pattern = "v1/invoicing/templates/{0}";
            var resourcePath = SDKUtil.FormatURIPath(pattern, new object[] { templateId });
            PayPalResource.ConfigureAndExecute(apiContext, HttpMethod.DELETE, resourcePath);
        }

        /// <summary>
        /// Creates a template.
        /// </summary>
        /// <param name="apiContext">APIContext used for the API call.</param>
        /// <returns>Template</returns>
        public InvoiceTemplate Create(APIContext apiContext)
        {
            // Validate the arguments to be used in the request
            ArgumentValidator.ValidateAndSetupAPIContext(apiContext);
            ArgumentValidator.Validate(this, "template");

            // Configure and send the request
            var resourcePath = "v1/invoicing/templates";
            return PayPalResource.ConfigureAndExecute<InvoiceTemplate>(apiContext, HttpMethod.POST, resourcePath, this.ConvertToJson());
        }

        /// <summary>
        /// Updates a template, by ID. In the JSON request body, pass a complete `template` object. The update method does not support partial updates.
        /// </summary>
        /// <param name="apiContext">APIContext used for the API call.</param>
        /// <returns>Template</returns>
        public InvoiceTemplate Update(APIContext apiContext)
        {
            // Validate the arguments to be used in the request
            ArgumentValidator.ValidateAndSetupAPIContext(apiContext);
            ArgumentValidator.Validate(this, "template");

            // Configure and send the request
            var pattern = "v1/invoicing/templates/{0}";
            var resourcePath = SDKUtil.FormatURIPath(pattern, new object[] { this.template_id });
            return PayPalResource.ConfigureAndExecute<InvoiceTemplate>(apiContext, HttpMethod.PUT, resourcePath, this.ConvertToJson());
        }
    }
}
