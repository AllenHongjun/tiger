//==============================================================================
//
//  This file was auto-generated by a tool using the PayPal REST API schema.
//  More information: https://developer.paypal.com/docs/api/
//
//==============================================================================
using Newtonsoft.Json;
using PayPal.Util;
using System;

namespace PayPal.Api
{
    /// <summary>
    /// A capture transaction.
    /// <para>
    /// See <a href="https://developer.paypal.com/docs/api/">PayPal Developer documentation</a> for more information.
    /// </para>
    /// </summary>
    public class Capture : PayPalRelationalObject
    {
        /// <summary>
        /// The ID of the capture transaction.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "id")]
        public string id { get; set; }

        /// <summary>
        /// The amount to capture. If the amount matches the orginally authorized amount, the state of the authorization changes to `captured`. If not, the state of the authorization changes to `partially_captured`.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "amount")]
        public Amount amount { get; set; }

        /// <summary>
        /// Indicates whether to release all remaining funds that the authorization holds in the funding instrument. Default is `false`.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "is_final_capture")]
        public bool? is_final_capture { get; set; }

        /// <summary>
        /// The state of the capture.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "state")]
        public string state { get; set; }

        /// <summary>
        /// The reason code that describes why the transaction state is pending or reversed.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "reason_code")]
        public string reason_code { get; set; }

        /// <summary>
        /// The ID of the payment on which this transaction is based.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "parent_payment")]
        public string parent_payment { get; set; }

        /// <summary>
        /// The invoice number to track this payment.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "invoice_number")]
        public string invoice_number { get; set; }

        /// <summary>
        /// The transaction fee for this payment.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "transaction_fee")]
        public Currency transaction_fee { get; set; }

        /// <summary>
        /// The date and time of capture, as defined in [RFC 3339 Section 5.6](http://tools.ietf.org/html/rfc3339#section-5.6).
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "create_time")]
        public string create_time { get; set; }

        /// <summary>
        /// The date and time when the resource was last updated.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "update_time")]
        public string update_time { get; set; }

        /// <summary>
        /// Shows details for a captured payment, by ID.
        /// </summary>
        /// <param name="apiContext">APIContext used for the API call.</param>
        /// <param name="captureId">The ID of the captured payment for which to show details.</param>
        /// <returns>Capture</returns>
        public static Capture Get(APIContext apiContext, string captureId)
        {
            // Validate the arguments to be used in the request
            ArgumentValidator.ValidateAndSetupAPIContext(apiContext);
            ArgumentValidator.Validate(captureId, "captureId");

            // Configure and send the request
            var pattern = "v1/payments/capture/{0}";
            var resourcePath = SDKUtil.FormatURIPath(pattern, new object[] { captureId });
            return PayPalResource.ConfigureAndExecute<Capture>(apiContext, HttpMethod.GET, resourcePath);
        }

        /// <summary>
        /// Creates (and processes) a new Refund Transaction added as a related resource.
        /// </summary>
        /// <param name="apiContext">APIContext used for the API call.</param>
        /// <param name="refund">Refund</param>
        /// <returns>Refund</returns>
	    [Obsolete("Use Refund(ApiContext, RefundRequest instead")]
        public Refund Refund(APIContext apiContext, Refund refund)
        {
            return Capture.Refund(apiContext, this.id, refund);
        }

        /// <summary>
        /// Creates (and processes) a new Refund Transaction added as a related resource.
        /// </summary>
        /// <param name="apiContext">APIContext used for the API call.</param>
        /// <param name="captureId">ID of the captured payment resource to refund.</param>
        /// <param name="refund">Refund</param>
        /// <returns>Refund</returns>
	    [Obsolete("Use Refund(ApiContext, RefundRequest instead")]
        public static Refund Refund(APIContext apiContext, string captureId, Refund refund)
        {
            // Validate the arguments to be used in the request
            ArgumentValidator.ValidateAndSetupAPIContext(apiContext);
            ArgumentValidator.Validate(captureId, "captureId");
            ArgumentValidator.Validate(refund, "refund");

            // Configure and send the request
            var pattern = "v1/payments/capture/{0}/refund";
            var resourcePath = SDKUtil.FormatURIPath(pattern, new object[] { captureId });
            return PayPalResource.ConfigureAndExecute<Refund>(apiContext, HttpMethod.POST, resourcePath, refund.ConvertToJson());
        }

        /// <summary>
        /// Refunds a captured payment, by ID. Include an `amount` object in the JSON request body.
        /// </summary>
        /// <param name="apiContext">APIContext used for the API call.</param>
        /// <param name="refundRequest">RefundRequest</param>
        /// <returns>DetailedRefund</returns>
        public static DetailedRefund Refund(APIContext apiContext, string captureId, RefundRequest refundRequest)
        {
            // Validate the arguments to be used in the request
            ArgumentValidator.ValidateAndSetupAPIContext(apiContext);
            ArgumentValidator.Validate(captureId, "captureId");
            ArgumentValidator.Validate(refundRequest, "refundRequest");

            // Configure and send the request
            var pattern = "v1/payments/capture/{0}/refund";
            var resourcePath = SDKUtil.FormatURIPath(pattern, new object[] { captureId });
            return PayPalResource.ConfigureAndExecute<DetailedRefund>(apiContext, HttpMethod.POST, resourcePath, refundRequest.ConvertToJson());
        }
    }
}
