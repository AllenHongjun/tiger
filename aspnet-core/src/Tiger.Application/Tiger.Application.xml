<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tiger.Application</name>
    </assembly>
    <members>
        <member name="T:Tiger.Books.AuthorAppService">
            <summary>
            实现 author 的服务层
            </summary>
        </member>
        <member name="M:Tiger.Books.AuthorAppService.CreateAsync(Tiger.Books.CreateAuthorDto)">
            <summary>
            添加作者
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.AuthorAppService.DeleteAsync(System.Guid)">
            <summary>
            删除作者
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.AuthorAppService.GetAsync(System.Guid)">
            <summary>
            获取作者明细
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            这个方法根据 `Id` 获得 `Author` 实体, 使用 [对象到对象映射](../Object-To-Object-Mapping.md) 转换为 `AuthorDto`. 这需要配置AutoMapper, 后面会介绍.
            </remarks>
        </member>
        <member name="M:Tiger.Books.AuthorAppService.GetListAsync(Tiger.Books.GetAuthorListDto)">
            <summary>
            获取作者列表
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:Tiger.Books.AuthorAppService.UpdateAsync(System.Guid,Tiger.Books.UpdateAuthorDto)">
            <summary>
            修改作者信息
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Books.BlogModule.BlogModule">
            <summary>
            由于ABP是一个模块化框架,因此每个模块都定义它自己的服务并在它自己的单独模块类中通过依赖注入进行注册.例:
            </summary>
        </member>
        <member name="M:Tiger.Books.BlogModule.BlogModule.PreConfigureServices(Volo.Abp.Modularity.ServiceConfigurationContext)">
            <summary>
            ABP引入了依照约定的服务注册.依照约定你无需做任何事,它会自动完成.如果要禁用它,你可以通过重写PreConfigureServices方法,设置SkipAutoServiceRegistration为true.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Tiger.Books.BlogModule.BlogPostAppService">
            <summary>
            BlogPostAppService 由于它是从已知的基类派生的,因此会自动注册为transient生命周期.
            </summary>
        </member>
        <member name="T:Tiger.Books.BlogModule.TaxCalculator">
            <summary>
            TaxCalculator因为实现了ITransientDependency,所以它会自动注册为transient生命周期.
            </summary>
        </member>
        <member name="T:Tiger.Books.BlogModule.TaxCalculator4">
             <summary>
             配置依赖注入服务的另一种方法是使用DependencyAttribute.它具有以下属性:
             Singleton  指定将创建服务的单个实例。
             Transient或Scoped  指定将为每个范围创建服务的新实例。
             Lifetime: 注册的生命周期:Singleton,Transient或Scoped.
            TryRegister: 设置true则只注册以前未注册的服务.使用IServiceCollection的TryAdd...扩展方法.
            ReplaceServices: 设置true则替换之前已经注册过的服务.使用IServiceCollection的Replace扩展方法.
             
             Transient  指定每次创建服务的新实例
             </summary>
        </member>
        <member name="T:Tiger.Books.BlogModule.TaxAppService">
            <summary>
            注入依赖关系
            使用已注册的服务有三种常用方法.
            
            继承 autofac 很简单 主要是使用。 有些时候 不是按照规范来依赖注入组件的话 就会无法启用。
            
            
            </summary>
        </member>
        <member name="T:Tiger.Books.BookAppService">
            <summary>
            书籍管理
            </summary>
            
        </member>
        <member name="M:Tiger.Books.BookAppService.GetAsync(System.Guid)">
            <summary>
            查询一条书籍数据
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            重写父类的 GetAsync方法
            </remarks>
        </member>
        <member name="M:Tiger.Books.BookAppService.GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto)">
            <summary>
            分页查询书籍的数据
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.BookAppService.GetAuthorLookupAsync">
            <summary>
            获取作者筛选列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.BookAppService.DeleteBooksByType(Tiger.Books.BookType)">
            <summary>
            根据类型删除书籍
            </summary>
            <param name="bookType"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.BookAppService.Upload(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传 文件,并返回相对url(不包含 host port wwwroot)
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.BookAppService.MultiFileUpload(Microsoft.AspNetCore.Http.IFormFileCollection)">
            <summary>
             多文件上传
            </summary>
            <param name="formCollection">表单集合值</param>
            <returns>服务器存储的文件信息</returns>
            <summary>
            上传 文件,并返回相对url(不包含 host port wwwroot)
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Books.BookAppService.UploadFileRequest">
            <summary>
            对文件上传响应模型
            </summary>
        </member>
        <member name="P:Tiger.Books.BookAppService.UploadFileRequest.FileName">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:Tiger.Books.BookAppService.UploadFileRequest.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="M:Tiger.Books.BookAppService.UploadQiniu(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            七牛单文件上传
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.BookAppService.UploadQiniu(System.Collections.Generic.IList{Microsoft.AspNetCore.Http.IFormFile})">
            <summary>
            七牛多文件上传
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Books.Demo.MyBookService">
             <summary>
             注入 IDataFilter 服务到你的类中.
            在 using 语句中使用 Disable 方法创建一个代码块, 其中禁用了 ISoftDelete 过滤器(始终与 using 搭配使用,确保代码块执行后将过滤重置为之前的状态).
            IDataFilter.Enable 方法可以启用过滤.可以嵌套使用 Enable 和 Disable 方法定义内部作用域.
            
             
             
             
             
             </summary>
        </member>
        <member name="T:Tiger.Books.Demo.MyProductService">
            <summary>
            实现这个接口 ITransientDependency 就会作为瞬态注入到服务当中。
            </summary>
        </member>
        <member name="T:Tiger.Books.Demo.MyService">
            <summary>
            获取当前用户相关的信息
            
            在Web应用程序中检索有关已登录用户的信息是很常见的. 当前用户是与Web应用程序中的当前请求相关的活动用户.
            </summary>
        </member>
        <member name="T:Tiger.Books.Demo.PersonAppService">
            <summary>
            人物
            </summary>
            <remark>
            repssitories 仓储数据查询
            </remark>
        </member>
        <member name="M:Tiger.Books.Demo.PersonAppService.GetList(System.String)">
            <summary>
            获取列表数据
            </summary>
            <param name="nameFilter"></param>
            <returns></returns>
            <remarks>
            GetList 方法使用标准LINQ Where 和 ToList 方法在数据源中过滤并获取People集合.
            </remarks>
        </member>
        <member name="M:Tiger.Books.Demo.PersonAppService.GetListAsync(System.String)">
            <summary>
            通过仓储对象来对实体执行LINQ查询以操作数据库
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.Demo.PersonAppService.TestQueryableAndAsync(System.String)">
            <summary>
            测试 IQueryable 异步操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailSendAsync">
            <summary>
            邮件发送测试
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailQueueAsync">
            <summary>
            通过队列发送邮件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailSendWithAttachmentAsync">
            <summary>
            发送邮件附件
            </summary>
            <returns></returns>
            <remarks>
            附件发送邮件 https://learn.microsoft.com/zh-cn/dotnet/api/system.net.mail.mailmessage?view=net-7.0
            </remarks>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailSendWithTemplateRenderer">
            <summary>
            测试使用文本模板发送邮件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailSendWithCustomTemplateRenderer">
            <summary>
            替换覆盖文件模板
            </summary>
            <returns></returns>
            <remarks>
            虚拟文件系统 https://docs.abp.io/zh-Hans/abp/latest/Virtual-File-System
            </remarks>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.EncryptPwd">
            <summary>
            加密邮箱密码
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Tiger.Books.IAuthorAppService">
            <summary>
            作者应用服务接口
            </summary>
            <remarks>
            `IApplicationService` 是一个常规接口, 所有应用服务都继承自它, 所以 ABP 框架可以识别它们.
            在 `Author` 实体中定义标准方法用于CRUD操作.
            `PagedResultDto` 是一个ABP框架中预定义的 DTO 类. 它拥有一个 `Items` 集合 和一个 `TotalCount` 属性, 用于返回分页结果.
            优先从 `CreateAsync` 方法返回 `AuthorDto` (新创建的作者), 虽然在这个程序中没有这么做 - 这里只是展示一种不同用法.
            </remarks>
        </member>
        <member name="T:Tiger.Infrastructure.BackgroundJob.RegistrationService">
            <summary>
            使用 IBackgroundJobManager 服务向队列中添加一个发送电子邮件作业
            </summary>
        </member>
        <member name="M:Tiger.Infrastructure.BackgroundWorker.DailySalesWorker.Execute(Quartz.IJobExecutionContext)">
            <summary>
            测试定时任务功能。
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Infrastructure.BackgroundWorker.PassiveUserCheckerWorker">
            <summary>
            设置用户为不活跃用户(如果用户最近30天未登录应用程序)
            </summary>
        </member>
        <member name="T:Tiger.Infrastructure.BackgroundWorker.ResourceConsumptionWorker">
            <summary>
            资源消耗
            </summary>
        </member>
        <member name="T:Tiger.Infrastructure.Features.MyFeatureDefinitionProvider">
            <summary>
            定义特性
            </summary>
            <remarks>
            定义特性常量应该放到 contrat 这一层当中使用
            
            ABP会自动发现此类并注册特征.无需其他配置。
            
            此类通常在解决方案的项目中创建。Application.Contracts
            </remarks>
        </member>
        <member name="M:Tiger.Infrastructure.Features.ReportingAppService.GetPdfReportAsync(System.Int32)">
            <summary>
            功能特性使用demo
            </summary>
            <returns></returns>
            <remarks>
            RequiresFeature(...)只需获取一个功能名称以检查它是否已启用。如果未启用，则会引发授权异常，并向客户端返回正确的响应。
            RequiresFeature可能会获得多个功能名称，例如 .在这种情况下，ABP检查是否启用了任何功能.使用选项，例如强制检查要启用的所有功能。[RequiresFeature("Feature1", "Feature2")]RequiresAll[RequiresFeature("Feature1", "Feature2", RequiresAll = true)]
            可以多此使用
            
            拦截的方法要遵循规则
            </remarks>
        </member>
        <member name="T:Tiger.Infrastructure.ObjectMapping.TigerApplicationAutoMapperProfile">
             <summary>
             AutoMapper提供了多种定义类之间映射的方法. 有关详细信息请参阅AutoMapper的文档.
            其中定义一种映射的方法是创建一个Profile 类.例如:
             </summary>
        </member>
        <member name="T:Tiger.BackgroundWorker.MyQuartzLogWorker">
            <summary>
            Demo 定时任务
            </summary>
            <remarks>
            
            一定要定义Trigger  和JobDetail 不然项目无法启动
            如果数据库 的 Trigger状态是error就无法启动
            不能和 abp自带的任务管理器一起使用 会无法运行
            安装模块化的事项 那个模块需要什么作业 把作业放到对应的模块里面
            </remarks>
        </member>
        <member name="M:Tiger.BackgroundWorker.MyQuartzLogWorker.Execute(Quartz.IJobExecutionContext)">
            <summary>
            测试定时任务功能。
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.BlobDemo.MyBlobContainer">
            <summary>
            类型化BLOB容器系统是一种在应用程序中创建和管理多个容器的方法;
            </summary>
        </member>
        <member name="T:Tiger.BlobDemo.MyBlobContainerConfigurationExtensions">
            <summary>
            一个更简单的配置方式,可以为 BlobContainerConfiguration 类创建一个扩展方法:
            </summary>
        </member>
        <member name="T:Tiger.BlobDemo.MyCustomBlobProvider">
             <summary>
             自定义 对象存储提供程序
             
             MyCustomBlobProvider 继承 BlobProviderBase 并覆盖 abstract 方法. 实际的实现取决于你.
            实现 ITransientDependency 接口将这个类注做为瞬态服务注册到依赖注入系统.
            注意: 命名约定很重要. 如果类名没有以 BlobProvider 结尾,则必须手动注册/公开你的服务为 IBlobProvider.
             </summary>
        </member>
        <member name="M:Tiger.BlobDemo.MyCustomBlobProvider.SaveAsync(Volo.Abp.BlobStoring.BlobProviderSaveArgs)">
            <summary>
            七牛文件上传保存
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.BlobDemo.MyCustomBlobProviderConfiguration">
            <summary>
            BlobContainerConfiguration 允许添加/删除提供程序特定的配置对象. 
            如果你的提供者需要额外的配置,你可以为 BlobContainerConfiguration 创建一个包装类提供的类型安全配置选项:
            </summary>
        </member>
        <member name="T:Tiger.BlobDemo.MyService">
            <summary>
            该服务用 my-blob-1 名称保存给定的字节,然后以相同的名称获取先前保存的字节.
            一个BLOB是一个命名对象,每个BLOB都应该有一个唯一的名称,它是一个任意的字符串.
            </summary>
        </member>
        <member name="T:Tiger.BlobDemo.ProfileAppService">
            <summary>
            示例: 用于保存和读取当前用户的个人资料图片的应用服务
            </summary>
        </member>
        <member name="M:Tiger.BlobDemo.ProfileAppService.SaveProfilePictureAsync(System.Byte[])">
            <summary>
            保存图片
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.BlobDemo.ProfileAppService.GetProfilePictureAsync">
            <summary>
            获取图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.BlobDemo.ProfileAppService.SaveMyBlobAsync(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            保存图片
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.BlobDemo.ProfileAppService.GetMyBlobAsync">
            <summary>
            获取图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.BlobDemo.ProfileAppService.SaveQiniuBlobAsync(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            保存图片
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.BlobDemo.ProfilePictureContainer">
            <summary>
            类型化BLOB容器系统是一种在应用程序中创建和管理多个容器的方法;
            </summary>
        </member>
        <member name="T:Tiger.Blob.Qinui.QiniuBlobContainer">
            <summary>
            类型化BLOB容器系统是一种在应用程序中创建和管理多个容器的方法;
            </summary>
        </member>
        <member name="T:Tiger.Blob.Qinui.QiniuBlobProvider">
            <summary>
            七牛 oss对象存储  https://developer.qiniu.com/kodo/1237/csharp  
            </summary>
        </member>
        <member name="M:Tiger.Module.OssManagement.FileAppServiceBase.UploadAsync(Tiger.Module.OssManagement.Dtos.UploadFileChunkInput)">
            <summary>
            文件直接上传
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.OssManagement.FileAppServiceBase.UploadAsync(Tiger.Module.OssManagement.Dtos.UploadFileInput)">
            <summary>
            文件分片上传
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.OssManagement.FileUploadMerger.MergeAsync(Tiger.Module.OssManagement.Dtos.CreateOssObjectInput)">
            <summary>
            合并文件
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Module.OssManagement.PrivateFileAppService">
            <summary>
            所有登录用户访问私有文件服务接口
            bucket限制在users
            path限制在用户id
            </summary>
        </member>
        <member name="T:Tiger.Module.OssManagement.StaticFilesAppService">
            <summary>
            静态文件上传服务
            </summary>
        </member>
        <member name="T:Tiger.Module.System.Cache.CacheAppService">
            <summary>
            缓存管理服务
            </summary>
        </member>
        <member name="T:Tiger.Module.System.Localization.LanguageAppService">
            <summary>
            语言管理服务
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Localization.LanguageAppService.GetListAsync(Tiger.Module.System.Localization.Dtos.LanguageGetListInput)">
            <summary>
            分页查询语言
            </summary>     
        </member>
        <member name="M:Tiger.Module.System.Localization.LanguageAppService.CreateAsync(Tiger.Module.System.Localization.Dtos.LanguageTextDto)">
            <summary>
            创建语言
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Localization.LanguageAppService.UpdateAsync(System.Guid,Tiger.Module.System.Localization.Dtos.UpdateLanguageDto)">
            <summary>
            编辑语言
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Localization.LanguageAppService.DeleteAsync(System.Guid)">
            <summary>W
            删除语言
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Localization.LanguageAppService.SetDefaultAsync(System.Guid)">
            <summary>
            设置默认语言
            </summary>
        </member>
        <member name="T:Tiger.Module.System.Localization.LanguageTextAppService">
            <summary>
            语言文本
            </summary>
        </member>
        <member name="T:Tiger.Module.System.Platform.Datas.DataAppService">
            <summary>
            数据字典
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.GetAsync(System.String)">
            <summary>
            根据名称查询数据字典
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.GetAllAsync">
            <summary>
            查询所有数据字典
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.GetListAsync(Tiger.Module.System.Platform.Datas.Dtos.DataGetListInput)">
            <summary>
            分页查询数据字典
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.CreateAsync(Tiger.Module.System.Platform.Datas.Dtos.DataCreateDto)">
            <summary>
            创建数据字典
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.UpdateAsync(System.Guid,Tiger.Module.System.Platform.Datas.Dtos.DataUpdateDto)">
            <summary>
            更新数据字典
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            修改的时候同时可以修改数据字典数据
            </remarks>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.DeleteAsync(System.Guid)">
            <summary>
            移除数据字典
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.MoveAsync(System.Guid,Tiger.Module.System.Platform.Datas.Dtos.DataMoveDto)">
            <summary>
            移动数据字典
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.CreateItemAsync(System.Guid,Tiger.Module.System.Platform.Datas.Dtos.DataItemCreateDto)">
            <summary>
            创建字典数据
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.UpdateItemAsync(System.Guid,System.String,Tiger.Module.System.Platform.Datas.Dtos.DataItemUpdateDto)">
            <summary>
            更新字典数据
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.DeleteItemAsync(System.Guid,System.String)">
            <summary>
            根据名称删除字典数据
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Module.System.Platform.Layouts.LayoutAppService">
            <summary>
            布局
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Platform.Layouts.LayoutAppService.CreateAsync(Tiger.Module.System.Platform.Layouts.Dto.LayoutCreateDto)">
            <summary>
            创建布局
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Module.System.Platform.Layouts.LayoutAppService.GetAllListAsync">
            <summary>
            获取所有布局
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Layouts.LayoutAppService.GetAsync(System.Guid)">
            <summary>
            根据id获取布局
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Module.System.Platform.Layouts.LayoutAppService.GetListAsync(Tiger.Module.System.Platform.Layouts.Dto.GetLayoutListInput)">
            <summary>
            分页查询布局列表
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Module.System.Platform.Layouts.LayoutAppService.UpdateAsync(System.Guid,Tiger.Module.System.Platform.Layouts.Dto.LayoutUpdateDto)">
            <summary>
            更新布局
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Module.System.Platform.Menus.MenuAppService">
            <summary>
            菜单
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Platform.Menus.MenuAppService.CreateAsync(Tiger.Module.System.Platform.Menus.Dto.MenuCreateDto)">
            <summary>
            创建菜单
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Menus.MenuAppService.UpdateAsync(System.Guid,Tiger.Module.System.Platform.Menus.Dto.MenuUpdateDto)">
            <summary>
            更新菜单
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Menus.MenuAppService.DeleteAsync(System.Guid)">
            <summary>
            删除菜单
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.BusinessException"></exception>
        </member>
        <member name="M:Tiger.Module.System.Platform.Menus.MenuAppService.GetAllAsync(Tiger.Module.System.Platform.Menus.Dto.MenuGetAllInput)">
            <summary>
            获取所有菜单
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Menus.MenuAppService.GetAsync(System.Guid)">
            <summary>
            获取菜单详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Menus.MenuAppService.GetListAsync(Tiger.Module.System.Platform.Menus.Dto.MenuGetListInput)">
            <summary>
            分页查询菜单列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Menus.MenuAppService.GetRoleMenuListAsync(Tiger.Module.System.Platform.Menus.Dto.MenuGetByRoleInput)">
            <summary>
            获取角色菜单
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Module.System.Platform.Versions.VersionAppService">
            <summary>
            版本文件管理
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Server.ServerAppService.GetServerBase">
            <summary>
            获取服务器配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Server.ServerAppService.GetServerUsed">
            <summary>
            获取服务器使用信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Server.ServerAppService.GetServerDisk">
            <summary>
            获取服务器磁盘信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tiger.Module.System.TextTemplate.TextTemplateAppService">
            <summary>
            文本模板服务
            </summary>
        </member>
        <member name="M:Tiger.Module.System.TextTemplate.TextTemplateAppService.GetAsync(System.String)">
            <summary>
            根据文本模板名称获取定义内容
            </summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Module.System.TextTemplate.TextTemplateAppService.GetContentAsync(Tiger.Module.System.TextTemplate.Dtos.TextTemplateContentGetInput)">
            <summary>
            获取文本模板内容
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Module.System.TextTemplate.TextTemplateAppService.GetListAsync(Tiger.Module.System.TextTemplate.Dtos.TextTemplateGetListInput)">
            <summary>
            获取所有的文本模板内容
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            abp的文本模板作为资源定义在文件中 从文件中读取出来展示
            </remarks>
        </member>
        <member name="M:Tiger.Module.System.TextTemplate.TextTemplateAppService.RestoreToDefaultAsync(Tiger.Module.System.TextTemplate.Dtos.TextTemplateRestoreInput)">
            <summary>
            重置默认值
            </summary>
            <param name="restoreInput"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.TextTemplate.TextTemplateAppService.UpdateAsync(Tiger.Module.System.TextTemplate.Dtos.TextTemplateUpdateInput)">
            <summary>
            更新文本模板内容
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.TextTemplate.TextTemplateAppService.GetTemplateDefinition(System.String)">
            <summary>
            根据名称获取模板定义
            </summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>
            TemplateDefinition abp的定义模板获取  使用之前需要先定义
            详细见文档 https://docs.abp.io/en/abp/latest/Text-Templating-Razor
            </remarks>
        </member>
        <member name="M:Tiger.Utilities.DownLoadUpLoadFilesHelper.UploadAppService.Upload(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传 文件,并返回相对url(不包含 host port wwwroot)
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.TigerApplicationModule">
            <summary>
            项目包含 .Application.Contracts 项目的 应用服务 接口实现.
            它依赖 .Application.Contracts 项目, 因为它需要实现接口与使用DTO.
            它依赖 .Domain 项目,因为它需要使用领域对象(实体,仓储接口等)执行应用程序逻辑.
            </summary>
        </member>
        <member name="T:Tiger.Volo.Abp.Account.TigerAccountAppService">
            <summary>
            用户账号管理
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.RegisterAsync(Tiger.Volo.Abp.Account.Dto.PhoneRegisterDto)">
            <summary>
            通过手机号注册
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.ResetPasswordAsync(Tiger.Volo.Abp.Account.Dto.PhoneResetPasswordDto)">
            <summary>
            通过手机验证码重置密码
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.SendPhoneRegisterCodeAsync(Tiger.Volo.Abp.Account.Dto.SendPhoneRegisterCodeDto)">
            <summary>
            发送注册短信验证码
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.SendPhoneSigninCodeAsync(Tiger.Volo.Abp.Account.Dto.SendPhoneSigninCodeDto)">
            <summary>
            发送手机号登录验证码
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.ThrowIfInvalidEmailAddress(System.String)">
            <summary>
            
            </summary>
            <param name="inputEmail"></param>
            <exception cref="T:Volo.Abp.Validation.AbpValidationException"></exception>
        </member>
        <member name="T:Tiger.Volo.Abp.Account.TigerProfileAppService">
            <summary>
            Profile服务
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerProfileAppService.ChangePhoneNumberAsync(Tiger.Volo.Abp.Account.Dto.ChangePhoneNumberInput)">
            <summary>
            修改绑定的手机号
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerProfileAppService.SendChangePhoneNumberCodeAsync(Tiger.Volo.Abp.Account.Dto.SendChangePhoneNumberCodeInput)">
            <summary>
            发送修改手机号验证码
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerProfileAppService.SendEmailConfirmLinkAsync(Tiger.Volo.Abp.Account.Dto.SendEmailConfirmCodeDto)">
            <summary>
            发送邮箱确认链接
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerProfileAppService.ConfirmEmailAsync(Tiger.Volo.Abp.Account.Dto.ComfirmEmailInput)">
            <summary>
            用户确认邮箱
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerProfileAppService.ChangeAvatarAsync(Tiger.Volo.Abp.Account.Dto.ChangeAvatarInput)">
            <summary>
            修改用户头像
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.FeatureManagement.TigerFeatureAppService">
            <summary>
            特性管理
            </summary>
        </member>
        <member name="T:Tiger.Volo.Abp.IdentityServer.ClientAppService">
            <summary>
            客户端服务
            </summary>
            <remarks>
            数据格式转换 转化为数据层需要的输入格式 或者输出格式
            </remarks>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.DeleteAsync(System.Guid)">
            <summary>
            删除客户端
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.GetAsync(System.Guid)">
            <summary>
            获取客户端详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto)">
            <summary>
            获取客户端列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.CreateAsync(Tiger.Volo.Abp.IdentityServer.Clients.Dto.CreateUpdateClientDto)">
            <summary>
            客户端添加
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.GetAllDistinctAllowedCorsOriginsAsync">
            <summary>
            获取所有跨域地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.GetAssignableApiResourceAsync">
            <summary>
            获取可用的Api资源列表
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.GetAssignableIdentityResourceAsync">
            <summary>
            获取可用的身份资源
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.IdentityResourceAppService.GetAsync(System.Guid)">
            <summary>
            获取标识资源详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.IdentityResourceAppService.GetListAsync(Tiger.Volo.Abp.IdentityServer.IdentityResources.Dto.GetIdentityResourceDto)">
            <summary>
            获取标识资源列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.IdentityResourceAppService.CreateAsync(Tiger.Volo.Abp.IdentityServer.IdentityResources.Dto.CreateUpdateIdentityResourceDto)">
            <summary>
            创建标识资源
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.IdentityResourceAppService.UpdateApiResourceByInputAsync(Volo.Abp.IdentityServer.IdentityResources.IdentityResource,Tiger.Volo.Abp.IdentityServer.IdentityResources.Dto.CreateUpdateIdentityResourceDto)">
            <summary>
            通过传入的数据修改标识资源对象
            </summary>
            <param name="identityResource"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.IdentityServer.PersistedGrantAppService">
            <summary>
            持续授予服务
            </summary>
        </member>
        <member name="T:Tiger.Volo.Abp.Identity.IdentityClaimTypeAppService">
            <summary>
            用户声明类型
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.IdentityClaimTypeAppService.CheckChangingClaimType(Volo.Abp.Identity.IdentityClaimType)">
            <summary>
            检查声明类型
            </summary>
            <param name="claimType"></param>
            <exception cref="T:Volo.Abp.BusinessException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.IdentityClaimTypeAppService.CreateAsync(Tiger.Volo.Abp.Identity.ClaimTypes.Dto.CreateClaimTypeDto)">
            <summary>
            创建声明类型
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.IdentityClaimTypeAppService.GetAllListAsync">
            <summary>
            获取所有声明类型
            </summary>
            <returns></returns>
            <remarks>
            有些没有必要的注释可以省略
            </remarks>
        </member>
        <member name="T:Tiger.Volo.Abp.Identity.IdentitySecurityLogAppService">
            <summary>
            安全日志服务
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.IdentitySecurityLogAppService.DeleteAsync(System.Guid)">
            <summary>
            删除日志
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.IdentitySecurityLogAppService.GetAsync(System.Guid)">
            <summary>
            获取日志详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.IdentitySecurityLogAppService.GetListAsync(Tiger.Volo.Abp.Identity.IdentitySecurityLogs.Dto.GetIdentitySecurityLogInput)">
            <summary>
            获取日志列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService.AddToOrganizationUnitAsync(System.Guid,System.Guid)">
            <summary>
            角色关联组织(一个角色之关联一个组织)
            </summary>
            <param name="roleId"></param>
            <param name="ouId"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService.CreateAsync(Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.IdentityRoleOrgCreateDto)">
            <summary>
            添加角色同时关联组织
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.SmsSend">
            <summary>
            发送短信
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.EmailSend">
            <summary>
            发送邮件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.SaveBytesAsync(System.Byte[])">
            <summary>
            保存文件
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.GetBytesAsync">
            <summary>
            获取文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.AddToOrganizationUnitsAsync(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            将用户关联组织机构
            </summary>
            <param name="userId"></param>
            <param name="ouId"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.GetListOrganizationUnitsAsync(System.Guid,System.Boolean)">
            <summary>
            获取用户关联的组织机构
            </summary>
            <param name="id">组织机构id</param>
            <param name="includeDetails"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.CreateAsync(Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.IdentityUserOrgCreateDto)">
            <summary>
            添加用户，同时用户关联组织id
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.UpdateAsync(System.Guid,Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.IdentityUserOrgUpdateDto)">
            <summary>
            修改用户及用户关联的组织
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.SetOrganizationUnitsAsync(System.Guid,Tiger.Volo.Abp.Identity.Users.Dto.IdentityUserOrganizationUnitUpdateDto)">
            <summary>
            设置用户关联的组织机构
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.RemoveOrganizationUnitsAsync(System.Guid,System.Guid)">
            <summary>
            移除用户关联的组织
            </summary>
            <param name="id"></param>
            <param name="ouId"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.ChangePasswordAsync(System.Guid,Tiger.Volo.Abp.Identity.Users.Dto.IdentityUserSetPasswordInput)">
            <summary>
            修改用户密码
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.BusinessException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.ChangeTwoFactorEnableAsync(System.Guid,Tiger.Volo.Abp.Identity.Users.Dto.TwoFactorEnabledDto)">
            <summary>
            启用双因素认证
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.LockAsync(System.Guid,System.Int32)">
            <summary>
            锁定用户
            </summary>
            <param name="id"></param>
            <param name="seconds">锁定时间</param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.UnlockAsync(System.Guid)">
            <summary>
            解锁用户
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.Sass.Editions.EditionAppService">
            <summary>
            版本服务
            </summary>
        </member>
        <member name="T:Tiger.Volo.Abp.SettingManagement.EmailSettingsAppService">
            <summary>
            邮件设置服务
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.EmailSettingsAppService.GetAsync">
            <summary>
            获取邮箱设置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.EmailSettingsAppService.UpdateAsync(Tiger.Volo.Abp.SettingManagementAppService.UpdateEmailSettingsDto)">
            <summary>
            更新邮箱设置
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.EmailSettingsAppService.SendTestEmailAsync(Tiger.Volo.Abp.SettingManagementAppService.SendTestEmailInput)">
            <summary>
            发送测试邮件
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.SettingManagement.SettingManagementAppService">
            <summary>
            系统设置
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.SettingManagementAppService.FindAsync(System.String,System.String,System.String)">
            <summary>
            查找单个设置
            </summary>
            <param name="name"></param>
            <param name="providerName"></param>
            <param name="providerKey"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.SettingManagementAppService.GetListAsync(System.String,System.String)">
            <summary>
            获取设置列表
            </summary>
            <param name="providerName"></param>
            <param name="providerKey"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.SettingManagementAppService.GetAllAsync(System.String,System.String)">
            <summary>
            获取所有设置
            </summary>
            <param name="providerName"></param>
            <param name="providerKey"></param>
            <param name="fallback"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.SettingManagementAppService.SetAsync(System.String,System.String,System.String,System.String)">
            <summary>
            更新设置
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="providerName"></param>
            <param name="providerKey"></param>
            <param name="forceToSet"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.SettingManagementAppService.TestGetSettingValueAsync">
            <summary>
            从缓存中读取配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.SettingManagementAppService.TestSetManager">
            <summary>
            测试将设置保存到数据库中
            </summary>
            <returns></returns>
        </member>
        <member name="T:Volo.Abp.AuditLogging.AuditLogAppService">
            <summary>
            系统审计日志功能
            </summary>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetAsync(System.Guid)">
            <summary>
            获取一条
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetListAsync(Tiger.Volo.Abp.AuditLogging.Dto.GetAuditLogDto)">
            <summary>
            审核日志列表
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            例子:
            Get api/Values/1
            </remarks>
            <param name="id">主键</param>
            <returns>测试字符串</returns> 
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.DeleteAsync(System.Guid)">
            <summary>
            删除一条日志
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.DeleteManyAsync(System.Guid[])">
            <summary>
            删除多条日志
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetAverageExecutionDurationPerDayAsync(System.DateTime,System.DateTime)">
            <summary>
            每日请求平均执行时间
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetEntityChangeAsync(System.Guid)">
            <summary>
            根据id获取实体变更
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetEntityChangeListAsync(Tiger.Volo.Abp.AuditLogging.Dto.GetEntityChangeDto)">
            <summary>
            获取实体变更列表
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetEntityChangeWithUsernameAsync(System.Guid)">
            <summary>
            获取实体变更及操作人
            </summary>
            <param name="entityChangeId"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetEntityChangesWithUsernameAsync(Tiger.Volo.Abp.AuditLogging.Dto.GetEntityChangeWithUsernameDto)">
            <summary>
            获取实体变更及操作人列表
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Volo.Abp.Identity.OrganizationUnitAppService">
            <summary>
            组织单元服务
            </summary>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetChildrenAsync(System.Guid,System.Boolean)">
            <summary>
            查询组织的子节点
            </summary>
            <param name="parentId"></param>
            <param name="recursive"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.TraverseTreeAsync(Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.OrganizationUnitDto,System.Collections.Generic.List{Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.OrganizationUnitDto})">
            <summary>
            将列表转换为组织树
            </summary>
            <param name="dto"></param>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.SetLeaf(System.Collections.Generic.List{Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.OrganizationUnitDto})">
            <summary>
            设置叶子节点
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetRootListAsync">
            <summary>
             获取根节点的组织列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetListAsync(Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.GetOrganizationUnitInput)">
            <summary>
            获取组织列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetRootAsync">
            <summary>
            获取根节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetAllListAsync(Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.GetAllOrgnizationUnitInput)">
            <summary>
            查询所有组织单元(树结构)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetAsync(System.Guid)">
            <summary>
            获取单条组织机构
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetDetailsAsync(System.Guid)">
            <summary>
            获取单条组织明细(树形结构)
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.FindChildrenAsync(Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.GetOrganizationUnitChildrenDto)">
            <summary>
            查询组织的子节点
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetLastChildOrNullAsync(System.Nullable{System.Guid})">
            <summary>
            获取最后一个子节点
            </summary>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.CreateAsync(Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.OrganizationUnitCreateDto)">
            <summary>
            添加组织
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            自动计算要添加的code (有层次结构代码)
            </remarks>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.UpdateAsync(System.Guid,Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.OrganizationUnitUpdateDto)">
            <summary>
            修改组织
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.MoveAsync(System.Guid,System.Nullable{System.Guid})">
            <summary>
            移动组织树节点
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.DeleteAsync(System.Guid)">
            <summary>
            删除组织
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            1. 删除所有组织关联的角色
            2. 删除所有的组织子节点
            3. Todo:删除组织关联的用户
            </remarks>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetRolesAsync(System.Nullable{System.Guid},Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto)">
            <summary>
            获取组织机构关联的角色
            </summary>
            <param name="ouId"></param>
            <param name="roleInput"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetUnaddedRolesAsync(System.Guid,Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.GetOrganizationUnitInput)">
            <summary>
            获取未关联组织的角色列表
            </summary>
            <param name="id">组织机构id</param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.AddRolesAsync(System.Guid,Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.OrganizationUnitAddRolesDto)">
            <summary>
            组织机构关联多个角色
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.RemoveRoleAsync(System.Guid,System.Guid)">
            <summary>
            从组织机构中移除角色
            </summary>
            <param name="ouid">组织id</param>
            <param name="roleId">角色id</param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetUsersAsync(System.Nullable{System.Guid},Volo.Abp.Identity.GetIdentityUsersInput)">
            <summary>
            获取组织机构关联的用户
            </summary>
            <param name="ouId"></param>
            <param name="userInput"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetUnaddedUsersAsync(System.Guid,Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.GetOrganizationUnitInput)">
            <summary>
            获取未关联组织的用户列表
            </summary>
            <param name="id">组织id</param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.AddUsersAsync(System.Guid,Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.OrganizationUnitAddUsersDto)">
            <summary>
            组织关联多个用户
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.RemoveUserAsync(System.Guid,System.Guid)">
            <summary>
            移除组织关联的用户
            </summary>
            <param name="ouId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetNextChildCodeAsync(System.Nullable{System.Guid})">
            <summary>
            获取下一个子节点的code
            </summary>
            <param name="parentId"></param>
            <returns></returns>
        </member>
    </members>
</doc>
