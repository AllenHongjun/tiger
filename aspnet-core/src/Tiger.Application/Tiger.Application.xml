<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tiger.Application</name>
    </assembly>
    <members>
        <member name="T:Tiger.BlobDemo.MyBlobContainer">
            <summary>
            类型化BLOB容器系统是一种在应用程序中创建和管理多个容器的方法;
            </summary>
        </member>
        <member name="T:Tiger.BlobDemo.MyBlobContainerConfigurationExtensions">
            <summary>
            一个更简单的配置方式,可以为 BlobContainerConfiguration 类创建一个扩展方法:
            </summary>
        </member>
        <member name="T:Tiger.BlobDemo.MyCustomBlobProvider">
             <summary>
             自定义 对象存储提供程序
             
             MyCustomBlobProvider 继承 BlobProviderBase 并覆盖 abstract 方法. 实际的实现取决于你.
            实现 ITransientDependency 接口将这个类注做为瞬态服务注册到依赖注入系统.
            注意: 命名约定很重要. 如果类名没有以 BlobProvider 结尾,则必须手动注册/公开你的服务为 IBlobProvider.
             </summary>
        </member>
        <member name="T:Tiger.BlobDemo.MyCustomBlobProviderConfiguration">
            <summary>
            BlobContainerConfiguration 允许添加/删除提供程序特定的配置对象. 
            如果你的提供者需要额外的配置,你可以为 BlobContainerConfiguration 创建一个包装类提供的类型安全配置选项:
            </summary>
        </member>
        <member name="T:Tiger.BlobDemo.MyService">
            <summary>
            该服务用 my-blob-1 名称保存给定的字节,然后以相同的名称获取先前保存的字节.
            一个BLOB是一个命名对象,每个BLOB都应该有一个唯一的名称,它是一个任意的字符串.
            </summary>
        </member>
        <member name="T:Tiger.BlobDemo.ProfileAppService">
            <summary>
            示例: 用于保存和读取当前用户的个人资料图片的应用服务
            </summary>
        </member>
        <member name="M:Tiger.BlobDemo.ProfileAppService.SaveProfilePictureAsync(System.Byte[])">
            <summary>
            保存图片
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.BlobDemo.ProfileAppService.GetProfilePictureAsync">
            <summary>
            获取图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.BlobDemo.ProfileAppService.SaveMyBlobAsync(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            保存图片
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.BlobDemo.ProfileAppService.GetMyBlobAsync">
            <summary>
            获取图片
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tiger.BlobDemo.ProfilePictureContainer">
            <summary>
            类型化BLOB容器系统是一种在应用程序中创建和管理多个容器的方法;
            </summary>
        </member>
        <member name="T:Tiger.Books.BookAppService">
            <summary>
            书籍管理
            </summary>
        </member>
        <member name="M:Tiger.Books.BookAppService.Upload(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传 文件,并返回相对url(不包含 host port wwwroot)
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.BookAppService.MultiFileUpload(Microsoft.AspNetCore.Http.IFormFileCollection)">
            <summary>
             多文件上传
            </summary>
            <param name="formCollection">表单集合值</param>
            <returns>服务器存储的文件信息</returns>
            <summary>
            上传 文件,并返回相对url(不包含 host port wwwroot)
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Books.BookAppService.UploadFileRequest">
            <summary>
            对文件上传响应模型
            </summary>
        </member>
        <member name="P:Tiger.Books.BookAppService.UploadFileRequest.FileName">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:Tiger.Books.BookAppService.UploadFileRequest.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="M:Tiger.Books.BookAppService.UploadQiniu(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            七牛单文件上传
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.BookAppService.UploadQiniu(System.Collections.Generic.IList{Microsoft.AspNetCore.Http.IFormFile})">
            <summary>
            七牛多文件上传
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Utility.DownLoadUpLoadFilesHelper.UploadAppService.Upload(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传 文件,并返回相对url(不包含 host port wwwroot)
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.TigerApplicationModule.PreConfigureServices(Volo.Abp.Modularity.ServiceConfigurationContext)">
            <summary>
            预配置 
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Tiger.Volo.Abp.FeatureManagement.TigerFeatureAppService">
            <summary>
            特性管理
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService.AddToOrganizationUnitAsync(System.Guid,System.Guid)">
            <summary>
            角色关联组织(一个角色之关联一个组织)
            </summary>
            <param name="roleId"></param>
            <param name="ouId"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService.CreateAsync(Volo.Abp.Identity.IdentityRoleOrgCreateDto)">
            <summary>
            添加角色同时关联组织
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.SmsSend">
            <summary>
            发送短信
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.EmailSend">
            <summary>
            发送邮件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.SaveBytesAsync(System.Byte[])">
            <summary>
            保存文件
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.GetBytesAsync">
            <summary>
            获取文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.AddToOrganizationUnitsAsync(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            将用户关联组织机构
            </summary>
            <param name="userId"></param>
            <param name="ouId"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.CreateAsync(Volo.Abp.Identity.IdentityUserOrgCreateDto)">
            <summary>
            添加用户，同时用户关联组织id
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.GetListOrganizationUnitsAsync(System.Guid,System.Boolean)">
            <summary>
            获取用户关联的组织机构
            </summary>
            <param name="id">组织机构id</param>
            <param name="includeDetails"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.UpdateAsync(System.Guid,Volo.Abp.Identity.IdentityUserOrgUpdateDto)">
            <summary>
            修改用户及用户关联的组织
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Volo.Abp.AuditLogging.AuditLogAppService">
            <summary>
            系统日志功能
            </summary>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetAsync(System.Guid)">
            <summary>
            获取一条
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetListAsync(Volo.Abp.AuditLogging.GetAuditLogDto)">
            <summary>
            审核日志列表
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            例子:
            Get api/Values/1
            </remarks>
            <param name="id">主键</param>
            <returns>测试字符串</returns> 
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.DeleteAsync(System.Guid)">
            <summary>
            删除一条
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.DeleteManyAsync(System.Guid[])">
            <summary>
            删除多条
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetAsync(System.Guid)">
            <summary>
            获取单条组织机构
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetDetailsAsync(System.Guid)">
            <summary>
            获取单条组织明细
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.CreateAsync(Volo.Abp.Identity.OrganizationUnitCreateDto)">
            <summary>
            添加组织
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.UpdateAsync(System.Guid,Volo.Abp.Identity.OrganizationUnitUpdateDto)">
            <summary>
            修改组织
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.DeleteAsync(System.Guid)">
            <summary>
            删除组织
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.SetLeaf(System.Collections.Generic.List{Volo.Abp.Identity.OrganizationUnitDto})">
            <summary>
            后面考虑处理存储leaf到数据库,避免这么进行处理
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.TraverseTreeAsync(Volo.Abp.Identity.OrganizationUnitDto,System.Collections.Generic.List{Volo.Abp.Identity.OrganizationUnitDto})">
            <summary>
            
            </summary>
            <param name="dto"></param>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetUsersAsync(System.Nullable{System.Guid},Volo.Abp.Identity.GetIdentityUsersInput)">
            <summary>
            获取组织机构关联的用户
            </summary>
            <param name="ouId"></param>
            <param name="userInput"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetRolesAsync(System.Nullable{System.Guid},Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto)">
            <summary>
            获取组织机构关联的角色
            </summary>
            <param name="ouId"></param>
            <param name="roleInput"></param>
            <returns></returns>
        </member>
    </members>
</doc>
