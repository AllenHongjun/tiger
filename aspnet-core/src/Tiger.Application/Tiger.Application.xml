<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tiger.Application</name>
    </assembly>
    <members>
        <member name="M:Tiger.Infrastructure.BackgroundWorker.DailySalesWorker.Execute(Quartz.IJobExecutionContext)">
            <summary>
            测试定时任务功能。
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Infrastructure.BackgroundWorker.PassiveUserCheckerWorker">
            <summary>
            设置用户为不活跃用户(如果用户最近30天未登录应用程序)
            </summary>
        </member>
        <member name="T:Tiger.Infrastructure.BackgroundWorker.ResourceConsumptionWorker">
            <summary>
            资源消耗
            </summary>
        </member>
        <member name="T:Tiger.BackgroundWorker.MyQuartzLogWorker">
            <summary>
            Demo 定时任务
            </summary>
            <remarks>
            
            一定要定义Trigger  和JobDetail 不然项目无法启动
            如果数据库 的 Trigger状态是error就无法启动
            不能和 abp自带的任务管理器一起使用 会无法运行
            安装模块化的事项 那个模块需要什么作业 把作业放到对应的模块里面
            </remarks>
        </member>
        <member name="M:Tiger.BackgroundWorker.MyQuartzLogWorker.Execute(Quartz.IJobExecutionContext)">
            <summary>
            测试定时任务功能。
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Blob.Qinui.QiniuBlobContainer">
            <summary>
            类型化BLOB容器系统是一种在应用程序中创建和管理多个容器的方法;
            </summary>
        </member>
        <member name="T:Tiger.Blob.Qinui.QiniuBlobProvider">
            <summary>
            七牛 oss对象存储  https://developer.qiniu.com/kodo/1237/csharp  
            </summary>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailSendAsync">
            <summary>
            邮件发送测试
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailQueueAsync">
            <summary>
            通过队列发送邮件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailSendWithAttachmentAsync">
            <summary>
            发送邮件附件
            </summary>
            <returns></returns>
            <remarks>
            附件发送邮件 https://learn.microsoft.com/zh-cn/dotnet/api/system.net.mail.mailmessage?view=net-7.0
            </remarks>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailSendWithTemplateRenderer">
            <summary>
            测试使用文本模板发送邮件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailSendWithCustomTemplateRenderer">
            <summary>
            替换覆盖文件模板
            </summary>
            <returns></returns>
            <remarks>
            虚拟文件系统 https://docs.abp.io/zh-Hans/abp/latest/Virtual-File-System
            </remarks>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.EncryptPwd">
            <summary>
            加密邮箱密码
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Tiger.Module.OssManagement.FileAppServiceBase.UploadAsync(Tiger.Module.OssManagement.Dtos.UploadFileChunkInput)">
            <summary>
            文件直接上传
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.OssManagement.FileAppServiceBase.UploadAsync(Tiger.Module.OssManagement.Dtos.UploadFileInput)">
            <summary>
            文件分片上传
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.OssManagement.FileUploadMerger.MergeAsync(Tiger.Module.OssManagement.Dtos.CreateOssObjectInput)">
            <summary>
            合并文件
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Module.OssManagement.OssContainerAppService">
            <summary>
            容器服务
            </summary>
        </member>
        <member name="M:Tiger.Module.OssManagement.OssContainerAppService.CreateAsync(System.String)">
            <summary>
            创建容器
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.OssManagement.OssContainerAppService.DeleteAsync(System.String)">
            <summary>
            删除容器
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.OssManagement.OssContainerAppService.GetAsync(System.String)">
            <summary>
            根据名称查询容器
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.OssManagement.OssContainerAppService.GetListAsync(Tiger.Module.OssManagement.Dtos.GetOssContainersInput)">
            <summary>
            获取容器列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.OssManagement.OssContainerAppService.GetObjectListAsync(Tiger.Module.OssManagement.Dtos.GetOssObjectsInput)">
            <summary>
            获取容器的对象列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.OssManagement.OssObjectAppService.BulkDeleteAsync(Tiger.Module.OssManagement.Dtos.BulkDeleteOssObjectInput)">
            <summary>
            批量删除
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.OssManagement.OssObjectAppService.GetAsync(Tiger.Module.OssManagement.Dtos.GetOssObjectInput)">
            <summary>
            获取对象
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Module.OssManagement.PrivateFileAppService">
            <summary>
            所有登录用户访问私有文件服务接口
            bucket限制在users
            path限制在用户id
            </summary>
        </member>
        <member name="T:Tiger.Module.OssManagement.StaticFilesAppService">
            <summary>
            静态文件上传服务
            </summary>
        </member>
        <member name="T:Tiger.Module.System.Cache.CacheAppService">
            <summary>
            缓存管理服务
            </summary>
        </member>
        <member name="T:Tiger.Module.System.Localization.LanguageAppService">
            <summary>
            语言管理服务
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Localization.LanguageAppService.GetListAsync(Tiger.Module.System.Localization.Dtos.LanguageGetListInput)">
            <summary>
            分页查询语言
            </summary>     
        </member>
        <member name="M:Tiger.Module.System.Localization.LanguageAppService.CreateAsync(Tiger.Module.System.Localization.Dtos.CreateLanguageDto)">
            <summary>
            创建语言
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Localization.LanguageAppService.UpdateAsync(System.Guid,Tiger.Module.System.Localization.Dtos.UpdateLanguageDto)">
            <summary>
            编辑语言
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Localization.LanguageAppService.DeleteAsync(System.Guid)">
            <summary>W
            删除语言
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Localization.LanguageAppService.SetDefaultAsync(System.Guid)">
            <summary>
            设置默认语言
            </summary>
        </member>
        <member name="T:Tiger.Module.System.Localization.LanguageTextAppService">
            <summary>
            语言文本
            </summary>
        </member>
        <member name="T:Tiger.Module.System.Platform.Datas.DataAppService">
            <summary>
            数据字典
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.GetAsync(System.String)">
            <summary>
            根据名称查询数据字典
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.GetAllAsync">
            <summary>
            查询所有数据字典
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.GetListAsync(Tiger.Module.System.Platform.Datas.Dtos.DataGetListInput)">
            <summary>
            分页查询数据字典
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.CreateAsync(Tiger.Module.System.Platform.Datas.Dtos.DataCreateDto)">
            <summary>
            创建数据字典
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.UpdateAsync(System.Guid,Tiger.Module.System.Platform.Datas.Dtos.DataUpdateDto)">
            <summary>
            更新数据字典
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            修改的时候同时可以修改数据字典数据
            </remarks>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.DeleteAsync(System.Guid)">
            <summary>
            移除数据字典
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.MoveAsync(System.Guid,Tiger.Module.System.Platform.Datas.Dtos.DataMoveDto)">
            <summary>
            移动数据字典
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.CreateItemAsync(System.Guid,Tiger.Module.System.Platform.Datas.Dtos.DataItemCreateDto)">
            <summary>
            创建字典数据
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.UpdateItemAsync(System.Guid,System.String,Tiger.Module.System.Platform.Datas.Dtos.DataItemUpdateDto)">
            <summary>
            更新字典数据
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Module.System.Platform.Datas.DataAppService.DeleteItemAsync(System.Guid,System.String)">
            <summary>
            根据名称删除字典数据
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Module.System.Platform.Layouts.LayoutAppService">
            <summary>
            布局
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Platform.Layouts.LayoutAppService.CreateAsync(Tiger.Module.System.Platform.Layouts.Dto.LayoutCreateDto)">
            <summary>
            创建布局
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Module.System.Platform.Layouts.LayoutAppService.GetAllListAsync">
            <summary>
            获取所有布局
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Layouts.LayoutAppService.GetAsync(System.Guid)">
            <summary>
            根据id获取布局
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Module.System.Platform.Layouts.LayoutAppService.GetListAsync(Tiger.Module.System.Platform.Layouts.Dto.GetLayoutListInput)">
            <summary>
            分页查询布局列表
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Module.System.Platform.Layouts.LayoutAppService.UpdateAsync(System.Guid,Tiger.Module.System.Platform.Layouts.Dto.LayoutUpdateDto)">
            <summary>
            更新布局
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Module.System.Platform.Menus.MenuAppService">
            <summary>
            菜单
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Platform.Menus.MenuAppService.CreateAsync(Tiger.Module.System.Platform.Menus.Dto.MenuCreateDto)">
            <summary>
            创建菜单
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Menus.MenuAppService.UpdateAsync(System.Guid,Tiger.Module.System.Platform.Menus.Dto.MenuUpdateDto)">
            <summary>
            更新菜单
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Menus.MenuAppService.DeleteAsync(System.Guid)">
            <summary>
            删除菜单
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.BusinessException"></exception>
        </member>
        <member name="M:Tiger.Module.System.Platform.Menus.MenuAppService.GetAllAsync(Tiger.Module.System.Platform.Menus.Dto.MenuGetAllInput)">
            <summary>
            获取所有菜单
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Menus.MenuAppService.GetAsync(System.Guid)">
            <summary>
            获取菜单详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Menus.MenuAppService.GetListAsync(Tiger.Module.System.Platform.Menus.Dto.MenuGetListInput)">
            <summary>
            分页查询菜单列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Platform.Menus.MenuAppService.GetRoleMenuListAsync(Tiger.Module.System.Platform.Menus.Dto.MenuGetByRoleInput)">
            <summary>
            获取角色菜单
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Module.System.Platform.Versions.VersionAppService">
            <summary>
            版本文件管理
            </summary>
        </member>
        <member name="T:Tiger.Module.System.Server.ServerAppService">
            <summary>
            获取服务器信息
            </summary>
        </member>
        <member name="M:Tiger.Module.System.Server.ServerAppService.GetServerBase">
            <summary>
            获取服务器配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Server.ServerAppService.GetServerUsed">
            <summary>
            获取服务器使用信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Server.ServerAppService.GetServerDisk">
            <summary>
            获取服务器磁盘信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.Server.ServerAppService.GetAssemblyList">
            <summary>
            获取框架主要程序集
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tiger.Module.System.TextTemplate.TextTemplateAppService">
            <summary>
            文本模板服务
            </summary>
        </member>
        <member name="M:Tiger.Module.System.TextTemplate.TextTemplateAppService.GetAsync(System.String)">
            <summary>
            根据文本模板名称获取定义内容
            </summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Module.System.TextTemplate.TextTemplateAppService.GetContentAsync(Tiger.Module.System.TextTemplate.Dtos.TextTemplateContentGetInput)">
            <summary>
            获取文本模板内容
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Module.System.TextTemplate.TextTemplateAppService.GetListAsync(Tiger.Module.System.TextTemplate.Dtos.TextTemplateGetListInput)">
            <summary>
            获取所有的文本模板内容
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            abp的文本模板作为资源定义在文件中 从文件中读取出来展示
            </remarks>
        </member>
        <member name="M:Tiger.Module.System.TextTemplate.TextTemplateAppService.RestoreToDefaultAsync(Tiger.Module.System.TextTemplate.Dtos.TextTemplateRestoreInput)">
            <summary>
            重置默认值
            </summary>
            <param name="restoreInput"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.TextTemplate.TextTemplateAppService.UpdateAsync(Tiger.Module.System.TextTemplate.Dtos.TextTemplateUpdateInput)">
            <summary>
            更新文本模板内容
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.System.TextTemplate.TextTemplateAppService.GetTemplateDefinition(System.String)">
            <summary>
            根据名称获取模板定义
            </summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>
            TemplateDefinition abp的定义模板获取  使用之前需要先定义
            详细见文档 https://docs.abp.io/en/abp/latest/Text-Templating-Razor
            </remarks>
        </member>
        <member name="T:Tiger.Module.TaskManagement.BackgroundJobActionAppService">
            <summary>
            作业行为
            </summary>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobActionAppService.AddActionAsync(System.String,Tiger.Module.TaskManagement.Dtos.BackgroundJobActionCreateDto)">
            <summary>
            添加作业行为
            </summary>
            <param name="jobId"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobActionAppService.DeleteActionAsync(System.Guid)">
            <summary>
            删除
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobActionAppService.GetActionsAsync(System.String)">
            <summary>
            获取作业行为详情
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobActionAppService.GetDefinitionsAsync(Tiger.Module.TaskManagement.Dtos.BackgroundJobActionGetDefinitionsInput)">
            <summary>
            获取作业行为定义
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobActionAppService.UpdateActionAsync(System.Guid,Tiger.Module.TaskManagement.Dtos.BackgroundJobActionUpdateDto)">
            <summary>
            更新作业行为
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Module.TaskManagement.BackgroundJobInfoAppService">
            <summary>
            作业管理
            </summary>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobInfoAppService.GetAllGroups">
            <summary>
            获取所有作业分组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobInfoAppService.GetDefinitionsAsync">
            <summary>
            获取作业定义
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobInfoAppService.CreateAsync(Tiger.Module.TaskManagement.Dtos.BackgroundJobInfoCreateDto)">
            <summary>
            创建作业
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobInfoAppService.DeleteAsync(System.String)">
            <summary>
            删除作业
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobInfoAppService.GetAsync(System.String)">
            <summary>
            获取作业明细
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobInfoAppService.GetListAsync(Tiger.Module.TaskManagement.Dtos.BackgroundJobInfoGetListInput)">
            <summary>
            分页获取作业列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobInfoAppService.GetListAsync(Tiger.Module.TaskManagement.Dtos.BackgroundJobInfoBatchInput)">
            <summary>
            查询作业列表
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            动态查询方法使用
            </remarks>
        </member>
        <member name="T:Tiger.Module.TaskManagement.BackgroundJobLogAppService">
            <summary>
            作业日志
            </summary>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobLogAppService.DeleteAsync(System.Int64)">
            <summary>
            删除日志
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobLogAppService.GetAsync(System.Int64)">
            <summary>
            获取作业详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Module.TaskManagement.BackgroundJobLogAppService.GetListAsync(Tiger.Module.TaskManagement.Dtos.BackgroundJobLogGetListInput)">
            <summary>
            分页查询作业日志列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Module.Test.TestAppservice">
            <summary>
            测试服务
            </summary>
        </member>
        <member name="T:Tiger.TigerApplicationModule">
            <summary>
            项目包含 .Application.Contracts 项目的 应用服务 接口实现.
            它依赖 .Application.Contracts 项目, 因为它需要实现接口与使用DTO.
            它依赖 .Domain 项目,因为它需要使用领域对象(实体,仓储接口等)执行应用程序逻辑.
            </summary>
        </member>
        <member name="T:Tiger.Volo.Abp.Account.ProfileAppService">
            <summary>
            Profile服务
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.ProfileAppService.ChangePhoneNumberAsync(Tiger.Volo.Abp.Account.Dto.ChangePhoneNumberInput)">
            <summary>
            修改绑定的手机号
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.ProfileAppService.SendChangePhoneNumberCodeAsync(Tiger.Volo.Abp.Account.Dto.SendChangePhoneNumberCodeInput)">
            <summary>
            发送修改手机号验证码
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.ProfileAppService.SendEmailConfirmLinkAsync(Tiger.Volo.Abp.Account.Dto.SendEmailConfirmCodeDto)">
            <summary>
            发送邮箱确认链接
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.ProfileAppService.ConfirmEmailAsync(Tiger.Volo.Abp.Account.Dto.ComfirmEmailInput)">
            <summary>
            用户确认邮箱
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.ProfileAppService.ChangeAvatarAsync(Tiger.Volo.Abp.Account.Dto.ChangeAvatarInput)">
            <summary>
            修改用户头像
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks> 通用用户声明类型配置用户头像</remarks>
        </member>
        <member name="T:Tiger.Volo.Abp.Account.TigerAccountAppService">
            <summary>
            用户账号管理
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.SendSmsCodeAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            发送短信验证码
            </summary>
            <param name="phone"></param>
            <param name="token"></param>
            <param name="template"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.RegisterAsync(Volo.Abp.Account.RegisterDto)">
            <summary>
            通过用户名和邮箱注册账号
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.RegisterAsync(Tiger.Volo.Abp.Account.Dto.PhoneRegisterDto)">
            <summary>
            通过手机号注册
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.ResetPasswordAsync(Tiger.Volo.Abp.Account.Dto.PhoneResetPasswordDto)">
            <summary>
            通过手机验证码重置密码
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.SendPhoneRegisterCodeAsync(Tiger.Volo.Abp.Account.Dto.SendPhoneRegisterCodeDto)">
            <summary>
            发送注册短信验证码
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.SendPhoneSigninCodeAsync(Tiger.Volo.Abp.Account.Dto.SendPhoneSigninCodeDto)">
            <summary>
            发送手机号登录验证码
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.SendPhoneResetPasswordCodeAsync(Tiger.Volo.Abp.Account.Dto.SendPhoneResetPasswordCode)">
            <summary>
            发送重置密码短信验证码
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.SendEmailSigninCodeAsync(Tiger.Volo.Abp.Account.Dto.SendEmailSigninCodeDto)">
            <summary>
            发送邮件登录验证码
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.CheckNewUserPhoneNumberNotBeUsedAsync(System.String)">
            <summary>
            检查手机号是否被使用
            </summary>
            <param name="phoneNumber">手机号</param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Account.TigerAccountAppService.ThrowIfInvalidEmailAddress(System.String)">
            <summary>
            
            </summary>
            <param name="inputEmail"></param>
            <exception cref="T:Volo.Abp.Validation.AbpValidationException"></exception>
        </member>
        <member name="T:Tiger.Volo.Abp.FeatureManagement.TigerFeatureAppService">
            <summary>
            特性管理
            </summary>
        </member>
        <member name="T:Tiger.Volo.Abp.IdentityServer.ApiResourceAppService">
            <summary>
            Api资源
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ApiResourceAppService.GetListAsync(Tiger.Volo.Abp.IdentityServer.ApiResources.ApiResourceGetByPagedInputDto)">
            <summary>
            分页查询Api资源列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ApiResourceAppService.CreateAsync(Tiger.Volo.Abp.IdentityServer.ApiResources.ApiResourceCreateDto)">
            <summary>
            创建
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ApiResourceAppService.UpdateAsync(System.Guid,Tiger.Volo.Abp.IdentityServer.ApiResources.ApiResourceUpdateDto)">
            <summary>
            更新Api资源
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ApiResourceAppService.DeleteAsync(System.Guid)">
            <summary>
            删除Api资源
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.IdentityServer.ApiScopeAppService">
            <summary>
            Api作用域
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Tiger.Volo.Abp.IdentityServer.ClientAppService">
            <summary>
            客户端服务
            </summary>
            <remarks>
            数据格式转换 转化为数据层需要的输入格式 或者输出格式
            </remarks>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.DeleteAsync(System.Guid)">
            <summary>
            删除客户端
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.GetAsync(System.Guid)">
            <summary>
            获取客户端详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.GetListAsync(Tiger.Volo.Abp.IdentityServer.Clients.ClientGetByPagedDto)">
            <summary>
            获取客户端列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.CreateAsync(Tiger.Volo.Abp.IdentityServer.Clients.ClientCreateDto)">
            <summary>
            客户端添加
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.UpdateAsync(System.Guid,Tiger.Volo.Abp.IdentityServer.Clients.ClientUpdateDto)">
            <summary>
            更新客户端
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.CloneAsync(System.Guid,Tiger.Volo.Abp.IdentityServer.Clients.ClientCloneDto)">
            <summary>
            克隆客户端
            </summary>
            <remarks>
            参考 Skoruba.IdentityServer4.Admin 项目 https://github.com/skoruba/IdentityServer4.Admin.git
            </remarks>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.GetAllDistinctAllowedCorsOriginsAsync">
            <summary>
            获取所有跨域地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.GetAssignableApiResourcesAsync">
            <summary>
            获取可用的Api资源列表
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.ClientAppService.GetAssignableIdentityResourcesAsync">
            <summary>
            获取可用的身份资源
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Tiger.Volo.Abp.IdentityServer.IdentityResourceAppService">
            <summary>
            身份资源
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.IdentityResourceAppService.GetAsync(System.Guid)">
            <summary>
            获取标识资源详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.IdentityResourceAppService.GetListAsync(Tiger.Volo.Abp.IdentityServer.IdentityResources.IdentityResourceGetByPagedDto)">
            <summary>
            获取标识资源列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.IdentityResourceAppService.CreateAsync(Tiger.Volo.Abp.IdentityServer.IdentityResources.IdentityResourceCreateOrUpdateDto)">
            <summary>
            创建标识资源
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.IdentityServer.IdentityResourceAppService.UpdateApiResourceByInputAsync(Volo.Abp.IdentityServer.IdentityResources.IdentityResource,Tiger.Volo.Abp.IdentityServer.IdentityResources.IdentityResourceCreateOrUpdateDto)">
            <summary>
            通过传入的数据修改标识资源对象
            </summary>
            <param name="identityResource"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.IdentityServer.PersistedGrantAppService">
            <summary>
            持续授予服务
            </summary>
        </member>
        <member name="T:Tiger.Volo.Abp.Identity.IdentityClaimTypeAppService">
            <summary>
            用户声明类型
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.IdentityClaimTypeAppService.CheckChangingClaimType(Volo.Abp.Identity.IdentityClaimType)">
            <summary>
            检查声明类型
            </summary>
            <param name="claimType"></param>
            <exception cref="T:Volo.Abp.BusinessException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.IdentityClaimTypeAppService.CreateAsync(Tiger.Volo.Abp.Identity.ClaimTypes.Dto.CreateClaimTypeDto)">
            <summary>
            创建声明类型
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.IdentityClaimTypeAppService.GetAllListAsync">
            <summary>
            获取所有声明类型
            </summary>
            <returns></returns>
            <remarks>
            有些没有必要的注释可以省略
            </remarks>
        </member>
        <member name="T:Tiger.Volo.Abp.Identity.IdentitySecurityLogAppService">
            <summary>
            安全日志服务
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.IdentitySecurityLogAppService.DeleteAsync(System.Guid)">
            <summary>
            删除日志
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.IdentitySecurityLogAppService.GetAsync(System.Guid)">
            <summary>
            获取日志详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.IdentitySecurityLogAppService.GetListAsync(Tiger.Volo.Abp.Identity.IdentitySecurityLogs.Dto.GetIdentitySecurityLogInput)">
            <summary>
            获取日志列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService">
            <summary>
            角色服务
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService.CreateAsync(Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.IdentityRoleOrgCreateDto)">
            <summary>
            添加角色同时关联组织
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService.MoveAllUsers(System.Guid,System.Nullable{System.Guid})">
            <summary>
            移动当前角色用户到目标角色
            </summary>
            <param name="roleId"></param>
            <param name="targetRoleId"></param>
            <param name="cancelAssign"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService.ExportRolesToXlsxAsync(Tiger.Volo.Abp.Identity.ClaimTypes.Dto.GetIdentityRolesInput)">
            <summary>
            Export Roles to XLSX
            </summary>
            <param name="GetIdentityRolesInput">input</param>
            <returns>查询到的所有角色</returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService.AddToOrganizationUnitAsync(System.Guid,System.Guid)">
            <summary>
            角色关联组织(一个角色之关联一个组织)
            </summary>
            <param name="roleId"></param>
            <param name="ouId"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService.GetClaimsAsync(System.Guid)">
            <summary>
            获取角色关联的声明
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService.AddClaimAsync(System.Guid,Tiger.Volo.Abp.Identity.Roles.Dto.IdentityRoleClaimCreateDto)">
            <summary>
            添加角色声明
            </summary>
            <param name="id">角色id</param>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService.UpdateClaimAsync(System.Guid,Tiger.Volo.Abp.Identity.Roles.Dto.IdentityRoleClaimUpdateDto)">
            <summary>
            更新角色声明
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService.DeleteClaimAsync(System.Guid,Tiger.Volo.Abp.Identity.Roles.Dto.IdentityRoleClaimDeleteDto)">
            <summary>
            删除角色声明
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.GetListAsync(Tiger.Volo.Abp.Identity.Users.Dto.IdentityUserGetListInput)">
            <summary>
            分页查询用户列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.ExportUsersToXlsxAsync(Tiger.Volo.Abp.Identity.Users.Dto.IdentityUserGetListInput)">
            <summary>
            将用户导出xlxs
            </summary>
            <param name="GetIdentityRolesInput">input</param>
            <returns>查询到的所有用户</returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.AddToOrganizationUnitsAsync(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            将用户关联组织机构
            </summary>
            <param name="userId"></param>
            <param name="ouId"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.GetListOrganizationUnitsAsync(System.Guid,System.Boolean)">
            <summary>
            获取用户关联的组织机构
            </summary>
            <param name="id">组织机构id</param>
            <param name="includeDetails"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.CreateAsync(Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.IdentityUserOrgCreateDto)">
            <summary>
            添加用户，同时用户关联组织id
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.UpdateAsync(System.Guid,Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.IdentityUserOrgUpdateDto)">
            <summary>
            修改用户及用户关联的组织
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.SetOrganizationUnitsAsync(System.Guid,Tiger.Volo.Abp.Identity.Users.Dto.IdentityUserOrganizationUnitUpdateDto)">
            <summary>
            设置用户关联的组织机构
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.RemoveOrganizationUnitsAsync(System.Guid,System.Guid)">
            <summary>
            移除用户关联的组织
            </summary>
            <param name="id"></param>
            <param name="ouId"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.ChangePasswordAsync(System.Guid,Tiger.Volo.Abp.Identity.Users.Dto.IdentityUserSetPasswordInput)">
            <summary>
            修改用户密码
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.BusinessException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.ChangeTwoFactorEnableAsync(System.Guid,Tiger.Volo.Abp.Identity.Users.Dto.TwoFactorEnabledDto)">
            <summary>
            启用双因素认证
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.LockAsync(System.Guid,System.Int32)">
            <summary>
            锁定用户
            </summary>
            <param name="id"></param>
            <param name="seconds">锁定时间</param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.UnlockAsync(System.Guid)">
            <summary>
            解锁用户
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.Sass.Editions.EditionAppService">
            <summary>
            版本服务
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Sass.Editions.EditionAppService.MoveAllTenantAsync(System.Guid,System.Nullable{System.Guid})">
            <summary>
            移动所有租户到指定版本
            </summary>
            <param name="editionId">当前版本</param>
            <param name="dstEditionId">目标版本</param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Sass.Editions.EditionAppService.GetUsageStatisticAsync">
            <summary>
            统计每个版本的租户数量
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.Sass.Tenants.TenantAppService">
            <summary>
            租户管理
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Sass.Tenants.TenantAppService.GetAsync(System.Guid)">
            <summary>
            更具id查询租户信息
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Sass.Tenants.TenantAppService.GetAsync(System.String)">
            <summary>
            根据租户名称查询租户信息
            </summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:Volo.Abp.UserFriendlyException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.Sass.Tenants.TenantAppService.GetListAsync(Tiger.Volo.Abp.Sass.Tenants.TenantGetListInput)">
            <summary>
            分页查询租户列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Sass.Tenants.TenantAppService.CreateAsync(Tiger.Volo.Abp.Sass.Tenants.TenantCreateDto)">
            <summary>
            创建租户
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Sass.Tenants.TenantAppService.UpdateAsync(System.Guid,Tiger.Volo.Abp.Sass.Tenants.TenantUpdateDto)">
            <summary>
            更新租户信息
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Sass.Tenants.TenantAppService.DeleteAsync(System.Guid)">
            <summary>
            删除租户
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Sass.Tenants.TenantAppService.GetConnectionStringAsync(System.Guid,System.String)">
            <summary>
            根据租户id和名称查询连接字符串
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Sass.Tenants.TenantAppService.GetConnectionStringAsync(System.Guid)">
            <summary>
            查询连接字符串
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            需要multi-tendey 模块的代码  事件代码 缓存代码
            </remarks>
        </member>
        <member name="M:Tiger.Volo.Abp.Sass.Tenants.TenantAppService.SetConnectionStringAsync(System.Guid,Tiger.Volo.Abp.Sass.Tenants.TenantConnectionStringCreateOrUpdate)">
            <summary>
            设置连接字符串
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Sass.Tenants.TenantAppService.DeleteConnectionStringAsync(System.Guid,System.String)">
            <summary>
            删除租户链接字符串
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.SettingUi.SettingUiAppService">
            <summary>
            设置管理服务
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingUi.SettingUiAppService.GroupSettingDefinitionsAsync">
            <summary>
            获取分组设置定义
            </summary>
            <returns></returns>
            <exception cref="T:Volo.Abp.Authorization.AbpAuthorizationException"></exception>
        </member>
        <member name="T:Volo.Abp.AuditLogging.AuditLogAppService">
            <summary>
            系统审计日志功能
            </summary>
            <remarks>
            审计日志 https://docs.abp.io/zh-Hans/abp/7.0/Audit-Logging
            </remarks>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetAsync(System.Guid)">
            <summary>
            获取一条
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetListAsync(Tiger.Volo.Abp.AuditLogging.Dto.GetAuditLogDto)">
            <summary>
            审核日志列表
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            例子:
            Get api/Values/1
            </remarks>
            <returns>测试字符串</returns> 
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.DeleteAsync(System.Guid)">
            <summary>
            删除一条日志
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.DeleteManyAsync(System.Guid[])">
            <summary>
            删除多条日志
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetErrorRate(System.DateTime,System.DateTime)">
            <summary>
            获取日志中的错误率
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetAverageExecutionDurationPerDayAsync(System.DateTime,System.DateTime)">
            <summary>
            每日请求平均执行时间
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetEntityChangeAsync(System.Guid)">
            <summary>
            根据id获取实体变更
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetEntityChangeListAsync(Tiger.Volo.Abp.AuditLogging.Dto.GetEntityChangeDto)">
            <summary>
            获取实体变更列表
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetEntityChangeWithUsernameAsync(System.Guid)">
            <summary>
            获取实体变更及操作人
            </summary>
            <param name="entityChangeId"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetEntityChangesWithUsernameAsync(Tiger.Volo.Abp.AuditLogging.Dto.GetEntityChangeWithUsernameDto)">
            <summary>
            获取实体变更及操作人列表
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Volo.Abp.Identity.OrganizationUnitAppService">
            <summary>
            组织单元服务
            </summary>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetChildrenAsync(System.Guid,System.Boolean)">
            <summary>
            查询组织的子节点
            </summary>
            <param name="parentId"></param>
            <param name="recursive"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.TraverseTreeAsync(Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.OrganizationUnitDto,System.Collections.Generic.List{Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.OrganizationUnitDto})">
            <summary>
            将列表转换为组织树
            </summary>
            <param name="dto"></param>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.SetLeaf(System.Collections.Generic.List{Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.OrganizationUnitDto})">
            <summary>
            设置叶子节点
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetRootListAsync">
            <summary>
             获取根节点的组织列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetListAsync(Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.GetOrganizationUnitInput)">
            <summary>
            获取组织列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetRootAsync">
            <summary>
            获取根节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetAllListAsync(Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.GetAllOrgnizationUnitInput)">
            <summary>
            查询所有组织单元(树结构)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetAsync(System.Guid)">
            <summary>
            获取单条组织机构
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetDetailsAsync(System.Guid)">
            <summary>
            获取单条组织明细(树形结构)
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.FindChildrenAsync(Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.GetOrganizationUnitChildrenDto)">
            <summary>
            查询组织的子节点
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetLastChildOrNullAsync(System.Nullable{System.Guid})">
            <summary>
            获取最后一个子节点
            </summary>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.CreateAsync(Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.OrganizationUnitCreateDto)">
            <summary>
            添加组织
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            自动计算要添加的code (有层次结构代码)
            </remarks>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.UpdateAsync(System.Guid,Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.OrganizationUnitUpdateDto)">
            <summary>
            修改组织
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.MoveAsync(System.Guid,System.Nullable{System.Guid})">
            <summary>
            移动组织树节点
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.DeleteAsync(System.Guid)">
            <summary>
            删除组织
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            1. 删除所有组织关联的角色
            2. 删除所有的组织子节点
            3. Todo:删除组织关联的用户
            </remarks>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetRolesAsync(System.Nullable{System.Guid},Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto)">
            <summary>
            获取组织机构关联的角色
            </summary>
            <param name="ouId"></param>
            <param name="roleInput"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetUnaddedRolesAsync(System.Guid,Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.GetOrganizationUnitInput)">
            <summary>
            获取未关联组织的角色列表
            </summary>
            <param name="id">组织机构id</param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.AddRolesAsync(System.Guid,Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.OrganizationUnitAddRolesDto)">
            <summary>
            组织机构关联多个角色
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.RemoveRoleAsync(System.Guid,System.Guid)">
            <summary>
            从组织机构中移除角色
            </summary>
            <param name="ouid">组织id</param>
            <param name="roleId">角色id</param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetUsersAsync(System.Nullable{System.Guid},Volo.Abp.Identity.GetIdentityUsersInput)">
            <summary>
            获取组织机构关联的用户
            </summary>
            <param name="ouId"></param>
            <param name="userInput"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetUnaddedUsersAsync(System.Guid,Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.GetOrganizationUnitInput)">
            <summary>
            获取未关联组织的用户列表
            </summary>
            <param name="id">组织id</param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.AddUsersAsync(System.Guid,Tiger.Volo.Abp.Identity.OrganizationUnits.Dto.OrganizationUnitAddUsersDto)">
            <summary>
            组织关联多个用户
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.RemoveUserAsync(System.Guid,System.Guid)">
            <summary>
            移除组织关联的用户
            </summary>
            <param name="ouId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetNextChildCodeAsync(System.Nullable{System.Guid})">
            <summary>
            获取下一个子节点的code
            </summary>
            <param name="parentId"></param>
            <returns></returns>
        </member>
    </members>
</doc>
