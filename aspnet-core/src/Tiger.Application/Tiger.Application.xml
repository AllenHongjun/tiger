<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tiger.Application</name>
    </assembly>
    <members>
        <member name="M:Tiger.Business.Basic.BasicAppService.QiniuBlobSaveAsync(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            七牛文件上传保存图片
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Business.Stocks.ShipmentHeaderAppService">
            <summary>
            入库单
            </summary>
        </member>
        <member name="T:Tiger.Basic.CategoryAppService">
            <summary>
            产品分类
            </summary>
        </member>
        <member name="M:Tiger.Basic.CategoryAppService.GetAllListAsync(Tiger.Basic.Categorys.GetCategoryListDto)">
            <summary>
            获取分类列表树
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Basic.CategoryAppService.GetAsync(System.Guid)">
            <summary>
            获取单条分类
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Basic.CategoryAppService.GetDetailsAsync(System.Guid)">
            <summary>
            获取分类树明细
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Basic.CategoryAppService.GetChildrenAsync(System.Guid)">
            <summary>
            根据父级id查找子分类
            </summary>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Basic.CategoryAppService.TraverseTreeAsync(Tiger.Basic.Categorys.CategoryDto,System.Collections.Generic.List{Tiger.Basic.Categorys.CategoryDto})">
            <summary>
            将列表转换为组织树
            </summary>
            <param name="dto"></param>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Basic.CategoryAppService.SetLeaf(System.Collections.Generic.List{Tiger.Basic.Categorys.CategoryDto})">
            <summary>
            设置为叶子节点
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Basic.CommentAppService">
            <summary>
            商品评论
            </summary>
        </member>
        <member name="M:Tiger.Basic.ProductAppService.GetListAsync(Tiger.Basic.Products.GetProductListDto)">
            <summary>
            获取产品列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Basic.ProductAttributeAppService.GetProductAttributeDtoByTypeId(System.Guid)">
            <summary>
            根据属性类型查询所有的属性和值 返回指定类型的规格属性
            </summary>
            <param name="productAttributeTypeId"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Basic.ProductAttributeTypeAppService">
            <summary>
            商品属性分类
            </summary>
        </member>
        <member name="M:Tiger.Basic.ProductAttributeTypeAppService.GetAllAsync">
            <summary>
            获取所有规格（属性分类）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Basic.WarehouseAppService.GetAllAsync">
            <summary>
            获取所有仓库
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tiger.Books.AuthorAppService">
            <summary>
            实现 author 的服务层
            </summary>
        </member>
        <member name="M:Tiger.Books.AuthorAppService.CreateAsync(Tiger.Books.CreateAuthorDto)">
            <summary>
            添加作者
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.AuthorAppService.DeleteAsync(System.Guid)">
            <summary>
            删除作者
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.AuthorAppService.GetAsync(System.Guid)">
            <summary>
            获取作者明细
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            这个方法根据 `Id` 获得 `Author` 实体, 使用 [对象到对象映射](../Object-To-Object-Mapping.md) 转换为 `AuthorDto`. 这需要配置AutoMapper, 后面会介绍.
            </remarks>
        </member>
        <member name="M:Tiger.Books.AuthorAppService.GetListAsync(Tiger.Books.GetAuthorListDto)">
            <summary>
            获取作者列表
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:Tiger.Books.AuthorAppService.UpdateAsync(System.Guid,Tiger.Books.UpdateAuthorDto)">
            <summary>
            修改作者信息
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Books.BlogModule.BlogModule">
            <summary>
            由于ABP是一个模块化框架,因此每个模块都定义它自己的服务并在它自己的单独模块类中通过依赖注入进行注册.例:
            </summary>
        </member>
        <member name="M:Tiger.Books.BlogModule.BlogModule.PreConfigureServices(Volo.Abp.Modularity.ServiceConfigurationContext)">
            <summary>
            ABP引入了依照约定的服务注册.依照约定你无需做任何事,它会自动完成.如果要禁用它,你可以通过重写PreConfigureServices方法,设置SkipAutoServiceRegistration为true.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Tiger.Books.BlogModule.BlogPostAppService">
            <summary>
            BlogPostAppService 由于它是从已知的基类派生的,因此会自动注册为transient生命周期.
            </summary>
        </member>
        <member name="T:Tiger.Books.BlogModule.TaxCalculator">
            <summary>
            TaxCalculator因为实现了ITransientDependency,所以它会自动注册为transient生命周期.
            </summary>
        </member>
        <member name="T:Tiger.Books.BlogModule.TaxCalculator4">
             <summary>
             配置依赖注入服务的另一种方法是使用DependencyAttribute.它具有以下属性:
             Singleton  指定将创建服务的单个实例。
             Transient或Scoped  指定将为每个范围创建服务的新实例。
             Lifetime: 注册的生命周期:Singleton,Transient或Scoped.
            TryRegister: 设置true则只注册以前未注册的服务.使用IServiceCollection的TryAdd...扩展方法.
            ReplaceServices: 设置true则替换之前已经注册过的服务.使用IServiceCollection的Replace扩展方法.
             
             Transient  指定每次创建服务的新实例
             </summary>
        </member>
        <member name="T:Tiger.Books.BlogModule.TaxAppService">
            <summary>
            注入依赖关系
            使用已注册的服务有三种常用方法.
            
            继承 autofac 很简单 主要是使用。 有些时候 不是按照规范来依赖注入组件的话 就会无法启用。
            
            
            </summary>
        </member>
        <member name="T:Tiger.Books.BookAppService">
            <summary>
            书籍管理
            </summary>
            
        </member>
        <member name="M:Tiger.Books.BookAppService.GetAsync(System.Guid)">
            <summary>
            查询一条书籍数据
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            重写父类的 GetAsync方法
            </remarks>
        </member>
        <member name="M:Tiger.Books.BookAppService.GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto)">
            <summary>
            分页查询书籍的数据
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.BookAppService.GetAuthorLookupAsync">
            <summary>
            获取作者筛选列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.BookAppService.DeleteBooksByType(Tiger.Books.BookType)">
            <summary>
            根据类型删除书籍
            </summary>
            <param name="bookType"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.BookAppService.Upload(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传 文件,并返回相对url(不包含 host port wwwroot)
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.BookAppService.MultiFileUpload(Microsoft.AspNetCore.Http.IFormFileCollection)">
            <summary>
             多文件上传
            </summary>
            <param name="formCollection">表单集合值</param>
            <returns>服务器存储的文件信息</returns>
            <summary>
            上传 文件,并返回相对url(不包含 host port wwwroot)
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Books.BookAppService.UploadFileRequest">
            <summary>
            对文件上传响应模型
            </summary>
        </member>
        <member name="P:Tiger.Books.BookAppService.UploadFileRequest.FileName">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:Tiger.Books.BookAppService.UploadFileRequest.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="M:Tiger.Books.BookAppService.UploadQiniu(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            七牛单文件上传
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.BookAppService.UploadQiniu(System.Collections.Generic.IList{Microsoft.AspNetCore.Http.IFormFile})">
            <summary>
            七牛多文件上传
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Books.Demo.MyBookService">
             <summary>
             注入 IDataFilter 服务到你的类中.
            在 using 语句中使用 Disable 方法创建一个代码块, 其中禁用了 ISoftDelete 过滤器(始终与 using 搭配使用,确保代码块执行后将过滤重置为之前的状态).
            IDataFilter.Enable 方法可以启用过滤.可以嵌套使用 Enable 和 Disable 方法定义内部作用域.
            
             
             
             
             
             </summary>
        </member>
        <member name="T:Tiger.Books.Demo.MyProductService">
            <summary>
            实现这个接口 ITransientDependency 就会作为瞬态注入到服务当中。
            </summary>
        </member>
        <member name="T:Tiger.Books.Demo.MyService">
            <summary>
            获取当前用户相关的信息
            
            在Web应用程序中检索有关已登录用户的信息是很常见的. 当前用户是与Web应用程序中的当前请求相关的活动用户.
            </summary>
        </member>
        <member name="T:Tiger.Books.Demo.PersonAppService">
            <summary>
            人物
            </summary>
            <remark>
            repssitories 仓储数据查询
            </remark>
        </member>
        <member name="M:Tiger.Books.Demo.PersonAppService.GetList(System.String)">
            <summary>
            获取列表数据
            </summary>
            <param name="nameFilter"></param>
            <returns></returns>
            <remarks>
            GetList 方法使用标准LINQ Where 和 ToList 方法在数据源中过滤并获取People集合.
            </remarks>
        </member>
        <member name="M:Tiger.Books.Demo.PersonAppService.GetListAsync(System.String)">
            <summary>
            通过仓储对象来对实体执行LINQ查询以操作数据库
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.Demo.PersonAppService.TestQueryableAndAsync(System.String)">
            <summary>
            测试 IQueryable 异步操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailSendAsync">
            <summary>
            邮件发送测试
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailQueueAsync">
            <summary>
            通过队列发送邮件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailSendWithAttachmentAsync">
            <summary>
            发送邮件附件
            </summary>
            <returns></returns>
            <remarks>
            附件发送邮件 https://learn.microsoft.com/zh-cn/dotnet/api/system.net.mail.mailmessage?view=net-7.0
            </remarks>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailSendWithTemplateRenderer">
            <summary>
            测试使用文本模板发送邮件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.TestEmailSendWithCustomTemplateRenderer">
            <summary>
            替换覆盖文件模板
            </summary>
            <returns></returns>
            <remarks>
            虚拟文件系统 https://docs.abp.io/zh-Hans/abp/latest/Virtual-File-System
            </remarks>
        </member>
        <member name="M:Tiger.Books.Demo.EmailService.EncryptPwd">
            <summary>
            加密邮箱密码
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Tiger.Books.IAuthorAppService">
            <summary>
            作者应用服务接口
            </summary>
            <remarks>
            `IApplicationService` 是一个常规接口, 所有应用服务都继承自它, 所以 ABP 框架可以识别它们.
            在 `Author` 实体中定义标准方法用于CRUD操作.
            `PagedResultDto` 是一个ABP框架中预定义的 DTO 类. 它拥有一个 `Items` 集合 和一个 `TotalCount` 属性, 用于返回分页结果.
            优先从 `CreateAsync` 方法返回 `AuthorDto` (新创建的作者), 虽然在这个程序中没有这么做 - 这里只是展示一种不同用法.
            </remarks>
        </member>
        <member name="T:Tiger.Module.Marketings.CouponAppService">
            <summary>
            优惠券
            </summary>
        </member>
        <member name="T:Tiger.Marketings.CouponHistoryAppService">
            <summary>
            优惠券领取记录
            </summary>
        </member>
        <member name="T:Tiger.Orders.CartItemAppService">
            <summary>
            购物车
            
            ICartItemAppService 注意实现接口的中 泛型的类型必须一致
            </summary>
        </member>
        <member name="M:Tiger.Orders.CartItemAppService.AddToCartItem(System.Guid,System.Guid,System.Guid)">
            <summary>
            商品添加购物车
            </summary>
            <param name="productId">商品id</param>
            <param name="skuId">SkuIdid</param>
            <param name="memberId">会员id</param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Orders.OrderAppService.GetListAsync(Tiger.Orders.Orders.GetOrderListDto)">
            <summary>
            分页查询书籍的数据
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Orders.OrderAppService.CreateOrder(Tiger.Business.Orders.Dtos.CreateOrderDto)">
            <summary>
            生成订单
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Stock.ReceiptHeaderAppService">
            <summary>
            入库单
            </summary>
        </member>
        <member name="T:Tiger.Infrastructure.BackgroundJob.RegistrationService">
            <summary>
            使用 IBackgroundJobManager 服务向队列中添加一个发送电子邮件作业
            </summary>
        </member>
        <member name="M:Tiger.Infrastructure.BackgroundWorker.CrystalQuartzLogWorker.Execute(Quartz.IJobExecutionContext)">
            <summary>
            测试定时任务功能。
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Infrastructure.BackgroundWorker.MyWorker">
            <summary>
            后台定时作业（后台工作者 demo）
            BackgroundWorkerBase 是创建后台工作者的简单方法.
            </summary>
        </member>
        <member name="M:Tiger.Infrastructure.BackgroundWorker.MyWorker.StartAsync(System.Threading.CancellationToken)">
            <summary>
            startAsync 开始你的工作者(在应用程序启动时),
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Infrastructure.BackgroundWorker.MyWorker.StopAsync(System.Threading.CancellationToken)">
            <summary>
            topAsync 停止它(在应用程序关闭时).
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Infrastructure.BackgroundWorker.PassiveUserCheckerWorker">
            <summary>
            设置用户为不活跃用户(如果用户最近30天未登录应用程序)
            </summary>
        </member>
        <member name="M:Tiger.Infrastructure.BackgroundWorker.PassiveUserCheckerWorker.DoWorkAsync(Volo.Abp.BackgroundWorkers.PeriodicBackgroundWorkerContext)">
            <summary>
            实现 DoWorkAsync 方法执行定期任务.
            </summary>
            <param name="workerContext"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Infrastructure.BackgroundWorker.SchedulerManager">
            <summary>
            Scheduler管理器
            </summary>
        </member>
        <member name="M:Tiger.Infrastructure.BackgroundWorker.SchedulerManager.Create">
            <summary>
            初始化创建Scheduler
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Infrastructure.BackgroundWorker.SchedulerManager.CreateCompressLogsJob(Quartz.IScheduler)">
            <summary>
            压缩日志任务
            </summary>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Infrastructure.BackgroundWorker.SchedulerManager.CreateDBBackupJob(Quartz.IScheduler)">
            <summary>
            数据库备份任务
            </summary>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Infrastructure.BackgroundWorker.SchedulerManager.CreateDailySalesJob(Quartz.IScheduler)">
            <summary>
            每日销售报表
            </summary>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Infrastructure.ObjectMapping.TigerApplicationAutoMapperProfile">
             <summary>
             AutoMapper提供了多种定义类之间映射的方法. 有关详细信息请参阅AutoMapper的文档.
            其中定义一种映射的方法是创建一个Profile 类.例如:
             </summary>
        </member>
        <member name="M:Tiger.Infrastructure.Rest.RestService.TestOauthToken">
            <summary>
            请求接口测试
            </summary>
        </member>
        <member name="T:Tiger.BackgroundWorker.MyQuartzLogWorker">
            <summary>
            Demo 定时任务
            </summary>
        </member>
        <member name="M:Tiger.BackgroundWorker.MyQuartzLogWorker.Execute(Quartz.IJobExecutionContext)">
            <summary>
            测试定时任务功能。
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.BlobDemo.MyBlobContainer">
            <summary>
            类型化BLOB容器系统是一种在应用程序中创建和管理多个容器的方法;
            </summary>
        </member>
        <member name="T:Tiger.BlobDemo.MyBlobContainerConfigurationExtensions">
            <summary>
            一个更简单的配置方式,可以为 BlobContainerConfiguration 类创建一个扩展方法:
            </summary>
        </member>
        <member name="T:Tiger.BlobDemo.MyCustomBlobProvider">
             <summary>
             自定义 对象存储提供程序
             
             MyCustomBlobProvider 继承 BlobProviderBase 并覆盖 abstract 方法. 实际的实现取决于你.
            实现 ITransientDependency 接口将这个类注做为瞬态服务注册到依赖注入系统.
            注意: 命名约定很重要. 如果类名没有以 BlobProvider 结尾,则必须手动注册/公开你的服务为 IBlobProvider.
             </summary>
        </member>
        <member name="M:Tiger.BlobDemo.MyCustomBlobProvider.SaveAsync(Volo.Abp.BlobStoring.BlobProviderSaveArgs)">
            <summary>
            七牛文件上传保存
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.BlobDemo.MyCustomBlobProviderConfiguration">
            <summary>
            BlobContainerConfiguration 允许添加/删除提供程序特定的配置对象. 
            如果你的提供者需要额外的配置,你可以为 BlobContainerConfiguration 创建一个包装类提供的类型安全配置选项:
            </summary>
        </member>
        <member name="T:Tiger.BlobDemo.MyService">
            <summary>
            该服务用 my-blob-1 名称保存给定的字节,然后以相同的名称获取先前保存的字节.
            一个BLOB是一个命名对象,每个BLOB都应该有一个唯一的名称,它是一个任意的字符串.
            </summary>
        </member>
        <member name="T:Tiger.BlobDemo.ProfileAppService">
            <summary>
            示例: 用于保存和读取当前用户的个人资料图片的应用服务
            </summary>
        </member>
        <member name="M:Tiger.BlobDemo.ProfileAppService.SaveProfilePictureAsync(System.Byte[])">
            <summary>
            保存图片
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.BlobDemo.ProfileAppService.GetProfilePictureAsync">
            <summary>
            获取图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.BlobDemo.ProfileAppService.SaveMyBlobAsync(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            保存图片
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.BlobDemo.ProfileAppService.GetMyBlobAsync">
            <summary>
            获取图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.BlobDemo.ProfileAppService.SaveQiniuBlobAsync(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            保存图片
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.BlobDemo.ProfilePictureContainer">
            <summary>
            类型化BLOB容器系统是一种在应用程序中创建和管理多个容器的方法;
            </summary>
        </member>
        <member name="T:Tiger.Blob.Qinui.QiniuBlobContainer">
            <summary>
            类型化BLOB容器系统是一种在应用程序中创建和管理多个容器的方法;
            </summary>
        </member>
        <member name="T:Tiger.Blob.Qinui.QiniuBlobProvider">
            <summary>
            七牛 oss对象存储  https://developer.qiniu.com/kodo/1237/csharp  
            
            </summary>
        </member>
        <member name="M:Tiger.Utilities.DownLoadUpLoadFilesHelper.UploadAppService.Upload(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传 文件,并返回相对url(不包含 host port wwwroot)
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.TigerApplicationModule">
            <summary>
            项目包含 .Application.Contracts 项目的 应用服务 接口实现.
            它依赖 .Application.Contracts 项目, 因为它需要实现接口与使用DTO.
            它依赖 .Domain 项目,因为它需要使用领域对象(实体,仓储接口等)执行应用程序逻辑.
            </summary>
        </member>
        <member name="T:Tiger.Volo.Abp.Account.TigerAccountAppService">
            <summary>
            用户账号管理
            </summary>
        </member>
        <member name="T:Tiger.Volo.Abp.FeatureManagement.TigerFeatureAppService">
            <summary>
            特性管理
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService.AddToOrganizationUnitAsync(System.Guid,System.Guid)">
            <summary>
            角色关联组织(一个角色之关联一个组织)
            </summary>
            <param name="roleId"></param>
            <param name="ouId"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityRoleAppService.CreateAsync(Volo.Abp.Identity.IdentityRoleOrgCreateDto)">
            <summary>
            添加角色同时关联组织
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.SmsSend">
            <summary>
            发送短信
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.EmailSend">
            <summary>
            发送邮件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.SaveBytesAsync(System.Byte[])">
            <summary>
            保存文件
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.GetBytesAsync">
            <summary>
            获取文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.AddToOrganizationUnitsAsync(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            将用户关联组织机构
            </summary>
            <param name="userId"></param>
            <param name="ouId"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.CreateAsync(Volo.Abp.Identity.IdentityUserOrgCreateDto)">
            <summary>
            添加用户，同时用户关联组织id
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.GetListOrganizationUnitsAsync(System.Guid,System.Boolean)">
            <summary>
            获取用户关联的组织机构
            </summary>
            <param name="id">组织机构id</param>
            <param name="includeDetails"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.Identity.TigerIdentityUserAppService.UpdateAsync(System.Guid,Volo.Abp.Identity.IdentityUserOrgUpdateDto)">
            <summary>
            修改用户及用户关联的组织
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.SettingManagement.EmailSettingsAppService">
            <summary>
            邮件设置服务
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.EmailSettingsAppService.GetAsync">
            <summary>
            获取邮箱设置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.EmailSettingsAppService.UpdateAsync(Tiger.Volo.Abp.SettingManagementAppService.UpdateEmailSettingsDto)">
            <summary>
            更新邮箱设置
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.EmailSettingsAppService.SendTestEmailAsync(Tiger.Volo.Abp.SettingManagementAppService.SendTestEmailInput)">
            <summary>
            发送测试邮件
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.SettingManagement.SettingManagementAppService">
            <summary>
            系统设置
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.SettingManagementAppService.FindAsync(System.String,System.String,System.String)">
            <summary>
            查找单个设置
            </summary>
            <param name="name"></param>
            <param name="providerName"></param>
            <param name="providerKey"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.SettingManagementAppService.GetListAsync(System.String,System.String)">
            <summary>
            获取设置列表
            </summary>
            <param name="providerName"></param>
            <param name="providerKey"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.SettingManagementAppService.GetAllAsync(System.String,System.String)">
            <summary>
            获取所有设置
            </summary>
            <param name="providerName"></param>
            <param name="providerKey"></param>
            <param name="fallback"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.SettingManagementAppService.SetAsync(System.String,System.String,System.String,System.String)">
            <summary>
            更新设置
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="providerName"></param>
            <param name="providerKey"></param>
            <param name="forceToSet"></param>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.SettingManagementAppService.TestGetSettingValueAsync">
            <summary>
            从缓存中读取配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tiger.Volo.Abp.SettingManagement.SettingManagementAppService.TestSetManager">
            <summary>
            测试将设置保存到数据库中
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tiger.Volo.Abp.TenantManagement.TigerTenantManagement">
            <summary>
            租户管理
            </summary>
        </member>
        <member name="M:Tiger.Volo.Abp.TenantManagement.TigerTenantManagement.FindById(System.Guid,System.Boolean)">
            <summary>
            根据id获取租户信息
            </summary>
            <param name="id">租户id</param>
            <param name="includeDetails">includeDetails</param>
            <returns></returns>
        </member>
        <member name="T:Volo.Abp.AuditLogging.AuditLogAppService">
            <summary>
            系统日志功能
            </summary>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetAsync(System.Guid)">
            <summary>
            获取一条
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetListAsync(Volo.Abp.AuditLogging.GetAuditLogDto)">
            <summary>
            审核日志列表
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            例子:
            Get api/Values/1
            </remarks>
            <param name="id">主键</param>
            <returns>测试字符串</returns> 
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.DeleteAsync(System.Guid)">
            <summary>
            删除一条日志
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.DeleteManyAsync(System.Guid[])">
            <summary>
            删除多条日志
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.AuditLogging.AuditLogAppService.GetAverageExecutionDurationPerDayAsync(System.DateTime,System.DateTime)">
            <summary>
            每日请求平均执行时间
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetAsync(System.Guid)">
            <summary>
            获取单条组织机构
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetDetailsAsync(System.Guid)">
            <summary>
            获取单条组织明细
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.CreateAsync(Volo.Abp.Identity.OrganizationUnitCreateDto)">
            <summary>
            添加组织
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.UpdateAsync(System.Guid,Volo.Abp.Identity.OrganizationUnitUpdateDto)">
            <summary>
            修改组织
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.DeleteAsync(System.Guid)">
            <summary>
            删除组织
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.TraverseTreeAsync(Volo.Abp.Identity.OrganizationUnitDto,System.Collections.Generic.List{Volo.Abp.Identity.OrganizationUnitDto})">
            <summary>
            将列表转换为组织树
            </summary>
            <param name="dto"></param>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.SetLeaf(System.Collections.Generic.List{Volo.Abp.Identity.OrganizationUnitDto})">
            <summary>
            后面考虑处理存储leaf到数据库,避免这么进行处理
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetUsersAsync(System.Nullable{System.Guid},Volo.Abp.Identity.GetIdentityUsersInput)">
            <summary>
            获取组织机构关联的用户
            </summary>
            <param name="ouId"></param>
            <param name="userInput"></param>
            <returns></returns>
        </member>
        <member name="M:Volo.Abp.Identity.OrganizationUnitAppService.GetRolesAsync(System.Nullable{System.Guid},Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto)">
            <summary>
            获取组织机构关联的角色
            </summary>
            <param name="ouId"></param>
            <param name="roleInput"></param>
            <returns></returns>
        </member>
    </members>
</doc>
